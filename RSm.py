# CICADA2K16
#!/usr/local/bin/python
# -*- coding: utf8 -*-
#coding=utf-8

from collections import namedtuple
from collections import OrderedDict
from math import log
from math import sqrt
import collections
#import math
import operator
import sys
import random
import nltk
import time


english_words=[]
prob_words=[]
runes_words=[]
runes_set=set()
oeis_seq=OrderedDict()
#oeis_seq=dict()
Prob_R=dict()
Prob_E=dict()

Runeset = namedtuple("Runeset", "Icon English Gematria Shift")
F = Runeset(Icon = u'ᚠ', English = "F", Gematria = 2, Shift = 0)
U = Runeset(Icon = u'ᚢ', English = "U", Gematria = 3, Shift = 1)
TH = Runeset(Icon = u'ᚦ', English = "TH", Gematria = 5, Shift = 2)
O = Runeset(Icon = u'ᚩ', English = "O", Gematria = 7, Shift = 3)
R = Runeset(Icon = u'ᚱ', English = "R", Gematria = 11, Shift = 4)
CK = Runeset(Icon = u'ᚳ', English = "CK", Gematria = 13, Shift = 5)
G = Runeset(Icon = u'ᚷ', English = "G", Gematria = 17, Shift = 6)
W = Runeset(Icon = u'ᚹ', English = "W", Gematria = 19, Shift = 7)
H = Runeset(Icon = u'ᚻ', English = "H", Gematria = 23, Shift = 8)
N = Runeset(Icon = u'ᚾ', English = "N", Gematria = 29, Shift = 9)
I = Runeset(Icon = u'ᛁ', English = "I", Gematria = 31, Shift = 10)
J = Runeset(Icon = u'ᛂ', English = "J", Gematria = 37, Shift = 11)
EO = Runeset(Icon = u'ᛇ', English = "EO", Gematria = 41, Shift = 12)
P = Runeset(Icon = u'ᛈ', English = "P", Gematria = 43, Shift = 13)#u'ᛈ'
X = Runeset(Icon = u'ᛉ', English = "X", Gematria = 47, Shift = 14)
S = Runeset(Icon = u'ᛋ', English = "S", Gematria = 53, Shift = 15)
T = Runeset(Icon = u'ᛏ', English = "T", Gematria = 59, Shift = 16)
B = Runeset(Icon = u'ᛒ', English = "B", Gematria = 61, Shift = 17)
E = Runeset(Icon = u'ᛖ', English = "E", Gematria = 67, Shift = 18)
M = Runeset(Icon = u'ᛗ', English = "M", Gematria = 71, Shift = 19)
L = Runeset(Icon = u'ᛚ', English = "L", Gematria = 73, Shift = 20)
NG = Runeset(Icon = u'ᛝ', English = "NG", Gematria = 79, Shift = 21)
OE = Runeset(Icon = u'ᛟ', English = "OE", Gematria = 83, Shift = 22)
D = Runeset(Icon = u'ᛞ', English = "D", Gematria = 89, Shift = 23)
A = Runeset(Icon = u'ᚪ', English = "A", Gematria = 97, Shift = 24)
AE = Runeset(Icon = u'ᚫ', English = "AE", Gematria = 101, Shift = 25)
Y = Runeset(Icon = u'ᚣ', English = "Y", Gematria = 103, Shift = 26)
IA = Runeset(Icon = u'ᛡ', English = "IA", Gematria = 107, Shift = 27)
EA = Runeset(Icon = u'ᛠ', English = "EA", Gematria = 109, Shift = 28)
SPACE = Runeset(Icon = u'•', English = " ", Gematria = 0, Shift = 30)

runelist = [F, U, TH, O, R, CK, G, W, H, N, I, J, EO, P, X, S, T, B, E, M, L, NG, OE, D, A, AE, Y, IA, EA]
ral="ᚠᚢᚦᚩᚱᚳᚷᚹᚻᚾᛁᛂᛇᛈᛉᛋᛏᛒᛖᛗᛚᛝᛟᛞᚪᚫᚣᛡᛠ"

Page0 = u"ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ•ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪ\nᛝ•ᛝᚦᛡᚹᛋᚻ•ᛁᚳ•ᚫᛈᚫᚷᚩ•ᛗᛁᚪ•ᛖᚩ•ᛏᚹ\nᚩ•ᚠᚣᚢᛏᛂ•ᚦᛂᛠᛖᚳᚾᛠ•ᚳᛠᛖ•ᚱ\nᚩᚢᛉ•ᛞᚹᚻᛒᛝᚠᚪᚳᛂᚢ•ᚩᛂᛡᛠᛁᛚᚷᚻ•ᛒᚢ\nᛂ•ᛉᚪᚳᚹᛡ•ᛗᚩᛈᚣᛞᛡᛚᛈ•ᛇᛁᚦᚱ•ᚣᚷᛗ•ᛉ\nᛟᚷᛋ•ᛗᛈᛂᛟᛞ•ᛟᛏᛡᛟ•ᛏᛝᛁ•ᛗᛝᚣᚪᚫ•ᛝ•ᚱ\nᚣᛂ•ᚾᛚᚢᛉᛒ•ᚻᛈᛂᚩᛠ•ᚷᚫᚹ•ᛉᛋᛞᚳ•ᚢᛏ•\nᛟᚻᛇᚾᛈᛏ•ᛠᚣᛒᚢᚷ•ᚷᚪᛇ•ᚾᚷᚩᛖᛚᛗᛒᚦ•ᚣ\nᛡᛟᛇᚣ•ᛗᚳᛟᚦ•ᛖᛚᚱᛇᛈᚱᛞᚣ•ᛉᛞ•ᛝᚣᛈ•\nᛋᛖᛉᚹ•ᚳᚷᚠᛞᚱᛖ•ᛞᛖᚹᚩᛇᛟ•ᚻᚩᛟ•ᛒᛋ•ᚻ\nᛠᚪᚳᛁᛗᛉᛂᛗᛖ•ᛗᛚ•ᚷᚩᛏᚦᛉᛖᛠᚱᚷᚣ"

Ptypes ="""|| page 0-2 crosses
ᛋᚻᛖᚩᚷᛗᛡᚠ•ᛋᚣᛖᛝᚳ•ᚦᛂᚷᚫ•ᚠᛂᛟ•
ᚩᚾᚦ•ᚾᛖᚹᛒᚪᛋᛟᛇᛁᛝᚢ•ᚾᚫᚷᛁᚦ•ᚻᛒᚾᛡ• 
ᛈᛒᚾ•ᛇᛂᚦ•ᚪᛝᚣᛉ•ᛒᛞᛈ•ᛖᛡᚠᛉᚷᚠ•
ᛋᛈᛏᚠᛈᚢᛝᚣᛝᛉᛡ•ᚣᚻ•ᛒᚢ•ᚷᚩᛈ•ᛝᚫᚦ•ᛁ
ᚫᚻᛉᚦᛈᚷ•ᚣᚠᛝᚳᛂ•ᚦᚪᛗᛁᛝᛁᛡᚣ•ᚻᛇ•ᛏᚻᚫ
ᛡ•ᛉᚣ•ᛖᚢᛝ•ᚳᚠᚾ•ᛇᚦᛂᛁᚦ•ᚦᛈ•ᚣᛝᛠ•ᚣᚾ
ᛖᚣ•ᛞᛉᛝᚹ•ᛒᚳᛉᛞᛒᚠ•ᛗᛏᚾᛖ•ᛠᛂᚾᛚᚷ
ᛒ•ᛉᚷᚦ•ᚣᛁᛞᚪ•ᛝᚷᛗᛂᚱᚩᛚᛇ•ᚣᛏᛈᛁᚦᛞᛂ•
ᛟᚻᛚ•ᛠ•ᚠᛉᚫᛈᚷᛉ•ᚠᛚᚹᛇᛏᚫ•ᚠᚷᚾ•ᛗᛇᛚᚾ•
ᛝᛗᚠᚱᛡ•ᚪᛋ•ᛠᛗᛝᛉᛉᛇᛞᛒ•ᛟᛞᛗᚩ•ᛠ
ᛇᚻ•ᛞᛝᚷ•ᛟᛝᛚᚢᚱᚾᛏ•ᚫᛋᚣᚢᚻᚱᛏ•ᚻᚳ•ᛋᛟ
ᛏᛟᛝᚢᚱ•ᛋ•ᚠᚩᛖᚹᛠᛟᛚᚠᚫ•ᛗᚱᛝ•ᛞᚪᛗᚱ•ᚹ
ᚪᛁᛗᛋᚾ•ᛋᛟᚱᚢᚹᛋᛚᛡ•ᛟᚪᚫᛝᛋᛞᛈᛏ•ᚳᚱᚦ
ᛡ•ᚱᛒᚩᛞᚦᚠ•ᚣᛉᛁᛏ•ᛟᛁ•ᚠᛚᚩ•ᚠᛠ•ᚱᚩᛟᛗᚻ
ᛗᚷᛈᚻ•ᚫᚻᚾᚩᚻᚣ•ᛟᛋᛚ•ᚾᚷ•ᚫᚣ•ᛟᚳᛒᛚᛂ•ᛝ
ᛚᛟ•ᚫᛂᛠᚹ•ᛠᚦᚩ•ᛒᛟᚣ•ᚳᚠᚳᛂ•ᛚᚫ•ᚾ•ᚦᛈ•
ᚢᛉ•ᛟᛉᚷ•ᛈᚠᛋᛇᚫᛟ•ᛝᛈᛇᚩᛖᚪ•ᚷᚫᛡᛝᚦᚩ
•ᛈᚪᛟᚦᚱᛝᚫ•ᚳᛋᛒᛇᚣᚻ•ᛏᛉᛖᛚᚱ•ᚷᚹᚣ•ᛂᚠ
ᛁᚾᛡᚳᚣᛠᛁᛡ•ᚩᚦ•ᛖᚳᚫᚳᛉᛡᛠ•ᚩᛚᚳ•ᚠᚱ
ᛞᛝᛖᚢ•ᛞᚳᛚᛠᛋᛉᚳᚷᛡ•ᚹᛋᚦ•ᚠᛞᛝ•ᛁᛡ
ᛗᚪᚫᚷ•ᚹᛋ•ᚾᛞ•ᚳᛈᚦᛉᛈᛠᛠ•ᚹᚢ•ᛠᚹ•ᚠᚹ
ᛂᚣ•ᛉᛞᚹᚳᚷᚳᛟ•ᛞᛉᛟ•ᚱᛡᚷ•ᚾᛈᚪᚣᛈ•ᚳ
ᚣᚻ•ᚠᛖᛂᛠᚾ•ᛟᚫ•ᚢᚪ•ᚻᚱ•ᛖᛠᚦᚠᛂᚪ•ᛚᛉ
ᛋᛏ•ᛗᚠᛚᚠᛏ•ᚷᛁᚦ•ᚢᛚᚷ•ᛉᛠᛏᛋᛚᛂᛈ•ᛚᛉᛁ
ᛟᛗ•ᚢ•ᚻᛏ•ᛒᛇᛚᛞᚻᛒᛗ•ᛠᚱᛒ•ᚾᚻᛒᛖᚷᛇ•
ᛞᛚᚹᛇᛡᛈᚩ•ᚻᛖᛠ•ᚹᛁᚱᛁᚻ•ᚢᚦᚻᚣ•ᚾᛉᛒᚷᛂ
ᛈᚢ•ᛝᛠᚠᚾᛁᛖᛞᛡᛝᚱ•ᛞᛒᛂᛡᛟᛗᛁ•ᚠᛏ•ᛂ
ᛞᛁᚦᚱᛚᛋ•ᛖᛇᚩᚷᛒᛏᛞ•ᚦᚪᚾᚳᚣ•ᛡᛋᚦᛞ•ᛝᚠᛚ
ᛖᚷᚻᚳ•ᛖᚩᛁᛏᚾᛉ•ᛈᛏᚠᚻᚱᛞᛖᚠᛏ•ᚫᚹᚻ•ᛒ
ᚳ•ᚠ•ᛈᚪᛚᚢᛠᚾᛚᛂ•ᛂᚳᛚᚹᛠᛞᚢᛞᛇ•ᛠᛉ
ᛞᚹᚻᛠ•ᚦᛡᚫᚳᛚᛏᚹᛖᛁᚳ•ᛈᛟᛞᚳ•ᚾᚻᚪ•ᚱᛁᚷ
ᚦᛠᛖᛏᚷ•ᚦᚻᚩᛡᚹᚫᛂᛖ•ᛝᛠᛞ•ᚩᚫ•ᚪᛚ•ᛒᛂ
ᚳᚢᛉᛏᚪᛒᛂᛈ•ᚠᛠ•ᚻᛞᚾᛡᚢᛈᛋᚢᚹ•

|| page 3 // 1st part
ᛚᛂ•ᛇᚻᛝᚳᚦᛏᚫᛂᛏᛉᚻ•ᛏᚢᛟ•ᛋᛈᚱᚷ
•ᚣᚾᚪᚷᛇᛝᚾ•ᚹᚠᚣᚾᛒᛠᛡ•ᛈᚾᚣᚪᛋᛗ
ᛒ•ᛡᛠᛡᛁ•ᚩᛒᚱᚾᛚᛠ•ᚱᛚᛚᛖᛒᚹᚾᚻᛗᚠ
ᛟᛒ•ᛝ•ᚱᚪᛡᚷᛟᛇᛏᛗᛉ•ᛞᛇ•ᛗᚣᚻᛠ•ᛁᛚᛋ•ᚾ
ᚹᚳᚠᛈᛗᛈᛚ•ᛠᛋᚦᚠᛟᛡ•ᚦᛖᚣ•ᚳᛂᛚᚳᛡᛗ•
ᛒᛞᚳᛇ•ᛂᛁᛏᛟ•ᛞᛠᛖᛡᚾᛏ•

|| page 3-6 2nd
ᛈᛞᚦ•ᛇᛞᛇ•ᚫᛚᚳ•ᛡᛇ•ᛠᚻ•ᚹᛗᚣᚦ
ᚢ•ᚻᛏᚦᚱᚻᛝ•ᛚᛝᛋ•ᚫᛠᚷᛋᛚ•ᛋᛉ
ᚩᚻᚹᛞᛗᛖᛗᚪᚠ•ᚳᚣᚳᚫᚾ•ᛏᚦᚷ•ᛁᛂᛁ
•ᚳᛞᛡᛉ•ᚻᚫᚫᛠᚷ•ᛠᛝ•ᚠᛏᚩᚱᛞᚳᛇ•ᚠᚢ
ᛉᛠᛒᚩ•ᛉᛁᚣᚷᛋᛋᛒᛠ•ᚩᛁᛈ•ᛁᛂᛁᚩᛖ•ᚻᛠᚻ
ᛚᛡ•ᚣᛈᛉᛁᚹᛗᚳᛁ•ᛚᚷᚠᚾᛡᚳᛉ•ᛈᚩᚱᛡ•ᚻ•ᛂ
ᛗ•ᛟᛉᛝ•ᚢᛗᛇᛠᚷᛝ•ᛝᚹᚳ•ᛚᛝᚢ•ᛉᛂᚠᛟ
ᚢ•ᚷᛠ•ᛗᛉ•ᚪᚹ•ᛚᚢᛉᚫ•ᛗᛞᛝᚻᚱᚣ•ᚻᚪ•ᚷᛁ
ᚠᚷᚳ•ᚫᛝᛂᛇᛉᛡ•ᚾᚦᛒᚢᛂᚱ•ᚹ•ᚷᛚᛟᚷ•ᚦᛇᚠ•
ᚦᛠᛁ•ᛋᚷ•ᚷᚣ•ᛠᛡᛈ•ᛡᚫᛚ•ᚦᛠᛉᚫ•ᛖᛗ
ᛖᛏᛟᛏ•ᛠᚳᚠ•ᚳᛠᚷ•ᚦ•ᛈᛁᚳᚾ•ᛇᚣᛝᛂᛝ
ᛗᚹᚳᚾ•ᛒᚣᛠ•ᚩᛟᚷᚱ•ᛗᚱᛗᛈᛡᚹ•ᚫᛟᚦᛟ•ᛈ
ᛉᛂᛚ•ᚱᛚᚱᛒᚪᛈᛏᛉᛚᛏ•ᛗᛉᛁ'ᚹ•ᛂᛋᛟᛗᚾᚱ
ᛖᛒᛋ•ᚳᛏᛚᛟ•ᛋᛒᚠᛉᚦᚪᛠᚢ•ᛇᛉ•ᚱᚷᛏᛇᛠ
ᛁᛂᛒᛟ•ᛉᚷᛂᛝ•ᛠᚦ•ᚱᛝᛒ•ᚾᚢᚪᛝᛒᛈᛋᛠ•ᛈ
ᚹᚩᚻᛖ•ᚫᛇᚷᚾᚫᛋᛇ•ᚩᛈᛗ•ᛖᛉᛡᛒᚹ•ᚢᛖᛁᛞ•
ᛈᚪᛇᚷᛋᚳᚷᛞᛈᚣ•ᛡᛚᚦᚱ•ᚳᚢᚠᛇᚦ•ᛉᛖᛚ•ᚢ
ᚱᚫ•ᛉᚻᛂᚫᛗᛚᚠ•ᚳᛝᛞ•ᛁᛝᚩ•ᚳᛋᛟᛖᚣᛟᚻᚢ•
ᚷᛞᚹᚪ•ᛖᛋᚷᛝᚠᛉ•ᛞᛉᛂ•ᛠᚻᛁ•ᚦᛈᛉᚣ•ᛡ•
ᛇᛞᛇᛝᛇᛝ•ᛖᛠᛞᚱ•ᛚᛇᛏ•ᛉᛏᚣ•ᚱᛇ•ᛈᛝᛇ
ᛈᚩᛁᛚᛖᚠ•ᛇᚫᚪ•ᚣᛝᚠᚣ•ᚠᛞᚾᛚ•ᛉᛏᚾᚫᛋ•ᛁᚩ
ᚳᚢ•ᚣᛠᚾᛏᚷᚳᚪ•ᛉᛡᛇ•ᚦᛂᚣᛂᛚᛟᛖᛚ•ᚣ•
•ᛈᛡ•ᛖᚹᛟ•ᛇᚾᚪ•ᚻᛞᛇᛋ•ᚦᚣᛇᚦᛂᚦᚱᚢ•ᚳᛠ
ᚪ•ᚢᛂᛡᛈ•ᚣᚫᛇᛋ•ᚻᛠᛏᚣᛞᚣᚫᚠᚻᚩ•ᛟᛗ
ᛉᛟᛂᚷ•ᚢᛡᚱᛡᚳ•ᛁᚠᛟ•ᛁᛂᛈᛒ•ᛖᛝᚣᚦᚩᚫᚣ•
ᛠᛉᛡᛖᛚ•ᛁᚱᚣᛞᛠᛂ•ᚫᚳ•ᛗᚷᛁᚫᚢᚪᚫ•ᛂᚪ
ᚻᛈ•ᚠᛞᛚᛁᛠᛈᛟᚣᚩ•ᚢᛒᚷᛝᛟᚢᛝᛋᚢᚳ•ᛏ
ᛞ•ᚫᛈᚩᛂ•ᛒᚻᚱᛁᚷᚻᛂ•ᚣᚹᛗᛇᚾᚫ•ᛞᛝᛇ•ᛟᛂ
ᛝᚳᛖᛠ•ᛉᚪᚱᚣ•ᚪᚢᛏ•ᚳᛈᚳ•ᚩᛇᛟ•ᚫᛈ•ᛏ
ᛉᚳᚻᛞᛇ•ᛉᛒᛠ•ᚫᚾᛂ•ᛠᚪᛒ•ᛖᛠᚹ•ᛡᛚ•
ᚹᛁᛡᛋᛈᛚᚦᚪᛋᛂ•ᛡᛞᚣᚱᛞᛟ•ᚦᚱᛉᛟᚹ•ᚣᛞᛏ•
ᚷᛚᛡᚻᚹᛗᚱ•ᛝᚠᚳ•ᚱᚫᛁᛒᚷᛈᚣ•ᛞᚪᚱᚪᛉᛟ•ᚢ
ᚩᛁᛠ•

|| page 6-7
ᚪᛏᛉᛒ•ᛗ•ᚷᛡᛋᛒ•ᛉᛇ•ᚷᚾᛠᚫᚷᛝᛞ•
ᛉᛖᛏᚩᚷᛡ•ᛝᚻᛏ•ᚳᛁᚣ•ᛂᛏ•ᛟᚩᚻᚱᛂ•
ᚳᛖᛡᚩ•ᛞᚪᛏᚣᚢᚾᚱᛇ•ᚫᚫᛁᛖᚠᛝᚦᚻ•
ᛉᛁᛟᛋᛁ•ᛗᚪ•ᚢᛂᚳᛋᚹᚾᚣ•ᚩᛈᛉᚱ•ᛚᚫᛟᛏᛡ•ᛂ
ᛈᛗ•ᛞᛋᚠᛗ•ᛟᚹ•ᛞᛚᛏ•ᚷᚱ•ᚩᚢᛋᚻᚪ•ᚣᛇᛡᛚ
ᚢᚻ•ᛈᚹᛂᛚᚷᛒ•ᛗᚢᛂᛗ•ᛇᚾᛇ•"ᚫᛚᚪᛚᚷᚪ•ᛋ
ᚻᛝ•ᛚᚦᛒ•ᛋᚳᚢᚳᚩᛡ"•ᛚᚳᛂ•ᛉᚪᚾᛇᛉ•ᛠ
ᛗᛈᚢ•ᛗᚠᛚᛠᛝ•ᛒᛉᛁ•ᛚᚦᚱ•ᛠᛡᛁᚳ•ᚩᛉᛖ
ᛞᛡ•ᛏᛋᛗᛠᛂᛈ•ᛠᛟ•ᛡᚫᚦᚹᚻᛈᛇᚪᚷᛈᚻ
ᛠ•ᚳᛚᛠᛈ•ᛡᚣᚾᛁ•ᛚᛡᛁᚳ•ᚫᛇᚾ•ᚫᚳᛡᚱᛡᛚ
ᛞ•ᛒᛟᛝᛡ•ᛉᛗᛝ•ᚳᚻᛟᛠᚾᛈᚳᚦ•ᛁᛇᚦ•ᛇᚢᚩ
•ᚦᛈᚪ•ᛡᛚᛟᚹᛡᛈ•ᛂᛗ•ᚷᛒᛈᛋᚾᛇ•ᛏᚩᚷᚢᚾᚫ
ᛖ•ᚾᚣᛁᛖ•ᛞᛝ•ᛞᛝ•ᛚᚢᛚᛉ•ᚪᚾᛝ•ᛇᚪᛂ•ᚻ•ᛞ
ᚹᛈᚫᚹᚫ•ᛇᛁᛚᛝ•ᚦᚾᚳ•ᛒᛁᛏ•ᛠᚳᚩᛇᛖᛝ•ᚳᚻ
ᛟᚻᚫᛂ•ᛟᛉ•ᛁᚳᛖᛏᛋᚹᛖᚾᛡᚣᛂᛗ•ᛖᚳᚪ•
        •ᛞᚩ•ᛟᛏᚦᚫ•ᚳᚹᛂ•ᛉᛠ•ᚷᛠᛗ•
                (5 dots)

|| page 8
ᛉᛁᛉᛗ•ᚢᛉᛗᚳᚦᛈᚩᛒ•ᛡᚾᛏ•ᛠᛉ
•ᛈᚱᚣ•ᚩᚳᛠᛗᛝᚷᛉᛚᚢ•ᛝᛁᛏᚩ•
ᛂᚠᛝ•ᛋᛚᚾᛞ•ᚩᛗ•ᛇᚫ•ᚱᛞᚹᛏᛂᚦ•
ᚣᚦᛋ•ᚫᚣᛖᛋᛉᛟᛒ•ᛠᚱᛇ•ᛈᛝᚢᛈ•ᚩᚦᛉ•ᚪᚻ
ᛟᚱᛝᚢᛖᚱ•ᚣᛚᛉᛚ•ᛡᛚᚱ•ᛈᚹᛇᚾ•ᛠᚪᚱᛉᛝ•
ᚣᛋᚻᚢᛚ•ᛋᚣ•ᚷᚾᚢ•ᛇᚫᚾᚾ•ᚩᚫᛖᛞ•ᚪᚩᛂᛡᚢ
ᚪᛉ•ᚱᛉᛡᛟᛂ•ᛗᛁᛇᛚᛠᚻᚦᛗᛠᚣ•ᚷᛒᚳᛈ
ᛉᚳ•ᚾᛟᛟᛋᚷᛗᛈᛖᛏᛚᚾᛂ•ᛂᚳᛝᚩ•ᛁᚹᛚᛠᛒ•
ᚠᚪᛖ•ᛏᛝ•ᚾᛈᛠᚩᛏᚦ•ᚻᛝᛉᛈᚻᛈᚳᛈᚱᚢ•ᛚ
ᚠᛖᛟ•ᚷᚪᛒᚠᛁᚫᚠᚢᛟ•ᛗᚠᚣᛝᛂᚳ•ᚻᛏᚠᛚᚫ•ᛖ
ᚦᛋᛚᚩᚢ•ᚫᚩᚪᛗᛟᚢᚹᛇ•ᛒᚾᛋᛚᛝᛂᛟᚾ•ᛗᛚᛒ•
ᛟᛏ•ᚾᛞᛒᚩᚾᚦᛡᚻᛟ•ᚱᛈᚾᚠᛈᛞ•ᛋᚩᛁᛠᚣᚾ•ᛇ
ᚣᚹᚫᚷᛂ•ᛝᛗᚪᚹᛈ•ᚪᚢᚾ•ᛈᛡᛗᛖᛞᛟ•ᛁ•ᛉ
ᛡᛗ•ᚠᛈᚩ•ᚦᛉᛞ•ᚩᛞ•ᛋᛈᛉᛡᚷ•ᛟᚻᚠᚦᛉᛂ
ᛟᛋᚦᚣᚦ•ᛏᚻᛋᚣ•ᚻᛠᚷᛚᚫᚱᛏ•ᚢᛋᛟ•ᚦᚠᚠᚣ
ᛟᛡ•ᛇᚳᚣᛒᛚᛝ•ᛠᚱᚻᛞ•ᛂᚣᛏᚫ•ᚻᛞᚳᛋ•ᛉ
ᚠᛞ•ᚦᛗ•ᚳᛇᛝ•ᚫᚾᛡᛠᚹᛁᛡ•ᛒᛗᛝ•ᚷᛈᛁᚳ•ᛠ
ᛚᚷᛉᚣᚣᚱᛂ•ᛉᛁᛂᚢ•ᛖᚣ•ᚪᛝᛈ•ᛡᚫᚳ•ᛖᛠ
ᚹᛒᚦᛟᚠᛗ•ᚫᚱᚠᚩᛏ•ᛝᛉᛞ•ᛗᛖᛡ•ᚩᛈᛋ•ᛇᛞ•
ᛇᛟᚫᚾ•ᚷᛗᚣᛁᚫᛁᛂ•ᛈᛂᚩᛡᚷ•ᛈᚳᛂ•ᛚᛖᛡᚻᛚ
ᚷᚱᛇ•ᛟᚣ•ᛠᚣᛗᚹᚾᚹ•ᚠᛁᛂᚢᛗᚫᚾᚳᛗᛠᛁ•
ᚩᛇ•ᛒᛚᛞ•ᚾᚹᚠᚾᛒᚱ•ᛋᛟᚦᛡ•ᚪᛡᛏᚷᚷᚹ•ᚪᛋᛡᚦ
ᛋᚦᛋᚠᛗᚷᛞᛠ•ᛝᛈᚩᚪᚣᛝᛈᛋ•ᛟᚾᛇᚪᛖ•ᚻᚢ
ᚷ•ᚩ•ᚢᚦᛏ•ᛒᚷᚣᛝᚠᚣᛁᚻ•ᚹᛡᛠᚱᚫᚹᛡᛞᚪᚦ
ᚳ•ᛉᚢ•ᛈᛏᛋᚢᛖ•ᚷᚦᛡᛚ•ᛖᛋᛠᛝᛉᛈᛉ•ᚾ
ᛟ•ᛞᛟᛒ•ᚾᚹᚢᛁᛇᛚᛞ•ᛁ•ᚦᚣᚷ•ᛟᛈᛡ•ᛖᚪ•ᚠᛋᛉ
ᛞ•ᛖᚷᚦᛠ•ᚾᛋ•ᛞᛟᛗᛖ•ᛗᚾᛉ•ᚹᛒᛠᛈᛟ•ᛗ
ᛉᚫ•ᛂᚩᛞᚻᛡᚷᚠ•ᚣᛗ•ᛁᚷᛉᚻᚹ•ᚾ•ᛋᛗᚷᛠ•
ᚣᛚᚱᛂᛗᛉᚣ•ᛇᚱᚢᛟ•ᚣᚦᚢᛟᚩ•ᚱᚢᚹ•ᛁᛒᚳ•
ᛠᛏᛞ•ᛚᛖᛋᛂ•ᚳᛟ•ᚷᛞᛡ•ᚢᚹᛝᚻᚫᚢᛈ•ᛏᛈ
ᚩᚣ•ᚾᛇᚦᛟᛏᛇᚳᚠ•ᛒᚪᚾ•ᛗᚦᛝ•ᛟᛠᚢᛁᚪ•ᚾᚻᛝ
ᛉᚩ•ᛇᛁᛡᚠᛟᛒᚦᚠ•ᛋᛒ•ᚠᛞᛇ•ᚩᚦᛏ•7•ᚷ•ᛚᛂᛖᚫ
•ᚣᛁᚫᚹᚻ•ᚫᛏ•ᛁᛉ•ᛉᚻᛞᚩᛠ•ᚫᛋᛝᛚᛝ•ᛖᚩ
ᚻᛗᚩᛟᛒᚦ•ᚱᛚᛋ•ᚳᚻ•ᚪᛡᚾᛇᚱᛉᚦ•ᚣᛉᚻ•ᛡᚾ
ᚢ•ᛗᛉᚹ•ᛖᛈᛖ•ᚩᚳᛈᚳᛞᚪᛉᚢᛗᛝᛟ•ᛋᚾᛟ
ᛉ•ᚠᚱᚳᛒᚢᛂᚱᚫᛝ•ᛒᛋᛟᛠᛡᚪᛚ•ᛏᛟᚾᚫᛟᚪ•ᛁ•
ᛡᛋᚳᛖ•ᚹᛒ•ᚾᛚᛝ•ᚦᚾᛁᛠ•ᛒᛡᚱᚠᛖᛁᚹ•ᚾᚠᛗᚢ
ᚷᚾ•ᛂᛚᚳᚱ•ᛝᚣᛉᛋᚪᛟᚱᛉᚳ•ᛒᚫ•ᚠᚢᚪᛖᚪᚹ•
ᛚᚾ•ᛂᛉ•ᚻᚦᛉ•ᛗᛚᚾᛖ•ᛏᛝᚦᚪᚩᚢᛗᚣ•ᚠᛝᚪ•
ᚻᛡᛇᛡ•ᛚᛏᛁ•ᛇᛁ•ᚳᚢᚢᛖ•ᚳᛒ•ᚫᛇᚠᚦᚳᛚᚩᛉᛚ
ᚩᛚ•ᚠᚳᛠ•ᚪᚠᛟᚫᚠ•ᚾᚳ•ᚢᛒᚱ•ᚾᛇᚩᛉ•ᛁᚳᛟ•ᛞ
ᛉᛠᛝᚠᚱᛡᚳᛇ•ᛉᛟᛈᛗᛞᚳᚦᚹᛈ•ᛡᚻ•ᚾᚦ
ᛇᛏᚹᛖᚢ•ᚫᛇᚦ•ᛝᛟᛏᚳᚷᛒᛠ•ᚪᚳᛒᚪᚩᚹᚫ•ᛉ
ᚢ•ᚫᛖᛒ•ᛇᛏᚢᚩ•ᛟᛞᚠᚢᛋ•ᛡᛂᛗᚦᛠᛏᚪ•ᛒ
ᚹᚣ•ᛏᛂᚻᚦᚫ•ᛚᚪᚱᚫᛟᚦᚩᚾᛟᛁᛖ•ᛡᚠᚷ•ᛋᚠᚦᛏ•
ᛠᛡᛠᛁᚢᛡᛇᛝᛞ•ᛉᛏᚠᛒᚻᚢᛋᚳᚱᛇᚹ•ᛇᛈ
ᛋᚢᛚᚪᛈᚢᚳᛖᚠᛞᛉ•ᚦᛠᛇᛝᚻ•ᚣᚱᛗ•ᛟᚾᛚ•
•ᛈᚹᛞᚱᛂ•ᚪᛝᛞ•ᛁᚦᛏᚷᚢᚹᚳᚻᛖᚩᚪᛖ•ᛉᚪᚢ•
ᚳᛁ•ᚱᚳᚹ•ᛠᛇᛏ•ᚦᚳᚻᚢ•ᛡᚹᛟ•ᚷᛇᛈ•ᚢᛈᚦ•
ᚷᚣᚢᚪᛗ•ᚹᚳᛖᛝᚱᛠᛞᛏᚻ•ᛂᛁᛈᚻᚠᛉᛝᛈ
ᚾ•ᛒᚳᚪᚷᛋᛟ•ᛉᛠᛈᚪᚩᚷᚠᚳᛡᛂ•ᛠᚢᚠᛋᛚ•
ᚣᛚ•ᚢᛒ•ᛉ•ᚱᚣᚾ•ᛁᛠ•ᛚᚹᛋ•ᚠᚦᚪᛠ•ᛈᚷ•ᛏ
ᚷᛡᛟᛠᛡᛒ•ᛉᛂᛒ•ᛖᚾ•ᛞᚠᛠᛗ•ᚦᚪᛗᚠᚪ•
ᚻᛡ•ᛗᛁᛏᛟ•ᚻᚣᚹᛏ•ᚠᛒᛁ•ᚫᛖ•ᛝᛒ•ᛚᛏᛠᛉ•ᛟ
ᛋᚾᛉ•ᚹᛏᛠᛏ•ᛖᚢᛡᛖ•ᛉᚾᛇ•ᛟᚳᚾᚠᚩᚾᚠ•ᚳ
ᚪ•ᚷᚱᚩ•ᛠᚦᚹᚣ•ᛒᛁ•ᛝᛇᛟ•ᚣ•ᚷᛗᚩ•ᛁᚷᛂ•ᚩᛇ•ᚢ
ᛁᛉᛝᚪᚱᛉ•ᛏᛂᛞᛈ•ᚾᛝᚷᛏᚢ•ᛚᚷᚳᛏ•ᚢᛒᛇ•
ᛈᚩᚣᚢᛏ•ᛡᚫᛏᚹᛏᛇ•ᛡᚫᚫ•ᚦᛏᛝ•ᛠᚳᛁᛉ
ᚻᚦᚣ•ᚻᛚᚾᛋᚱᛡᚫᛚᚫ•ᛖᚷᚻ•ᛞᚾᚻᛠ•ᚠᚪᚹᛖᚠ
ᛂ•ᛒᛇᚱᚹᛏᛉᚾᛠᛖᛁ•ᚠᚾᛡᚳ•ᛋᛟᚹ•ᛈᚷᛝᛟ•
ᚷᚦᚠᛂᚷᚳ•ᛒᛁᛗᛚᛇᛠᚹ•ᚾᚫᚹᚷ•ᚩᚻᚪᛏᚾᛂ•ᚣ
ᛝᛏᛡᛝ•ᚢ•ᚩᚠᚣ•ᛗᚢᛒ•ᛏᚠᛈ•ᚱᚩ•ᛉᚩᛝᛒ•ᛖ
ᛏᚩᛉ•ᚣᛗᚠᛉ•ᛖᚩᚫᚷᚣᛚ•ᚩᛇ•ᚠᛋᚫᛇᛗ•ᛡᛟᚹ
ᚾᚩᚢᚹᛖᛁ•ᚾᚦᚫᛠᚪ•ᛠᛚ•ᚹ•ᛡᚩ•ᚢᚦᛗ•ᛝᛚᚪᚠ
ᛝ•ᛚᚠᛚᚳᛒᚢᛝᛉ•ᚣᛡᚪᚷ•ᚹᛟᚪᚻᚹᚢ•ᛖᛠᚷ•
ᛁᚪᛏᛂᛗ•ᛏᛖᛁ•ᚣᛡ•ᚦᚾᚠᚦ•ᚩᛈᚻᚪ•ᚻᛋᛠ•ᛡᛉ
ᚪᚫ•ᚠᚣᛞᛠᛇᚠᚫ•ᛏᛗ•ᚳᛡᚷ•ᚱᚢᛞ•ᛂ•ᛋᛡᛇᚩ
•ᛚᛟ•ᚦᚱᚫᛒᛚᚦ•ᛖᚪᚦᛗᛚ•ᚦᛉᚪᚱ•ᛟᛖᛒᛂᚱᛂᛖᛁ
ᛈ•ᚪᛖᛠᚠᛂᚢ•ᛞᚹᚦᚣ•ᛉᚷᚩᚳᛡ•ᛇᛗᛞᚳᛏ•
ᚻᛚᚦᛝᛖᛗᚱ•ᛒᚷᛞᛉᛗᛒᛉᚳᛝᚦᚣᛞᚫᛠ•ᛋ
ᛏᛗᛏᚻᚹ•ᛇᚳᚪᛞ•ᛠᚢᛒᛉ•ᛡᛁᛡᛚ•ᚷᛋᚦᛞ•ᚠ
ᚢᚩᛠ•ᛚᛋᚣᛏ•ᛋᚪᛞᚫᚹᛂᛞ•ᛋᛈᛋᛂ•ᚪᛖᛁᛇᛒᛟ
•ᛏᛂ•ᚠᚩᛚᛞ•ᚾᚷᚳ•ᛚᚷᛗ•ᛠᚦᚢ•ᛟᚻᚾᛟᚣᛡ•
ᛇᚻᚣᚪᛈ•ᚾᛋ•ᛞᚫᛠᚳᛉᛂ•ᚦᚹᛋᚱᚦᚫᚾ•ᛡᛚᚣ
ᚫᛋᛖ•ᛟᚣᛝᛡ•ᚦᚣᚷᛇᚱ•ᛋᛠᛏ•ᛡᚳᛉ•ᛠᚷ•
ᚳᛒᛋ•ᚹᚾᚻᛖᛝᛋ•ᚩᛡᛗᛉᛝ•ᛉᚦ•ᛠᛞᚳᛒᚷ
ᛉᚹᛝᚢ•ᛉᛞᛈ•ᛉᛡᛈᛟ•ᚾᛡᚠᛡᚢᛋ•ᛉᚪᛖ
ᚻᚱᚣᛠᛇ•ᛒᛟ•ᚪᛝᛡ•ᚳᚱᚳᛈᚩᛏ•ᚻᚣᚫᛁᛋᚩᚦᛚ
•ᛟᛚ•ᛋᚪᚢᚪᛈᚻ•
                    (insect)

|| page 15
        •ᚠᚢᛚᛗ•ᚪᛠᚣᛟᚪ•

        
3258    3222    3152    3038
3278    3299    3298    2838
3288    3294    3296    2472
4516    1206     708     1820
ᛚᚢᛝᚾ•ᚳᚢ•ᛒᚾᛏᚠᛝ•ᛁᚢᛁᚢ•ᛟᚫᛂᚠᚫ•ᚢ
ᚷᛉᛇᛈᛉ•ᚣᛠᛚᚪᛉ•ᛟᛉᛡᚦᚻᛠ•ᚾ
ᚪᚳ•ᚢᚷᚾ•ᛈᛖᚾᚦᚩᚢᛁᛡᚱ•ᛏᛁᛒᛇᚳᚠᚷ•ᚩ
ᚦᚪ•ᛁᛈᚻᛡᛒ•ᚹᛈᚻᚱᛞᛉᛏᚢ•ᚣᛒ•ᚠᛋᛉᚢ•ᛗᛁ•
ᛡᚱ•ᛝᚢᚠᚦᛝ•ᛈᛟᛒ•ᚻᚷᚻᛡᛚ•ᚩᛞᚪᚳ•ᚦᛈᛞᛋ
ᛡᚻᛇᛚ•ᚢᛏᛋᛞ•ᚦᚢᛞᛝ•ᛚᛉᛝ•ᛏᚩᛚ•ᚪᛚ•ᚣ•ᛟ
ᛡᛉᚣ•ᛒᚻᚫᛂᛡᛁ•ᚱᚦᛚᚠ•ᛠᚾᛝ•ᛉᛗᛒᚩᛠᛈ•
ᛖᛞᚪᚫᛏᚩᛠᛖᛠᛉᚳᛠᛏ•ᚩᛞᚳᛠᚾᚳᚦ
ᛗ•ᛞ•ᚷᛁᚳᚹᛟ•ᚪᚢᛒᚳᚫ•ᚦᚱ•ᛋᚣᚪ•ᛏᚦᛒ•ᛝᚹᛋᚱᛁ
ᛝ•ᛒᛁᚪᚫᛚ•ᛏᚱᛡᚫᚠᛞ•ᛝᛂᚩ•ᛡᛠᛉ•ᚪᛡᚻ•ᚱᛒ
ᛁ•ᛞᛡᛂᚪᛈᚱᛋ•ᚢᛡ•ᚻᚷ•ᛚᛟᚠ•ᚻᚷᚫᛋ•ᛈᚹᚷᚷ
•ᛗᛟᚪᚾᚱ•ᚩᛟᛞ•ᚷᛟᚠᛠ•ᛡᚷᚳ•ᛉᛠᚠᛚ•ᛒᚫ
ᛈ•ᚩᛂᛈ•ᛂᛗᛠ•ᚾ•ᛉᚪ•ᛡᛖᛋᚷᚫᚦ•ᛂᚷᛉᚩᚦ
ᛂᚳᚣ•ᚢᛂᚦᛂᚪᚾᛏᛒ•ᚳᛈᛡᛂᛋᚫ•ᛋᛗ•ᚻᛞᛠ
ᛉᚢᛗ•ᛏᛠᛖᚣᚠ•ᛂᛏᛋᛗᛞᛟᛁᛝᚪᛉᛖᛈ•ᛚ
ᛇᛞᚦ•ᚪᛋᛉ•ᚳᛒᚢᛟᚳᛒᛚᚾᛟᛝᛉᚩ•ᛖᚳ•ᛝᛟ
ᚳᛁᛒᛈᚫ•ᚣᛖᛂᛝ•ᛞᚢᚱ•ᛉᛟᚩ•ᚠᚹᚩ•ᚣᛁᚠᚢᛇ•ᛚ
ᛏᛈᛒᛗ•ᛇᛝ•ᚢᚳᚱᛡ•ᛖᚩᛁᚣᛂᛏᛡ•ᛖᚠᛇᚠᛚ•ᛁ
•ᚣᚷᚠᛝᛡᛈᚷᛒ•ᛡᚩᚷᛡ•ᛟᚾᚹᛡᛈᛟ•ᚦᛈ•ᛟᚷ
ᛚᚦ•ᛈᛞ•ᚦᛇᛒ•ᛡᚪᛒᚪ•ᚾᛗ•ᚳᚾᛖᛡᚹᛝᛏᚱ•ᛝᚫ
ᛚᛟᛁᛇᚣ•ᛝᛡᚾᛏ•ᚱᛁ•ᛋᚪᛖ•ᛇᚢ•ᛝᛞᛂ•ᚠᚱᛠᛗ
ᛠᚪ•ᚫᛈ•ᛏᚠ•ᛖᛏᚷᚾᚠᛁᚠ•ᚱᚻᚱᛇᛒ•ᚻᛈᛏ•ᛇᚱ
ᛝᛡᛒᚹᛚᛏ•ᛗᛉᚦ•ᚾᛂᚳᚫ•ᚷᛈ•ᛋᛖᚩ•ᚢᛝᚩ•ᛏ
ᛈᛁᚣᚾᚪ•ᛏᚹ•ᚠᛗᚾᛟᚾᚳᛒ•ᛂᛉᛡ•ᛟᚪᛁᚫᛝ•ᛒ•
ᛉᛏᛂᛁᛋ•ᛠ•ᚳᛖᚱᚦᚣᚩᚣ•ᛈᚫᚷ•ᛡᛂᛁᚩ•ᚱᚦ
ᛠ•ᛇᚦᚩᛉ•ᚾᚱᚾᚫᛁᛉ•ᛁ•ᛝᚣᚫᛡᚫᛗ•ᚹᛖ•ᛇᚷᚻ
ᛖᛗ•ᚷᚢᛞᚹ•ᛂᚻ•ᛉᚱᚢᛂᚢᚾᛈ•ᛋᚣᛂᚫ•ᛈᚳ
ᚣᚳᛒᛡ•ᚫᛟᚪᚠ•ᛏ•ᚷᚩᛇᛟ•ᛁᚱᛗ•ᛖᛉᛟ•ᛗᛇᚫᛟ
ᚦ•ᚱ•ᛞᛁᚢᚦᚻᛗᛡᚾ•ᛁᚦᚻᛚ•ᛏᚳ•ᚪᚦ•ᚠᚪᚫᚣᚻ
ᛠ•ᚦᚠᛋᚠᛝᚷᚱᛈ•ᛏᛂᛉᛟ•ᚷᛚᚻ•ᚩᚪᚦᛏᚳᛁ•ᚠ
ᚣᚢᛁᚹ•ᛟᚪᚣᛁᛠᛂᚪ•ᛟᛝᚦ•ᛟᚠᚦᚾ•ᛇᚷ•ᛠᛚᛒᚠ
•ᛠᚪᛂᛇᛠᛚ•ᚱᚷᛋ•ᚹᚩᛒᛁ•ᛠᚳ•ᛁᛞᛂ•ᛖᛗᚱ•ᚷ
ᚪᚻᛠᛚᚷᚩ•ᛉᚻ•ᛡᛝ•ᛞᚱᚹᚩᛈᛡ•ᚣᚳᚦ•ᛁᛇᚢᛁ•
ᛟᚦᚠᚳᚻ•ᚩᛁ•ᛝᚾᛁᛞ•ᛏ•ᚫᚱᛝᚫᛈ•ᛠᛞᛇᛉᚳ
ᛠᚩᛟᛖ•ᛗᛈᛒᚦᛝᛋᚢᛡ•ᚻᛡᛏ•ᛉᛇᚷᚠᛡᛡ
ᛟᚢ•ᛡᚦᚣᛞᚪᚫᛝᛒ•ᚳᚩᚷ•ᛏᛞᚦᛁ•ᚠᛒᛖ•ᚦᛟᚳ•
ᚠᚻ•ᛞᚠᚣᛋᚾᛟ•ᛠᛇᛂ•ᛖᛉ•ᚩᛈᛠᛚᚪ•ᛟᚩᚾ•
ᛂᛉᛋ•ᚣᚫᚷᛖᚩᛟᚢᚱᚹᚢ•ᛟᛡᛂᛇᚢᛞᛉ•ᛒᛇ
ᚳ•ᛝᛚᛗᛠᛗ•ᚪᚱᛡᛗᛒᚩᚹ•ᛋᛖᚾᚻᚣ•ᛈ•ᛞᛚᛞ
•ᛈᛏ•ᚪᛞᛚᛉ•ᛟᚱᚾᚹ•ᛠᚠᛁ•ᛟᚾᛒ•ᛇᛟᛖᛝᚳᚠ
ᛏᛞᛏ•ᛇᚫ•ᛝᚢ•ᛠᛡᚫᛖᛟᛞᛝᛠ•ᚠᛗᛒᛚ•ᛏ
ᚢ•ᛈᚱᚹᛟᛇᛉ•ᚳᛟᛈᛏ•ᚢᚠᚳᛞ•ᛂᛋᛞᛈᛚ•ᚠᛝ
ᚱᛂᚣ•ᛞᛗᛖᚣ•ᚢᛖᛝᛠᚳᛞᛈᚩᛠ•ᛏᛒᚳ•ᚷ
ᚾᚩᛟᚾᚠ•ᚩᛁᚠᚢᛋᚾ•ᛞᚹᛠᛇᛈ•ᚱᚩᚩᛂ•ᚪᛟ•ᛇᛠ
ᛂᛁ•ᛟᛂᛞᚢᚳᛝᚩ•ᚱᛝᛋ•ᛂᛁᛈᛉᛖ•ᛞᛁᚾᛗᛗᚳ
•ᛉᚩᛁᛂᛞᚳ•ᚢᚪᛇ•ᚦᛡᛇᚻᛠᚣ•ᛠᚻ•ᚠᚩ•ᛡ
ᛠᛋᛟᚪ•ᚹ•ᚫᚻᚩᛂᚢᚱᚩᚣ•ᛏᚫᚷ•ᛂᛚᛂ•ᛝᛏ
ᛖᛒᛚᛉᚻ•ᚱᚩᚫᛇᛈᛂᛠ•ᚳᛈᛚᚣᛈ•ᚪᛠᚻᚻᛋ
ᚫ•ᚩᛝᚹ•ᛋᛞᚠᚳᛠ•ᚩᛇᚫᚪᚩᚹᛗᚪ•ᚣᚫᚷᚫᛂᚱᚹ
ᛞ•ᚱ•ᚦᚷᚳᚹ•ᚾᚷᛡ•ᛚᛒᚳ•ᛂᚷᚹᚹ•ᚱᛁᚠᛏ•ᚠᛚ•ᛋᛂ
ᛚᚪᛂᚱᛏ•ᛞᚷᚫᛠᚠᛉᛞ•ᚫᚷᚻᛏ•ᛗᚣᛈ•ᛏᛒᛟ
ᛝ•ᛂᛋᚾ•ᛝᛁᚹ•ᚦ•ᛠᛝᛞᚾᛟᚷᚫ•ᛁᛗ•ᛝᛉᚱᛞᛋ
ᛗ•ᚠᚫᚹ•ᛟᛋ•ᚦᛞᛞᛈᛝ•ᛞᛡᚷᛒ•ᚪᛟ•ᚦᛡᛒ•ᚪᚹ•
ᚾᛉᚫ•ᛚᛈᛁ•ᛒ•ᚠᚾᚠ•ᛡᚩᛏᛞᚾᛋᛖᚳᚻ•ᛖᚻ•ᚢᛟ•
ᚪᛖᛗᛝ•ᛠᚫ•ᛈᚩᚪᛞ•ᚠᚫᚻ•ᚠᛏᚦᛂᛚᛂᛒ•ᛗᛇ
ᛈ•ᛂᚢᛒ•ᚷᛁᛇ•ᛈᛉᚣ•ᛈᛟᚦᛞᚱᛠᚪᛡ•ᛝᛡᛒᛚ
ᚻᚦᚫᛉ•ᛟᚫ•ᚪᛇ•ᛉᚳ•ᛠᚠᚫ•ᚢᚣᚦᛋ•ᚠᛝᚠᚱᚹ•
ᛟᛒᛗᚷᛞᚾᛡ•ᛞᚪ•ᚻᚣᛇ•ᚱᛚ•ᛖᚣᛇᚻᛠᚩ•ᚢ
ᚳᚱᚻ•ᛡᛟᛗᛠᛝᛂᚦ•ᛂᚢᛁᛇ•ᛂᛁ•ᛖᚷᛁ•ᚪᛇᛏ•ᛝ
ᛡᚳᛚ•ᛇᚠᛗᚪ•ᚷᛚᛒᛋ•ᛉᛞᚫᛟᛋᛚ•ᚹᛏᛠᛗ•ᛚᚦ
ᛗ•ᛝᚦ•ᚣᛈᚠ•ᚪᛞᛚᚪᛖᛚᚩ•ᚱᚷ•ᛚᚳᛇᛏᚷᚣᛟᛗ•
•ᚪᛁ•ᚷᛂᛒᛡᛗ•ᛞᛈᚪᚳᛠᚷᛋ•ᛏᛈ•ᚩᛋᛏᛗᚱᚣ
ᛋᛉ•ᛁᛂᛚᛝᛚᛁ•ᛉᚢᛠᛗᛇᚢᛋᚻ•ᚳᛉᛂᚩ•ᚠᛂᚠ•
ᛁᚣᛁᛟ•ᛏᚷᚱᚦ•ᛡᛒᛋᚳ•ᛇᚢᚷ•ᛚᚱ•ᛁᛗᚱ•ᛗᛝᚻᛈ
ᚫ•ᛝᛋᚫ•ᛖᛈᛁ•ᛒᛇᚹᚫᚢᛂᚳᛒ•ᚦᛋᚹᚦᚫ•ᛡᛟᚷᛚ•
ᛞᛚᚢᛟᛡ•ᚱᛞᚱᛒᛂᚳᚢᛠ•ᚩᛉᛉ•ᛝᛡᛂ•ᛁᚫᛟ
•ᛖᛗᚹ•ᛖᛉᚦᛗᚪᛋᛉ•ᛞᚦ•ᛡᚢ•ᛉᛗᚫᛋᚳᛖ•
ᚳᚫᛠ•ᛞᚳᚷ•ᚩᛁᛇ•ᚾᛟᚷᚣᚳᚦᚳᚦ•ᛗᚣ•ᛈᚪᛒ
ᛈ•ᚻᚢᚻᚾᛏᚫᛒᛇᚩᛁᛈ•ᚫᚩ'ᚣ•ᛡᚣᛗᚷ•ᚠᚱᛡᛚ
ᛏ•ᛖᛟᚩᛈᛚᚩᚷᛁᛟᛠ•ᛞᛖᚳᛗᛁᚣ•ᛈᛚ•ᛁᚹᛋᛂᚹ•
ᛟᛡᚪ•ᚦᛖᚩᛂᚷᛋᛝᚣᛗᛟᚻ•ᛗᚠᚦᛉᚦᚫᛋᛈᚣᚩ
ᚠ•ᛈᛟᛋᛖᚫᛇᛗᛚᛈᚾ•ᛡᚠᚳᚾᚩᛂᛋᛡ•ᚫᛂᚦᚪᛠ
•ᛈᚻᛋᛟ•ᛗᚹ•ᚱᚣᛁᚢ•ᛉᚹᛋᚱ•ᛞᛈᚦᛈᚩ•ᛞᛂᚩ•
ᚢᛈᛖᚪᚫᛉᚫ•ᛏᚱᛟᛏᛒ•ᛠ•ᚫᚳᚾ•ᛖᛝᚦᛂᛂᚠ
ᛚᚾᚩᛒ•ᛉᚷ•ᚪᚩᛚ•ᚪᚢ•ᛞᚻᚳᚹᛚᛡᛞᛇ•ᛟᚩᛡᛚᚳ
•ᛡᚳᛉ•ᛝᛠᛝᚷᛝᛞᛂᛏ•ᛠᛈ•ᚹᛈᛗ•ᛈᚱ•ᚫ
ᛏᛖᚢᛝᚫᛡ•ᚾᛁᛠᚻᚦᚣᛠ•ᚫ•ᚩᛉᛋᚩ•ᛂᚠᛏᚷ•
ᚹᛁᚪᛁᚩᛁ•ᛝᛠ•ᚾ•ᚷᛗᚹᚦᛖ•ᚷᛟᚪᚹᛞᚻᚢ•ᛡᚹ•
ᚣᚷᛉᛒᚪᚾᛝᛡᛂᛡ•ᚠᚷᛈᚦᚠᚦ•ᛁᛈᚪᛝᛋᛞᛟᚩ
ᛝᛗ•ᛁᚷ•ᛂᚷ•ᚳᚩᚦᛖᚦᛂ•ᚣᚠ•ᚦᚳᛂᛡᛖᚢ•ᛉᛂ
ᚳᚻᛂᚱᛂ•ᚪᚻᚾᚦ•ᛚᚷ•ᚱᚦ•ᛒᚪᚩᛖᚢᛡᛂᚹᛏᚱᚹ
ᛟ•ᚦᚳᛗᚦᚠᚫᚻ•ᛡᚠᛠᚣᚪᚦᛚᛏᛒᚢᛝ•ᛖᛋᛗᚱ•
ᚪᚹᛒ•ᚹᛒᛗᚱᚾᛗᚻᛗᛁᚾᚪᛞ•"ᛡᛖᚩ•ᚾᚹᛡ•ᚢᛂ
ᚦᛠ•ᛚᚳᚷᛚᛇ•ᛟᛠᛠᚪ"•ᛇᛉᚣᚪ•ᚷᛏᚩ•ᛖ
ᚹᛒᛈᚷᛝᛒ•ᛡᚦᚠᛋᚾ•ᛒᚦᚠ•ᛇᛝᛠ•ᚠᚾᛉ•
(Cross/body)

||Page 23(Confirmed)
(5 dots)
ᚢᚪ•ᚹᛝᚷᛉᛞᚷ•ᛁᛒᛁ•ᛇᛏᛒᛁᚣ•ᛠᚷᛋᚫ
ᛈᚹᛗᛠ•ᛇᛂᛇ•ᚹᚻᛁ•ᚷᛠᛒᚢᚣᚻᚣ•
ᛝᚹᚢᚱᛋ•ᚩᛡᚠᛡᛠ•ᛞᛟᚦᛗᚳᚾᛉ•
ᛞᚦᛖᚱᛇᚳ•ᚪᛂᛋᛟ•ᚢᚹᚱᛏ•ᛋᛖᛋᛏ•ᚣᚱᛠᚫᚾ
ᛞ•ᛈᛒᛡᛋᚢᛞᛖᚣᚦ•ᛚᚹᛟᛋ•ᚷᛚᛂ•ᚫᛖᚩᚳᚦᚹ
ᛗ•ᚢᚩᚷ•ᚠᚪᚩᛡᛝᛒᛠᚦᚳᚪ•ᚱᛡᛏ•ᛟᚹᚠᚣᛝᚢ
ᚣᛁ•ᛚᛏᚫᚫ•ᚪ•ᚱᛈᚠᛗᚹᚩᛞ•ᛠᛒᛈ•ᛝᛟ•ᚾᚷᛗ•
ᛡᛖᚩ•ᚾᛚᛉᛝ•ᛁᛡᚫᛗ•ᚻᛖᚹᛗ•ᛝᛈᛇᛗᛡᛂ•ᚫ
ᚩᛡ•ᚠᚣᛉᛟᚫᚦ•ᚫᛒᚩ•ᚪᚦᛂᚱᛂᚾᚦ•ᛡᚠᚪᛏᚾᚻ•ᚷ
ᚢ•ᛞ•ᚳᚦᚢᚱᚢᛟ•ᛞᚻᚱ•ᚷᚹᛏᛈᛖᚠ•ᚪᚻᛠᚦ
ᛞᚱᚠ•ᛖᛂᚫ•ᚾᚳᚻᚹ•ᛇᛡᛈᛠᚹ•ᛗᛚ•ᚹᛟᚹᛠ•ᚪ
ᚾᚪ•ᚳᚪ•ᚷᛚᚦᛒᚩᚹᚢ•ᚷᛚᚠᛋᚻ•ᚾᛉᛝᛗ•ᛖᚦᚢᛝ
ᛡ•ᛈᚣᚢ•ᛉᚷᚷ•ᚹᛞᛁᛋ•ᚦᛡᛡᛈᚳᚪᚩ•ᚢᛗᚢ
ᛉᚩᚣᚻᛏ•ᚩᚫᛗᚢ•ᚩᚾᛏᛠᛒᛟᛒᚠᛁᛈ•ᛚᛋᛝᚫᚳ
•ᚫᛟᛏ•ᚢᚩᛉᚾᛡᛋᚠᛖ•ᛉᚱ•ᛗᚩᚩᚫ•ᚠᚢᚦᛖᛞᚾ
ᚣ•ᛡᛋ•ᛋᚱᛚᛟ•ᚢᚻ•ᚢᚾᛈ•ᛁᚻ•ᛖᛉ•ᚦᛞᛗ•ᛈᛟ
ᚠ•ᛈᚠᛝᚫᛝᛋ•ᛟᛂᚹ•ᛠᛒᚣ•ᛟᚹᛞ•ᚠᚣᛂᛁᛏᛉ
ᛚ•ᚩᚦᛝ•ᚠᚪᛋᛡᛁᚻᛒᚱ•ᚪᚢᚣ•ᚫᚢ•ᛟᛠᚪᚣ•ᛖᛟ
ᚫ•ᛖᛈᚠᛒ•ᛈᛂᛁ•ᛋᛝᛒ•ᚱᚦᚳᛇ•ᛚᛁᚢᛈᛏᚳᛒᛉ•
ᛖᚪᚣᚠᛗᚳᚣᚱ•ᚻᚹᛏᚾᛡᛉᚫᚦᛟ•ᚳᚹ•ᛠᚠ•ᛏ
ᛠ•ᛝᚩᚻ•ᛡᛠᛒᛋᚻᛟ•ᚫᛁ•ᛠᛏᛁᛋ•ᛏᚫᚻᚱ•ᚻᛂ
ᛋᛡᚹᚾᚾᛡᚹᛚ•ᚢᛖ•ᛏ•ᚱᛝᚳᚣ•ᚪᛉᛇᛝᛋᛖᛇᛁ
ᚻᚾ•ᚷ•ᚹᛉᚳᛉᚣ•ᛋᛈᚳᛟᚱ•ᛒᚣᛂᛝᛖᛁ•ᚾᚷᚪ•
ᚣᚷ•ᛚᛒ•ᚢᛂᚩ•ᛝᛉᛉᚪᛖ•ᛒᚦᛉᛡᚱ•ᛏᚷᚹᛂᛋ
ᛁᚠ•ᛠᛁᛡᚦᛝᚾᛖᚾᚠᚩᛗᛖᚣᚪ•ᚳᛖᚳᚹᚪᚫᚹ•ᛇ
ᚢᚦᚻᛉᚢᚾ•ᛠᛚᚢᚾᚦᛈᛋᚢᛈᚱ•ᛞᚫᛟᚱᛡᚫᚪ
ᚢ•ᚢᛗᛚᚦᛠ•ᛚᛝᛈᚣ•ᚩᛋᛟᚪᚱᛗᚦᛟᛈ•ᛚᛋ•ᛏᛁ
ᚠᛋᛖᚹᛝ•ᛗᛞᚩ•ᛠᚫᛡᛒᛏᚩᛋ•ᛖᛏᚪᚠ•ᚫᛒ•ᛚᚾ•
ᛋᚪᛉᛟ•ᚾᛚᚹᛖ•ᚩᛚᛁᛂᛏ•ᛒᚪᚠᛉᛏ•ᚩᛟᛂ•ᚾᚷᛋ•
ᚷᛚᚷᛠ•ᛒᚷᛖᚩᚪᚩᛖᛞ•ᚷᛇᛗ•ᚳᚱᚷ•ᛈᛞᚩᚠᚹ
ᛇ•ᛠᛞᚣᛝ•ᚾᛁᚠᛈᛚ•ᛖᛟ•ᚢᚳᛗ•ᛚᚫᛏᛉᛂᚱ
ᛉ•ᛁᛠᚷᛚ•ᚷᚳᛋᚩᛝ•ᚫᚦ•ᛗᚻᛟᚠ•ᚱᛋᚳᚦ•ᚣᚩ•ᛒᛁ
ᚫᚻᛖᚢᛏᛚᛚ•ᛇᚷᛟᚣ•ᛒᚾᚦᚻ•ᛠᛖᛂᛒᚾᛁᛚᛠ
ᚱ•ᛂᚠᚳᛋᛝᚳᛈ•ᚷᚻᛋᛗ•ᛇᛞᛇ•ᚣ•ᛡᛖᛏᛠᚢ
ᛡ•ᚩᚾᛠᚩ•ᛂᚣᛇᛉᛠᚪᛡ•ᚾᛞᛝᚻ•ᛈᛠᚻᛡ
ᚢ•ᛝᚻᚦᛈ•ᛉᚢ•ᛠᚣᛈᛟᚦᛋᚣᛈ•ᚠᛏ•ᛒᛁᛟᚪᚷ
ᛚ•ᛠᚻ•ᛝᛁᛡᛚᛝᚾᛞᚪᛈᚷ•ᚾᛏᚦᛋᛒ•ᛋᛋᛠ•ᚷᚳ
•ᛠᛗᚢ•ᛖᛉᛒᚷᚫᚠᚩᛁᛉ•ᚠᚪ•ᛠᚱᛇ•ᚩᛁᛞᛋᛚ
ᚦᛖᛒᛇ•ᛟᚷᚣᚷᚾᚷ•ᚦᚠᚳᛗ•ᚩᛖᛖ•ᚩᚠᛒᚻᛝ•ᚳᛁ
ᛂᚪᚾᚩᚪ•ᛈᚻᚱᛗ•ᚱᛗᛟ•ᚦᚷᛂ•ᛒᚱᚦᚪᛠ•ᛉᛖᛡ
ᛞᚦ•ᚱᛝᛂᛒ•ᚾᛏᚣ•ᛏᛋᛒᚾᚫ•ᚢᛖᛁᚩᛡ•ᛂᛇᚢᚦᛚ
ᚳᛖ•ᛚᛁ•ᛒᚢᚠᚪᚱᛠ•ᛗᛒ•ᛞᛉᛗ•ᚢᛠᛏᚣ•ᚪᛂ
ᛈᚢᛈᛠᚣᚷ•ᛗᛡᛗᚢᚪᛗᛝ•ᚣᛡ•ᚪᛖᛏ•ᛖ
ᛋᚪᛟ•ᚳᚻᛁᛋᚠᛁᚾ•ᛈᛟᛝ•ᛇᚦᚣᛏᚫᛉ•ᛖᛟᛏ•ᛞᛡ
ᛚᛖᛈᛏᚪ•ᛏᚠᚱᚾ•ᚪᛠᚱ•ᛠᚳ•ᚾᚻᚹᛒᛇᛋ•ᛁᚻᚣ
ᛋᚹᚩᛉᚹ•ᚩᛝᚢ•ᚻᛝᛟ•ᛏᛚᚠ•ᛂᚷᛏᛂᛝ•

||Page 27(Confirmed)
ᛗᛈᚣ•ᛚᛋᚩᚪᚫᚻᛚᛖᛇᛁᛗᛚ•ᛚᛋᚳᛈ•ᚾ
ᚻᚷᚢᛡᚻᚢ•ᛒᚠ•ᛞᛂᚢ•ᛒᛖᛁ•ᚫᚠ•ᛈ•
ᚫᛈᚦ•ᚱᛗᛚᚳ•ᛒᚷᚣᛗᛠᛒᚫ•ᚾᚦ•ᛗᚠ
ᛡᛠᚳᛒᚷᚫᚠ•ᛖᛂᚱᚩ•ᛈᛒ•ᚠᛒᚩ•ᛇᚱᛠᚱ•ᛠᚷ
ᛖᛚ•ᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖ•ᛏᚱ•ᚢᚣ•ᛟᛂᛉ•
ᛠᚷᛝ•ᚣᛏᛝᚾ•ᚪᛏᛋ•ᛝᚪᛂ•ᚠᛚᛋᚢ•ᚹᛠᛈᛁᛏ•
ᛁᚾ•ᚱᚱᛝᛗ•ᚣᛗᚠᛁᚫᛁᚪ•ᚢᛟᛒᚹ•ᛗᛁᚻᚣᚹᛞᛚ•ᛟ
ᛏᛞ•ᛟᚳᛒ•ᛡᛒ•ᚪᛏ•ᚹᛏᛈ•ᚹᛠᚩᚱᚩᛖ•ᚣᛚᛋ•
ᚢᛡᚱᚠᛂᛇᚱᛡᚦᛖᚢᛏ•ᛝᚫ•ᚾᚪᛠᚩᚪᚾᚪᚦᚷᚩ•
ᚫᛉᛒᛏᛖᛠᛗᚷᚱᛗ•ᚣᛝᚠᛒ•ᛞᛟᛞᚪ•ᛠᚱᚳᛁ
ᛈᛞᚠᛗᛝᚻ•ᛋᚩ•ᛞᛈᛉᚾ•ᛟᚱᛡᚾᚳᚳᛏ•ᚾᛈᚠ
ᛈᚳ•ᛂᚦᛒᛁᚹ•ᛞᚹᛝᛠᛡᚹᛚ•ᚹᛂᚾᚪᛟ•ᛏᛞᛉᚣ
ᛖᚱᛞ•ᚱᛏᛇᛁᚳᛈ•ᛝ•ᚦᛟᚷᛂᚦ•ᚣᛋ•ᛠᚻ•ᚠᛒᛚ•ᛁ
ᚫᛚᛞᛉᚪ•ᛁᚹᚷ•ᛒᚩᚹᚾᛠ•ᛋᛖᛗᛒᛋ•ᚳᚹᚦᛟᚠᚻᚫ
•ᛞᚢᛁᛒᛞ•ᛇᛝᛈᚠᛁ•ᛟᚢᚣᛏ•ᚻᚱᛖᚾᚳᛈᛡᛈᛞ
ᛂ•ᛁᛏᛗᛋᚫᛉᚩᚣ•ᚪᛂᛗᛡᛖ•ᛇᛂᚠᛗᚱ•ᛞᛟᚪᛒ
ᛞᚻ•ᚾᛈᚪ•ᛇᚱᚻᚾᛝᛠᚠᚾᚠ•ᚩᛗᛋᚾ•ᛠᚪᛁᚢᛚ•
ᚪᚫ•ᛂᛉᛡᚠ•ᛁᛖᛈᛠᚻ•ᚠᛇᚩᚹ•ᛠᛂᛇᛁᛠᚫ•ᛂ
ᛒ•ᛋ•ᚠᛖᚷ•ᛋᛁ•ᛟᛗᛒᛁᛝᛏᚪᚢᛁᚦ•ᚩᛝᛗᚠ•ᚹᛟᛒᛟ
ᛡ•ᚠᚣᛝᚩᛠ•ᚳᛚᛈᚱ•ᛞᛂᚩᛝᛂ•ᚪᛖᛗᛈᚾ•ᚠ
ᛠᚷᛞᛒ•ᚩᛉᚷᚾᚣᚷ•ᛠᛈᛂᛞᚾᛟᚩᚢᚾᚹᛗ•
ᛂ•ᚢᚷᛠ•ᛗ•ᛇᚪ•ᚻᚦᛡ•ᛝᛈᛞᛒ•ᚳᛉᚳ•ᛠ
ᛉ•ᛟᚣ•ᛒᚦᛁᛂᛚᛡᛝᛡ•ᚹᛂᚫ•ᛋᛗᚪᛡᛠᛇᛝᛏ•
ᚦᛞᚷ•ᚢᛏᛚᛏᚣ•ᚢᛝ•ᚷᛟᚪᛏ•ᛂᚦᚣ•ᚫᚻᚪ•ᛒᛝ•
ᚦᚢᚱᚪᚾᛞ•ᛁᛝᚫ•ᛚᚫᚷ•ᚹᛁᛒᚣ•ᚾᚫᚠ•ᛚᛋᛒ•ᛈᛟᚪᛟ
ᛞᚷᛟᚣᛉᚷᛚ•ᛋᛠᛁ•ᚳᛟᛁᚦᛈᚹᛉ•ᛖᚢ•ᛟᛂᛝ
ᛋᚢᛝ•ᚳᛡᛠ•ᛚᛇ•ᛚᚷᚢᛁᛏᛒᛋ•ᛞᛁ•ᚠᚠᚷᚠ•ᚦᛂ
ᚳ•ᚫᛟ•ᛁᛗᛡᛁᛇᚦ•ᚩ•ᚢᛈᛒ•ᚻᛋ•ᛂᚣᛂᛖ•ᛒᛇᛇᚱ•
ᚹᛂᛏᛡ•ᚳᚪᚫ•ᚩᛈᚱ•ᛡᚾᛗᛁᛝ•ᚻᚹᚦ•ᛡᚦᚻᚦ•ᛉ
ᚫᚫᛋᚳᛡᚾᛇ•ᛟᛉᚢ•ᚱᛂᛖ•ᛚᚾᛞ•ᛗ•ᛏᚱᛟᚦ•ᛁᛝ
ᛡᛒ•ᚳᚩᚹᛟ•ᛏᛗᛋᚱᚷ•ᚱᛚᛞᛚ•ᚩᚣ•ᛞᚳᚪᛖᛞᚠ
ᚳ•ᛇᛖᛉᛚᚫ•ᛖᚩᛁᛋ•ᛡᛁᛟᛋᚪᛒᛗ•ᛗᚣᚹᛂ•ᛖᚫᛝ
ᛚ•ᛂᚱᛇ•ᛈᛚᚩᚻ•ᚪᛞ•ᛡᛂ•ᛞᚠᚹᛞᛂᚳ•ᚾᚦᛉ•ᛂ
ᚻ•ᚷᛚ•ᚠᛖᚦ•ᛇᚻ•ᛝᛖᛒᛚᛞᛁᛗᚠ•ᚹᛒᛗᛟᛁᛖᛁᛠ•
ᛈᚻᛝᛖᛞᛟᚩᚻᛂ•ᚹᚩᚾᛂᛈᛗ•ᛖᚳ•ᛖᛇ•ᚷᚻᛗ
ᛞᚪᛈᛖ•ᛗ•ᛉᚫᛒᛇᚱ•ᛖᚣᛟᚣ•ᚱᛠᛈᚢᛠ•ᚣ
ᛖᚪᚻ•ᚩᛉᛠᚢᚻᛡᛟ•ᚷᚫᚩᛒᛉ•ᚫᚱᛞᛋᚩᚱ•ᚷ
ᛠ•ᛉᚻᛁ•ᚷᚳᛞᛠᛡᚳ•ᛂᛠᛉᛇᚻᛋᚹ•ᛝᛡᚷ
ᛖᛡᚣ•ᛠᚩᚷ•ᚱᚦᚠᛟᚩᚦ•ᚦᛁᛏᚱ•ᛇᛉᛇ•ᚢᚷᛠ•
ᛟᛏ•ᚩᚠᛚ•ᛟᛝᛈ•ᚱᛡᚪᚩᛏ•ᚩᛠᚷᚫᛗ•ᛈᛋᚱ•ᛖ
ᚦᚠ•ᛞᚹᚾᛚ•ᛝᚩᛇᛂ•ᚳᛚᚢᚹᛏ•ᚩᛖᛏᚠᚪᛚ•ᛟᛇᛟ•
ᛠᚱᛇ•ᚢᚪᚦᛈᛟᛡᛉ•ᛡᛒᚱᛒᚠᚢᛚᚢᛟ•ᛒᛇᛒ•
ᛉᚦᚹ•ᛝᚣᛖ•ᚳᚫᚣᛟ•ᚹᛁᛝᚫᛏ•ᚫᛇᛈᛡᛟᚠ•ᛚ•ᛝ
ᚠᛡ•ᛞᚪᛚᛈ•ᛋᛁ•ᚢᚣᚪᛚᛠᛝᚹ•ᚪᛏᛈᚳᚣ•ᛝᚫ
ᚻᛗᛞᚷᛚ•ᛠᛉᛒ•ᛇᛡᛋᛖ•ᚣᛁᛚ•ᚣᛠᚣ•ᚻ•
ᚣᛉᚾᛏᚫᛉᛋᚦᚪᚹᛗ•ᚪᚱ•ᚪᚩᚻ•ᛗᛖᚫᛞᛠᛁᛗ
•ᛒᛟᚾᚳᚩᚱᛉ•ᛋᚹᚫ•ᚻᛖ•ᛋᚠᚾ•ᚢᚦᛟᚷᛖᚪᛟᛇᛇ•
ᚦᚳᛒᛝᛏᛉᛡᛞ•ᛋᛡ•ᚩᚠ•ᛈᛖᛞᛋᛁ•ᛚᛁᚻᚾᛝᚱ•
ᚻᛈ•ᛇᚢᚫᛞ•ᛚᚻᛉᚳᛈ•ᛁᛗᛉᚳ•ᛂᚫᚾᛞᛋ•ᛏᛚ
ᛡᚩᛋᛗ•ᛚᛞᚾ•ᛈᚫᛏᚷᛈ•ᚫᚦᛂᛗ•ᛒᚻᚩᚻᛁᚷᚻᚳ•
ᛚᚹᛋᚱᛇᛗᛏ•ᛂᚳᛁ•ᛠᚦᛞ•ᛏᛚ•ᚱᛖᛠᛒᚪ•ᛒᚠᛒ•ᛁ
ᛒᛡᛇᛏᚣ•ᛏᛖᚣᚳᚱᛋᚠ•ᛁᚦᚪᛉ•ᚪᚣᚫᛠ•ᛂ•ᛈ
ᛗ•ᚠᛋ•ᚪᛒᚱ•ᛉᚣᚻ•ᚦᚩ•ᛇᛞᚢ•ᚠᛁ•ᚻᚩᚫᚠᚣᚷ
ᚱᚪᛂ•ᛏᛉᛇ•ᛖᛠᛞ•ᛏᚠᚢᛝ•ᚫᛂᛖᛈᚳᛒᚦᚢ
ᛝ•ᛡᛒᚹᚱ•ᛖᚾᛈᛇᚣᛇ•ᛉᚱᚹ•ᛒᛡᛞ•ᛖᚱᚩᚻᚣ
ᛠᛈᚦ•ᛗᛁᚷᛚ•ᚹᛉᚫ•ᚠᛞᚾ•ᛂᛟ•ᚻᛚᛡ•ᛗᛖᚷ•
ᛟᛁᛡ•ᚻᛟᚱᛇᚹᚣᚠ•ᛈ•ᛂᚷᚦ•ᚪᛒᛝ•ᛈᛒᚪᛖ•ᚢᚹᚻ
ᚩᛒᛋᛉ•ᚹᛞ•ᚦᛇᚱᛖ•ᛂᚾᛞᛝᚹᚪ•ᚻᛖᚹ•ᛟᛡᛂ
ᛡᛟᛝᛂᛉᛚᛂ•ᛞᛉᛟᛈ•ᚱᚪᛁᛏᚷᛉᛝᛇ•ᛠᛗᚩ
ᛚ•ᚦᚫᚹ•ᚫᚢᛈᛡᚳ•ᚹᛝᚻᚹᛒᛗᛋᛟᛖᛁᛡ•ᛟᚹᚦᚻᛒ
•ᛡᚱᛏᚦᚠ•ᚠᚩᚦ•ᚻᚩᛗᛖᛉᚹᛞᛋᛚᚠᛞ•ᛝᛒᛇᛡ
ᛚᚪ•ᚹᛞᚾᚫᛉᛏᚣᛗᚷ•ᚦᚹᛉᛡᚦ•ᚹᛒᛋᚱᛉᛡᛉ
ᚪ•ᚢᛒᚻᛠ•ᚹᛝᚢᚻᛇᛝᛡᛠᛂ•ᛋᛈᚦᛏ•ᛟᛝᚩ
ᛗᛒᚢᛞᛋ•ᛒᛂ•ᛠᚱᛟ•ᛖᚾ•ᚾᚹᚷᚢᛚᚪᚩᚣ•ᚢᛏ
ᚠᛂᛏ•ᚪᚷᛒᛇ•

||page 33(Confirmed)
ᛞᛇ•ᛉᚳᚠᛁᚪᚹᚻᚷ•ᛇᛟ•ᚠᛏᛖᛟᛠᚪ
ᛡᛋᚷ•ᚣᛠᚾᚦᚫᚱ•ᚩᛡᛗ•ᚹᛉᛗ•ᚣ
ᛞᛒᛏᚱ•ᚢᛂᚻ•ᚫᛟ•ᛡᛝᚹᚻᛋᚠᛡ•ᛚᚦ
ᛏ•ᛁᚹᛏ•ᚩᚢᚾᚹᛗᛚ•ᛋᚦᛠᚹᛂ•ᚪᛂᚫᚷᚣᛗᚹᛞ•
ᛈᛡ•ᛖᛂᚹ•ᛖᚢ•ᚻᚹ•ᛝᛁ•ᛋᚫᚷ•ᛂᛚ•
(3 dots)

||page 33-2
ᛝᚦᛇ•ᛁᚠᚳᛟᛇ•ᛞᚹᚣᛡᚣᚢ•ᚣᚾᚦᚱᛖ
ᛗᛁ•ᛇᛞᚱᚹ•ᛉᚹᚻ•ᚳᛂᛡᚪ•ᚾᚹ•ᚾᛗ•ᚠ
ᛇᛁ•ᛇᚪ•ᚩᛋᛒᛟ•ᛏᛂ•ᛈ•ᛖᛈᛂᚩᚹᚢᛠ
ᛝᚹ•ᛗᚳᚩᛏᛏᚠᚢᛂ•ᛞᛠᛉᚩ•ᛉᚦᚷᛞ•ᛒᚩᛏᛚ
ᛇᛁᛒᛡᚪ•ᛖᚠᛠᚢᛖ•ᛈᛋᚹᛞᛞ•ᛋᛡ•ᚹᚦᛞᛋ•ᛝ
ᛂ•ᛚᚷᚢᛡ•ᚾᛉᚠ•ᚱᚪᚣᛗᚠᚦᚻ•ᚱᚪᚱ•ᚫᚪᚷᛟᛞ•ᛒ
ᛗᛒ•ᚾᚻ•ᛇᛞ•ᚻᛗᛚᛁ•ᛠᚾᛁ•ᚫᛖᚢ•ᛏᚦᛇᛋᛈᚻ
•ᚻᛇᚳᛠᚫ•ᛞᛚᛋᛝ•ᛁᚹ•ᚪᚳᚩᛏᛇᛝᚷ•ᚳᚦᛋᛠᚠ
ᚢᛝᛚᚻ•ᚹᚩᛇᚪᛈᚷ•ᛇᛗᛚᛂᛋᛏ•ᛚᚳᛈ•ᚾᛋᛝ•ᚳᚪ
ᚳ•ᚾᛉ•ᚾᚢᛉᚫᛗᛏᛞᛏᚫ•ᛟᛗᛋᛉ•ᛏᚣᛉ•ᛇ
ᛠᚷ•ᚻᛒᚾᚷᛇᚢᛟ•ᛂᚦᛉᚩ•ᚾᚪ•ᛞ•ᚩᛈ•ᛠᛚᛋ
ᛏ•ᛒᚷᛁᚢᛟᛖᛁ•ᛂᚦᛖᚻᚹ•ᛂᚫᛂᚾᚻᛉᚹ•ᛒᚪᛋ•ᚠᚱ
ᚱᛁᛉᚢᚦᚻ•ᚢᛗᚪ•ᛞᛝᛠᚪ•ᚫᛉᛖᚾᚹ•ᛟ•ᛝᛞ
ᚾ•ᛈᚫᚳᛡ•ᛈᚠᛉᚩ•ᛒᚷᛗᚫ•ᛚᚻᛞᚣᛖᛉᛒ•ᛂᚹ
ᛇ•ᛈᚩᛁᚦᚠ•ᚷᚾᛈᛞᛝᛏᛖᚪ•ᛂᛋᛠ•ᛈᛝᚢ•ᛒᚷ
ᚳᛉ•ᚪᚢᛈᛚ•ᛂᚱᚷᚣᚪ•ᚪᚠ•ᛗᛝᚣᚳᛟ•ᚹᚣᚷ
ᛈ•ᛗᛖᚩᚹᚢ•ᛟᛞᛋᚱ•ᚣᛞᛋᚳᛡᛉ•ᚻᚦᚹᛚᛞ
ᛠᚩᛞᛠᚢᛟᛖ•ᛠᚹ•ᛉᚻᛡᚹᛞ•ᚪᛗ•ᚠᚦᛈ•
ᛝᛏᚳᚪ•ᛠᚣᚷ•ᚳᚦᛖᚾᚢᛁᚫᛁᚢᛡ•ᚹᛚᚳ•ᚻᛈ•ᛞ
ᛂᚳ•ᛗᛒ•ᛗᚪᛂ•ᚩᚪᛞᛁ•ᚩᚱᛟᚠᛖᚣᛟᛁ•ᛇᛟ•ᛁᛈᚣ
ᛚᚪᛡ•ᚳᛏᛠᛋᛖᛒᛝ•ᚫᛟᚫᛞᛖᛞᚣᛡ•ᛠᚪᛖ
ᚦᛚᚫ•ᚳᛋᚪᚩᚷᚹᛚ•ᛈᛖ'ᛏ•ᛂᛉᛝᛚ•ᛏᛉᚩᚣᛝ
ᚠᚩᚣ•ᛁᚻ•ᛟᚫᚷᛂᛝᛡᚾᛗᚣᛟᛡ•ᛝᚷᛖᛉ•ᛟᛉ
ᛈᛚᛋᛉᛠ•ᛚᛡ•ᚱᚪᛞ•ᛠᚷ•ᚱ•ᚳᛇᚻ•ᛗᚪᛟᚷ•
ᛞᚪᛋᛡᚻ•ᛈᚷᛖᚳᛟᚱᛟᚢ•ᛁᚫᛟᚦ•ᛂᚱᛡ•ᚱᛖᚦ
ᛒ•ᚣᛏᛝᛡᚩᛏᚦᚳ•ᛉᚳ•ᛋᚪᚫ•ᛗᚠᛂᚱᛖ•ᛡᛇᛁᛇ
ᛟᛉᚳᚹᚪᛖ•ᛋᚢᛉ•ᛋᛟᛚ•ᛂᚾ•ᛈᛇᛒ•ᚦᚦ•ᛁᚫᛚᛋᛝ
ᛂᛂᛡ•ᛟᚻᛇᚢᛚ•ᛁᚱ•ᛡᚻᛚᛏᚹᛉᛇ•ᚱᛏᛠ•ᛁᚫᛚ
ᛗ•ᛁᚱᚷᛏᛠ•ᛇᛟᚻᛟᚳᛋᛏᚾᚩ•ᛁᚱᚷ•ᚹ•ᛞᚢᚣᛚᛁ
ᛗᛒᚢ•ᛚᚱ•ᛏᛁᚢ•ᚷᚳᚠᛇ•ᛚᛇᚣᛏ•ᛏᚫᚢ•ᚫᛠᛇ
ᛖᚾ•ᚢᚹᛝᚻ•ᚷᚣᚱ•ᚩᛁ•ᛚᚾᛉ•ᚾᚩᛈ•ᚠᛠᚫᚫᚩ•ᛉ
ᚾᛋᛟᚫᛚ•ᚾᚫ•ᚦᚢᛠᚣᚫ•ᛈᛁᛇᚢᚱᛂ•ᛈᛟᛂᚪᛝᛈ
ᚦᛈᚪᛝ•ᚣᛗᛟ•ᛉᛒᚢᛏᛇᛗᛈᚫᚣ•ᛉᚫᚣᚱᚫᚣ
ᚠᚠᛗᛡ•ᛉᛖ•ᚱᚢᛏᚷᚢᚣᚱ•ᛡᚢᚩᛇᛁ•ᛂᚠᛈᛂ
ᛞ•ᛁᚦᚩᚻᛡᚷᚻ•
1 ᛚᚦᛇᛟ•ᚪᚫᛠ•ᛗᛉᚻᚳᛉᚪᛏᚦ•ᚫᛉ•ᚩᛋᚳᛞ
ᛏ•ᚣᚹᚾ•ᛟᛏᛉ•ᚹᛁᛟᛂᚠᛁᚩ•ᛁᚱᛋ•ᛉᚾᛗᚪᛡ•ᚱᛈᛋ
ᛞ•ᛁᛟ•ᚻᛖᛏᚢᚹ•ᛠᛟᛞᛟᛂᛁᛝᛡ•ᛂᚱᛞᛗᛒ•ᚩ
ᚳᚩ•ᚦᛟᚱᚢᛚ•ᚢᚦᛋᚢᛞᛚ•ᚷᛁᚣᛝᚩᛟ•ᛁᛖᚣ•ᛖᚠ•
ᛇᛝᛒᛚᛁᚢᚣᚠᛟᚾᛟ•ᛒᛟᚷᛂᚪᚾᛗᚫ•ᚣᚦᚠ•ᛁᛒᛝᛈ
ᚾᛁᚱᚷ•ᛂᛇᚫ•ᚻᚪ•ᚱᛉᛉ•ᚩᛚᚾᚫ•ᛞᚣᛒᚾᚪ•
2 ᚾᚣᛖᛉ•ᚾᚢᛉᛁ•ᛝᛏᛈᚹᛋᚣ•ᛏᛠᛈᛉ•ᚪᛁ
ᛂᛋᚱᚪᛏᛋᛝᛏ•ᚳᚷᚳᚻ•ᛖᛟᚱᚪᛡᚻᚳ•ᛝᛒᛖᚱ
ᛠᚪ•ᛚᛟᛖᛚᚪ•ᚦᛋ•ᚳᚹᚱᚹ•ᚩᚻᚣ•ᚢᛝᚩ•ᛈᛚᛁᛏᚪ
•ᚠᛋᛝᛞ•ᚳᚪᚱᛒ•ᚹᛈ•ᚾᚩᚦᚳᚦᚾᛗᚩᛖ•ᚣᛇᚾ•ᚠᛒ
3 ᛞᚢᛈ•ᚹᚾᛖᚪ•ᚱᛚᛁᚹ•ᚫᛉ•ᛝᚠᛞᚪᚠ•ᛒᛂᛉ•ᛞ
ᛂᛝᚣᛇᚪ•ᚫᛂ•ᛝᛈᚪ•ᚢᛠ•ᛇᛏᚱ•ᛖ•ᚫᛗ•ᚫᛠ
ᚻ•ᛁᚫᛟ•ᛠᚹᚳᛂᚦᚻ•ᛡᚩᚢ•ᚩᚦᚷᛡ•ᚻᛋᚷᚪᛁᛟᛞ
ᚪᛂ•ᛁᚹᛡᛒ•ᛗᛝᛡᛞᚠᛒᛋᛏ•ᛒᚷᚠ•ᚷᛟᚢᚳᚫᛏᛁ
ᛖ•ᚱᚷᛗᚣ•ᚪᚷᚹ•
4 ᛝᛂᛋᛂᛗᚱᛗ•ᚾᛒᛋᛗᛉᛞᚻᛉᛁ•ᚣᛡᚻᚣ
ᛠᛉᚻ•ᛞᛖ•ᚹᛖᚦ•ᚢᚳ•ᛉᛗᚪᚣᛠ•ᚹᚫᚪᚳ•
ᚢᚫᚳᛇᚳᚣ•ᛡᚫᛏᛖᚳᚠ•ᛋᚻ•ᛋᚱᚢᚦ•ᛁᛋᛝᛗᛞ
ᚫᚢᛠᚢᚪ•ᚾᛝᚳ•ᛖᛈᚹᛉ•ᚢᛉᚫ•ᚾᛈᚳᚻᚱᚣ
ᚹᛚᛉᚱᛒ•ᛗᚫᛟᚣᚩ•ᚳᛇᛗ•
5 ᚻᚫᛉᚦᛒᛟ•ᛏᛟᚹᛂ•ᚫᛠᛗᚠᚫᚳᚷ•ᛇ•ᚻᚹᛗ
ᚻᛝᚣ•ᛁᚩᛁ•ᛏᛁᛖᛡᛂ•ᛗᚣᛚ•ᚻᚱᚩᛞᛒᛡᛈᛠᛗ•
ᚳᛠ•ᛖᛒᚢ•ᚷᛁᚦ•ᛟᚫ•ᛡᚻᛝᛖᚾ•ᚱᛠᛡᛋ•ᚻᛏ
ᛝᚻᚪᚷᚩᛝᚫ•ᚹᛚᛏᚱ•ᚷᛁᚾ•ᛖᛠᛂᛡᛞᛋᚻ•ᛝᚾ
ᚳᛋᚾᛞᛇᚾᛋᛁᚳᛡ•ᚱᛝᛚᚫᚣᛇᛚᚩ•ᚳᛞᚾ•ᛝᚷᛡ•
ᛝᛂ•ᚻᛂᛚᛠᛟ•ᛂᛏᚷ•ᛚᛒᛝᚢᛏ•ᚻᚳ•
•ᚫᛞᛟᚫᛟᛗ•ᛟᚫᚪᚻᚱᛗᚢ•ᚣᚢᚣ•ᛈᛗ•ᚪᛂᚫᛟ
ᛠᛚᚠᛖᛡᚢ•ᛉᚻ•ᚪᚩᛡᛒᛠᚢᚷ•ᚻᛏᛠᚪᛞ•
ᛋᚹ•ᚦ•ᚾᛋᛁᚻᛒ•ᛉᛠᛝ•ᛒᚢᛚᛟᚢᚾ•ᚢᚦᚩᛗᚪ•ᚾ
ᛞᚫᛇ•ᚫᚣᚪᛋ•ᚣᛝᛡᛗᚷᛇᛈ•ᛠᚳᚻᛝᛚ•ᚠᚷ
ᛡ•ᛁᛡᚪᚠᛒᛈ•ᚳᛋᚦᛠᚦᚫᚱ•ᚷᛞᛚᛟ•ᚷᚱᛁᛇ•ᚣᚩ
ᛟᚢᛝᚱᚷ•ᛗᛏᚷᛒᛈᚷ•ᛗᛏ•ᛗᚣᚹᛒᛏᛒ•ᚷᚣᛈ
ᚷ•ᚾᚦᛇᛒᚳ•ᚷᛖᛇᛟᛚᛈ•ᚹᚾ•ᚻᚷᚱᛇᛏ•ᛈᚷᛒ•ᚹ
ᛗᛋᚹᛟᚻ•
(3 dots)

//P32-2
ᛡᚳᛋ•ᛈᛞᛋᛡ•ᚪᚹᛏᚳᚹᛟ•ᛗᚹᛁᛒᛞ•ᚷ
ᛇᚢᛚ•ᛉᛋᚫ•ᛟᚻᛚᚦᛒ•ᚣᚪᛚᛞᚦᚠ•ᚻ•
ᛞᛝᚩᚢᛋᚪᚫ•ᛖᚦᛁ•ᛏᛂᛏ•ᛝᚦᚾᚳᛉ
ᛏᛝ•ᚳᛈᛁ•ᚾᛏ•ᛒᚾᛡᚱᛒ•ᚢᛈᛋᚦᛁᚳᛈᛋᛁᚹ•ᚹᛚᚣᚾ
ᚢ•ᛒᛁᚪᛠ•ᚹᛟᚳ•ᛠᚢᚪ•ᛚᚦᚹ•ᚠᚾᛏᚳᛡᛁ•ᛚᚩ•ᚾ
ᛗᛂᛠ•ᚦᛟᛂ•ᚪᚦᚹ•ᛡᚾᛖᛠᛈ•ᛒᛋᛂ•

||page 40(Confirmed)
ᚠᚾᛗ•ᚣᚷᛞᚫᚻ•ᚪᛈᛉᚣᚻ•ᛇᛠᚩᛖ•ᛏᛝ
ᛠ•ᛚᛁᛏᚦᚠ•ᛗᚪᚳᛖ•ᛞᚳ•ᛏᚱᛟᚷᛠᚾ
ᚫᛒᚢᛖᛒᚢ•ᚦᚠᛟ•ᚷᛋᛟ•ᛁᛈ•ᛟᛉᛋᛒ•ᚹᛂᛒ
ᚣᛗᚢᛠ•ᚱᛁᚢᛟᛂᛁ•ᛗᛖᚫ•ᚱᛋᛉᛝ•"ᛠᛈᛚ•
ᛞᚩᛚᛁᛉᛠᛝᛖᚱ"•ᚾᛈᛖᚹᛡ•ᚾᛂᛏᚣ•ᛋᚩᛋ
ᛏᛝ•ᚢᚾᛇᚪ•ᛖᛏᚪᛂᚳᚣ•ᛟᛒ•ᛚᛋ•ᛒᛞᛂ•ᛁᛝᚣᛖ
ᚳ•ᛂᚻᛚᚣ•ᚷᚫᛚᛞ•ᛚᚫᛚᚦᛉ•ᛚ•ᛖᛉᚩᛉᛁᚳᚢᛗ
ᚾᚢ•ᚩᚾᛇ•ᚻᛡᛚᛇᚩᚫᚪ•ᚩᛟᚩ•ᚣᚱ•ᛖᚠᚢ•ᛁᚻ•ᛟᛚ
ᚾᛏ•"ᚠᛞᚱᛠᚷ•ᛈᚩᛇᚩᛗᛠᛒ•ᛂᛡ•ᛋᛗᚠ•ᛏ
ᚠᚫᚩ•ᛟᚳᛚᛞᛡᛚ•ᚩᚳᛝᚢ•ᛈᚹᛏ•ᚷᚳᛋ•ᚢᛟᚷᚦ•
ᚠᛉᚠᛏ•ᚳᛋᛉᛟ•ᚷᚠᛉᚾᛞ•ᛒᛏᛠᛡ"•ᛈᛡ
ᛠᛁᚪ•ᛋᚣᛗᛞᚣᛋ•ᛒᛞᛂᛞ•ᚩᚾᛏᛚ•ᚳᚪᛝ•ᚱᚷ
ᚻᚷ•ᛂᚹᚠ•ᚪᚢᛇ•ᛞᛏᛗᛂᛁ•ᛝᚫ•ᛉᛈᚳᛈᛠ•ᛟᚪ
ᛒᛁᛁᛋ•ᛇᚷᚻᛋ•ᛇᛡᛒ•ᚠᚹᛝ•ᚫᚪᚠᚩᚣᛡᚪᚾᚻ•ᛒᚦᛟ
ᛇᚣᛟᛁᛒ•ᛟ•ᚩᛋᚹ•ᛞᚳᚠᚪᛁ•ᛉᛏᛟᚢᚩᛟᚦᛈᛋᚩ•
ᚻᛇᚦᛝ•ᛏᛠᚠᛝᛠ•ᚩᛗ•ᛏᚠᚣᛚᚣ•ᚹᛚᛞ•ᚪᛉ
ᛠ•ᚪᛂ•ᚩᛋᛒᛚ•ᚳᛖᚾᚪᚩᚱᛏᚦ•ᚱᛒᚳᚣ•ᛠᛗᚹᛚ•
ᚻᛈ•ᛇᛈᛖ•ᛚᛂᚩᛡᚪ•ᛖᛋᚫᚩ•ᛠᛉᛝᚣ•ᛖᚫᛒ
ᛗ•ᛖᚻᚱ•ᛈᚾᛗ•ᚹᛏᛟᚣᚢ•ᚠᛉᛈᛗᚩᚷᚾ•ᛡᛇᚳ
ᚠᛒᛈᛗ•ᛋᛇᛁ•ᛖᛈᚢᚱᛏᚳᚣ•ᛂᛚᚠ•ᚱᛚᚱᚫᛖᚻᛟ
•ᛇᚣᛡ•ᚩᛉ•ᚪᛋᚣᛁᛝ•ᛉᛚᛂ'ᚳ•ᛖᚣᚢᛝᚦᛇᚱ•
ᛠᛁᚫ•ᚦᚠᛟᚷᛠᛁ•ᛈᛋᛒ•ᛗᛒᛂᚠᚾᚳᛖ•ᚻᚫᚩᛂ•
ᛉᛂᛚᛈᚪᛁ•ᛟᚹᚱᛁᚱᚦᛖᛉ•ᚪᚾ•ᛞᛂᚷ•ᛟᛟᚳᛏᛂ
||page 42(Confirmed)
ᛞ•ᛉᚾᛗᚦ•ᛁᛂᚱ•ᛈᛉᚢᚫᚦᛒᚠᛂᚦ•ᚠᚪᛝᛖ•ᚹᚹᚣ
ᛚᛇ•ᚢᚣ•ᚾᚱᚪ•ᛈᚾᚹ•ᛚᚾᛏᛚᚢᛒᚱᛝᚪᛋ•ᚫᛈ•ᛂᛚ
ᚢᚳᚷ•ᛚᛏᛂᚹᛈ•ᚫᛗᛚ•ᛉᛚᛗᛏᛞᚠᛈᛁ•"ᚠᚳᚦ
ᛗᛂᚹᚱᚪᛚ•ᚩᛝᚱᚢᛈᚱᛟᛡ•ᚳᛉᚱ•ᛇᛏᚦᚾ•ᚱᛇᚫ
ᛞᛟᚻ•ᛒᚾᚣ•ᚠᛡᚪᛡᛖᚫᛞᛂᚢᛖ•ᚦᚱ•ᚩᛇᚱᛡ•
ᚣᛁᛉᛇᚻᚩᛠ•ᚫᚻᛡᛝᛠᚦ•ᚾᚣ•ᚾᚠᛁᛝ"•"ᛏ
ᚻᚹᚫ•ᛒᛇ•ᛡᚻᛉᛒ•ᛞᛝᚱᛂᚦᚻ•ᚪᚷᚣᛁᚠᚷ•ᛁᛏᛞ
ᛠᛒᚠᚩᛈ•ᛇᛡᛟᚹᚱᚾᚩᛏ•ᛋᚹᚢ•ᛖᛡᛖᛡᚦ•ᛉ
ᚪᚷᛈᚾ•ᛋᚱᚠᛞᛝᚻᛖᛂᛞ•ᛂᛡ•ᚱᚹ•ᚷᛝᚪᛒ•ᛂᛈ
ᛂ•ᛏᚠᛉ•ᚪᛂ•ᛁᚠᛉᚢᚩᚣᚻᚦ•ᚻᚾᛁᛒ•ᛡᛟᛡᛋᛈᚣ
ᛉ•ᛠᚢᛠᛚ•ᚠᛝᛗᚻ•ᚦᛒᚩ•ᛗᛚ•ᚩᛠᛋᚦᛠ•ᛇ
ᛋᛉ•ᚠᛗᛒ•ᚫᛋᛇᚾᛡᚾ•ᚢᚫᚹ•ᛞᛠᚢᚾᛝᚠᚾᛖᚫ
||page 43(Confirmed)
ᚻᛂ•ᛁᛖᛏᛡ•ᚷᛁᚩᚾ•ᚳᚢᚫᛗᛈᛋᚪᛡ•ᚷᛚᚣᚹᛟ"•
ᚠᚢ•ᛉᚠᚫᛞᚠᛡᛂᚾ•ᚻᛋᚦᚠ•ᛏᚠᛂᚱᚹᚠᛋᚾᚹᛂ
ᛖᛒᚢᚦ•ᚩᛇᚫᛈ•ᛡᛟ•ᚢᛁᚩᛂᚩᛇᛟᛂᛞᚩ•ᛈᚹᛞ
ᚷᚱ•ᚠᛟ•ᛇᚷ•ᛂᛟᛇᚫᛋᚫᚣ•ᛒᛏᛞᛟ•ᛠᚻᛡᚱᛠ
ᛠᛉᛋ•ᚠᚾᚣᚱᚠ•ᚪᚾᛡᚪᛖᚫ•ᚳᛇᛁᛝ•ᛒᛡᛞᛠ
ᚫᛒᛠᚳᛉᚠ•ᚫᛏᛁᚱᚪᛗᚩ•ᛚᛉᛋᚪ•ᛒᚩᛈᚫᚩᛝᚻᛇ
ᛖᛇᚫ•ᚻᛖᛇᛠ•ᚱᛗᛞ•ᚫᛇᛗ•ᚾᚾᚣᛡ•ᚱᚾᛗ
ᛠ•ᛂᛉᛋᛂ•ᛟᛖᛒ•ᛏᚻᚾ•ᚠᚪᚠ•ᛒᚾ•ᚩᚾ•ᛖᛋᛏᛒᚹ
ᛡ•ᚻᛏ•ᚩᛟᚩ•ᛒᚾᛖᚳᛁᚹᚣᛟ•ᛟᚩᛒ•ᛋᛖᚩ•ᚫᚻᛟ
ᚠᚫᚷᚩᛂ•ᛟᛒᚻ•ᚳᛖᛁᛚᚫᚣᛚ•ᚢᛚᛁ•ᚾᛟᛏ•ᚫᛈᛟᛈ
ᛝᛗ•ᚳᚢᛁ•ᚣᛋᚳᚢᛡᛇᚩ•ᚠᛖ•ᚷᛟ•ᚻᚫ•ᛝᚠ•ᛗᚠ
ᛝᛉᛞᛁ•ᛗᛝᚣᚪᛝᚠᛉᛁᛟᚷᛚ•ᛇᚩ•ᚫᛡᛏ•ᛂᛏ
||page 44(Confirmed)
ᛠᚢ•ᚷᚦᚣ•ᚦᚾᛟᚣᚩᛖᚻ•ᛁᛋᛖᚣᚦᚪᛡᛝᛟᛇᛚ•
ᛡᛏᛝ•ᛁᛚ•ᚠᛉᛡᛠᛏ•ᚠᚾᛂᚠᚻᚳ•ᚻᛞᛠᚣᛟ
ᛝ•ᛉᛇᚻᚩᛋᚻ•ᛇᛏᚠ•ᛚᚱᛇᚦᚪᛁᛁ•ᛒᚠᛁᛚ•ᛂᛡᛒᚣ
ᛗᚫᚫ•ᛞᚻᛟ•ᚪᚹᛉᛚᛏᛁᚪ•ᛟᛞᛖᚾᛈᚻᚣ•ᚦᛚᛖᛋ
ᛖᛟᚫᛖ•ᛏᚱᚪ•ᛁᚫᚹᚫ•ᛋᛈᚱ•ᛂᛡᚪᛏ•ᚫᚦ•ᚠᛠᚢ
ᛈᚣᚫᛝ•ᚣᚾᚻᛡ•ᚳᛗᚠᚾ•ᛞᛂ•ᛖᚩ•ᛒᚷᚻᚪ•ᛖᛞ
ᛟᚠᛇᛞᛟ•ᛈᚳᛁᚪᛒᚷᛒᛈᛟ•ᛟᛂᚠᚪᛖ•ᛂᚣᚩᛂ•ᚣ
•ᚫᛋ•ᚦᛁᚫᛂᚫᛏ•ᛖᛇᚻᛟ•ᚣᚠᚹᛞᚷ•ᛡᚱᛒᚢ•ᛒᛚ
ᚢ•ᚷᛈᛂᚪ•ᛏᛡ•ᚳᛂᚠᛡᛝᛚᚣᛒ•ᛗᚻ•ᚱᛚᛟᛠᛋ
ᚦᛝ•ᛏᚳᛟᛉᛁ•ᛂᚱᚳᛖᛏᛂᚷ•ᛡᛈᛏᛉᚩᛁᛂᛟ•ᚷ
ᚩᚪᚢ•ᚣᛖᚪᛋᛟᛇᚢᚪᛡ•ᛗᚱᛚᚳᚠ•ᛒᛗᛝ•ᚻᛉ•
ᛠᛂᚫ•ᛉᚪᚷᚻᚣᛏᛖᛝ•ᛉᛉᛗᚾᚫᛋ•ᚱᛗᛞᛋ
||page 45(Confirmed)
ᚳ•ᚦᛚᛟ•ᛝᛇᚢ•ᚻᚩ•ᛏ•ᚢᛁᚦᛂᚾᚠᚱᚦ•ᛋᛟᚷᛠ
ᛗᚪ•ᛝᛚᚪᛁᛒᛠᚢᛋ•ᚩ•ᛖᛋᛝ•ᚠᛡᚢᛟᛞᛇᚪ•ᛞ
ᛡᛒᚹᚩ•ᛂᛋ•ᛟᛝᛏᚳ•ᚻᚾᛇᛋ•ᛗᛚᚻᛞᛖᛈ•ᚫᛂᚱ
ᚪᚢᚻᚱᚦᚱ•ᛟᛂ•ᛟᛗᚩᛟᛏ•ᚫᛇ•ᛉᛒᚳ•ᛂᛁ•ᚪᚩᛉ•
ᚹᚪᚾᛈᛏᚢᚣ•ᛁᛒᚢ•ᚦᚩᛡ•ᛗᚳᚠᛉᚱᛁ•ᚪᛗᛏᛒ•
ᛗᛚᛁᚦᛏᛠᛋᚾᚷᛚ•ᛏ•ᛇᛈ•ᚩᛚᛞ•ᛚᚹᚳᛂᚹᛉ•ᚪ
ᛡᚹᛇ•ᛖᛖᚹ•ᛏᚪ•ᚣᚠᛉᚳ•ᛗᚩᚷᛞᚷ•ᛚᚳ•ᛒᚣᛋ
ᚣᚠᛞᚣᛝ•ᛠᛇᛏᚩᚢᚫ•ᛟᛁᛒ•ᛏᚾᚫᚠ•ᛂᛟᛗᚾ
ᛈ•ᛠᛡᚩᛏᛡᚪᚱᛞ•ᚪᛝᛈᚹᛗᛂᛟᛠᚩ•ᛚᚹᛉ•
ᚱᛗ•ᚩᛏᚹᛂᚹᚾ•ᚷᚳᛠ•ᛂᚳᚢᚱ•ᛟᛇᛟᚾᚻᚫᛉ•
ᚣᛚᚩ•ᚩᛡᚳᚻᛂ•ᛋᚣᚹᛁ•ᚣᚠᛋᚾᚪ•ᚷᛖᚾᛂᚪᚹᛠ•
ᛞᚠᛟ•ᚢᛁ•ᛖᛇᚦ•ᚫᛞ•ᚳᛂ•ᚷᚢᚻᚣᚻᛁᛒᛉᚾ•ᚹᛝ
||page 46(Confirmed)
ᚻᛏᛉᚫᛁᛂᚢ•ᛞᚠᛡᚫ•ᛋᛁᚹᛝᛈ•ᛗᛉᛂᛈ•ᛞᛗ
ᛝ•ᛇᛚᛞᚣ•ᚠᚩᛞ•ᛝᚷᚾᛇ•ᚷᛖ•ᛚᛉᚣ•ᚫᛚᛖᛉ•
ᛡᛝᛋ•ᚳᛁᚦ•ᚷᛏᚣ•ᚹᚩ•ᛝᛖ•ᛒᚪᛗᛏᚪᚷᛒ•ᛈᛡ
ᛟ•ᚪᛉᛝᛒᛞᛉᛂᚦᚢ•ᛏᛇᛖ•ᚣᚪᚳ•ᛠᚦᚹ•ᛏᛉ
ᚩᚳᛞᛒ•ᛟᚩᛠᚾᚠᚪ•ᛚᛗᛖᛁᚦᚫᚪᛡᛂᛁᚪᚱ•ᚦᚱᛖ
ᛖᚣᛋᚾ•ᛖᛏᚢᚻᛈᚳᚦᛋ•ᚳᛇᛉᛖᛇᚠ•ᛞᛠᛏ
ᛈ•ᚣᛇᛠᚢᛏ•ᛉᚦᚷᚻ•ᚫᚾᛠᚱ•ᛡᛒᛏᛁᛉ•ᚩᚢ
ᛝ•ᛚᛒᛇᚩ•ᛟᛉ•ᚦᛞᚷᚠ•ᚩᚱᛈᚪᛏ•ᚫᛋᚪᚦ•ᛖᛟᚪᛝ
ᚫ•ᚣᛒᛚ•ᛡᚦᚾᚠᛈᛟᛡᚾ•ᛖᚹ•ᛖᛗᚩ•ᛉᚹᚦᛠ•ᛁᚦ
ᛒᛖᚱ•ᛟᚳᛉ•ᛈᛖ•ᛁᚢᚦ•ᛈᚠᛞᛈᛂ•ᛁᛟᚻ•ᛒᚦᛏᚩ
ᚳᚢᛚ•ᛞᛂᛝ•ᚦᛂᛁᚪ•ᚹᚣ•ᚢᛝᚾ•ᛋᚾᛈᚠᚫᛒᛂᚫ•ᛡ
ᛗᚹ•ᛇᚪᚩᚾᛂᚳᛚᛒᛉ•ᚣᛠᚦᚹ•ᛝᛚᛗᚳᛡᛇᚠᚫ
||page 47(Confirmed)
ᛠᛁᚦ•ᛒᛠᛚᚦᚳᛞᛁᛇ•ᚠᚢᛉᛋᛉᛁᚦᚫᛋᛗ•ᚦᚹ•
ᛈ•ᛒᛋᛏᚫᚾᚱᛁ•ᚦᛇᛡᚱᛚᛡᚹ•ᚢᚩᛋᚱ•ᚹᚫ•ᛒᚹᛡᛖ
ᛟᛂ•ᛡᚣᛖᚩᛖᛡᚷᚫᚠᚾᚹ•ᛟᛏᚫᚠᛂᚹᛠ•ᚦᛞ•ᛁ
ᚫᚩᚾ•ᛋᚷᛈᚪᛖᚩ•ᚣᚦᚹ•ᚾᚷ•ᛠᛋᚩᛇᛏ•ᛝᛚᚷᛞ
•ᛒᛈᛈ•ᛗᛁᚪᛖ•ᛚᛏᛁ•ᚫᛂᛖ•ᛒᚾᚠᚪᛋᚷᛒᚠ•ᚫᚹᚣᚷ
ᚢᛡᚠᛠ•ᛖᛋᛞ•ᛚᚳᛒᛞᛏᛈ•ᛖᚾᛈᚣ•ᚱᚠᚻ•ᚫ
ᛝ•ᛟᚪᛗ•ᛒ•ᛡᛚ•ᛝᛋᚱᚢᚹᚱᚣᚻᚹ•ᚹᛡᛈ•ᛁᚻᚾᚻᚱ
•ᚳᛖᛏᚫᚩᛋ•ᚣᛋ•ᛝᚫᛡᛝᚫ•ᚻᚦ•ᛇᚪᛞᛋ•ᛒᛁᚳᛈ
•ᛇᛒᛟᚫ•ᛠᛝᛖ•ᛝᛠᚣ•ᛒᚣᛉᚻᚢᚠᚦᛞᚹ•ᛗ
ᚢᛁᛡᛂᚩ•ᛋᛇᚫᛇᛝᚱ•ᛚᛇᛠ•ᛏᚩᛂ•ᚩᛝᛈ•ᚱᚻ
ᛠᚢᛉᚦ•ᚣᚢᛋ•ᛡᛚᛖᚷᛗᛝᚹᚻᚱᛋ•ᚢᛟᚣᛠ
ᚷᚩᚷ•ᛇᛁᛖ•ᛠᛂᛇᛁᚾᛂᚩᛗᚱᛡᛉ•ᚠᚻᚳ•ᚪᚩᚪᚫ
||page 48(Confirmed)
ᚻᚳᛁᚦ•ᛂᚷ•ᛝᛖᚢ•ᛡᛏᛁ•ᛚᚩᚱᛈ•ᚠᚪ•ᛈᛞᚱᛒ•
ᛝᛁᛋ•ᚷ•ᚠᚾᛈᚠᛒ•ᛟᚦᛁᛠᚪ•ᛡᛏᚾᚳ•ᚦᛟᚻᛈᛖᛚ
ᚫ•ᛟᚠᛗ•ᛡᛝ•ᛒᛝᚦᛝᛠᚠ•ᛇᛗᛟ•ᚩᛠᛈ•ᛁᛡᚱ
•ᚹᚹᛟᚩᛒᚩ•ᚾᚩᛂᛟᚾ•ᚦᛡᚠ•ᚩᛂᛞᚦᛏᛁ•ᛈᚾᚪᚱᛂ•
ᛉᚱᚣ•ᛝᛡ•ᛏᛗ•ᛈᛞᚣᚻ•ᛗᛝᚫᚳᛇ•ᛡᚣᛂᛟ
•ᛝᚩᚢᛇᛁᚱ•ᛏᚪ•ᚩᚻᚪᛚᚫᛚᚪ•ᛋᛈ•ᛏᚪᛂᚳᚦᚢᛏᚹ
ᚦ•ᛗᚷᛖᛗᚣᛡᛁᛞ•ᚢᛋᚠᛒ•ᛟᛚᛟ•ᚪᛒ•ᚦᛚᚣ•ᚳ
ᛠᚣ•ᛞᛇᛁ•ᚹᛉ•ᛟᛝᛒᚢᛋᛞᚻᛞ•ᚢ•ᛠᚱ•ᚫᚩ
ᚻᛝᛒᚪᚹ•ᛈᛡᚾᛚᛇ•ᛖᛟᛝ•ᛡᚠᛇᛡ•ᚳᚦᚹ•ᛚᚦᚪᛁ
ᛈ•ᛞᛟᛂ•ᚢᛉᚢᚾᛠᚠ•ᚩᚾᚪ•ᚱᛠᚷ•ᛗᚢ•ᛗᛁᛂ
ᛒᛗᚱᚾᛗ•ᚩᚾᚠᚣ•ᛗᚠᛇᚠᛂ•ᛒᛡᛈᛂᛖᛡᛏ•ᛈᛟ
ᚫᛏᛟ•ᚻᛖᚾ•ᚳᛇᚩ•ᛋᚻᚫᛇ•ᛝᛁᛟ•ᛇᚠᚢᛞᚣᚪᛚᚠ
||page 49(Confirmed)
ᛡ•ᛖᛂ•ᚠᛚᛟ•ᛁᚳ•ᛁᛝᚷᚦ•ᛗᛋᚫᚷᚪᛠ•ᛗᛁ•ᛒᛡᛏ
ᚾ•ᛝᛗᚦ•ᛏᚣᚫᛂ•ᛖᚻᚠᚪᛡᚷ•ᚪᛗᛁ•ᛞᛉᛏ•ᚢᛖ
ᚦᚾ•ᛖᚪᛈᚹᛠᛚ•ᛒᚢᚱᛡᛟ•ᚪᚣ•ᛟᛇᚹᛂᛈᛞ•
||page 50(Confirmed)
numbers
||page 51(Confirmed)
ᚹᚹᛈ•ᚠᛡᛚᛉᛒᚾ•ᚳᛗᚾᚱᛗ•ᚻᚦᚫᛞᛂ•ᛒᛡᚫ•ᛇᚹ
ᛗᚢ•ᚪᛈᛡ•ᛈᛁᛂ•ᚪᚢᚾᛠᛖᛞᛗᚪ•ᛏᛟᛗ•ᛋᛞ
ᛝᚷᛚᛋᛞᛝ•ᛟ•ᛋᛂᛞ•ᛚᛟᚠᛂᚫᚠᚪ•ᛝᛟᚣᛈ•ᚣᚩ
ᛒᚷᚳᛖᛏᚹ•ᚪᛋᛒ•ᛗᛠᚣᛇᛗᚫᛚᚱ•ᚹᛇᛂᛒ•ᛈᛚᚠ
||page 52(Confirmed)
ᛈ•ᚠᛗ•ᛝᚪᛇᚾᛟᚹᛇᛉ•ᚣᚫᛉᛞᛟᚱᛒ•ᛡᚱᛟ•ᚹᛏ
ᚷᚱᛂᛖ•ᛠ•ᛈᛚᛞ•ᚻᚦᚱ•ᚦᚣᛚᛉ•ᛠᛈᚫᚠᚪ•ᚫᚪ
ᛒ•ᛈᛋ•ᛗ•ᛏᚫᚳᛈᛝᚹᚦ•ᚻᛠ•ᛞᚩᛂᚷ•ᛋᚩᛠᚳ
ᛖᛋ•ᚣᛖᚫ•ᛈᚦ•ᛁᛇᛈᚳᛝ•ᛈᚳᛇᚢᛏᚳᛡᛇᛝᚾ
ᚢᚻᚦ•ᚣᚠᛗᚾ•ᛝᚠᛂᛉᛟᚱᛗ•ᛝᛠᛂᛏᚳ•ᚢᚷ
ᚦ•ᚠᚦᛋ•ᚪᛈᚩᚪᚫᛞᛋᛝ•ᛒᛗᚩᚷ•ᚹᚠᛗᛖ•ᛠᛇᚻᚠ
ᚻᚳᚱᚫ•ᛝᛗᛉᚳ•ᛋᚪᚹᛋᛠ•ᚩᚣᛚᛉᛝ•ᛠᛟᛉ
ᛟᛠᛡᛝᛒ•ᛝᚳᚫᛁᚱ•ᛒᚠ•ᛏᚣᚣ•ᛠᛒ•ᚣᛚᚩ•ᛇ
ᛉ•ᚩᚷᛗᚩ•ᚠᛚᛟᛝᚦᛠ•ᚦᚣᛖᚣ•ᚾᚷᚾ•ᛡᛏ•ᛂ
ᛟᚾᛁ•ᛋᛟ•ᛠᚦᚣ•ᛋᛒ•ᚫᛚᚪᛂᛡᛖᚷᛉᛡᚾᛉᛏ•
ᛡᛒᚻᛚᚷ•ᚢᚦᛠ•ᚢᚾᛁᚩᛗᛠᛁᚷ•ᛟᚦᚱᚣ•ᛒᛖ
ᛠᚩᛈ•ᛗᛏᚱᚫᚢᚻᛁᛝ•ᛇᚳᚠ•ᛂᚾᚱᚷ•ᛟᚷᚻᚣᚻ
||page 53(Confirmed)
ᛇᚫᛠᚫᚣ•ᚢᛗᛈ•ᛉᛁᚢᚾᚩᛟᚾ•ᚷᛞᚦ•ᛡᚫᚹ•ᛞ
ᛟᛖᚱ•ᛗᚾᛖᚻᚷᛒᚢᛂ•ᚢᚦᛗᛖᛞᛝ•ᛒᚷᚣᚱ•ᛖ
ᛁᚢᛂ•ᚣᛡᛚᚢ•ᛂᛟ•"ᛠᛉᚣᛇᚱ•ᚩᛈᛋᚳᚫᛗ
ᛇ•ᚾᛂ•ᛖᚠᛋ•ᛖᚠᚪᛝ•ᚢᛝᛂᛇᚷᚠᛝᚱᛁᚦ•ᛂᚢᚫ•
ᚣᛋᚠᛖᚢᛋᚫᚣᛠ•ᛁᛏᛟᚱᛏᛟᚩ•ᚷᚾᚻ•ᛞᛗᚩᚳ
ᛞᛖᛏ•ᚹᛉᛞᛚ•ᚩᚫᛂ•ᛇᚢᛒ"•ᛗᛏ•ᛞᛗᛖ•ᛏ
ᛈᚹᛇᛋ•ᚹᛒᛇᚦ•ᚾᚻᚷᛂ•ᚱᛡᛞᛡᚦᚪᛁᛇᚫᛉᛚ•ᛇ
ᛠ•ᛡᚪᛂ•ᚻᚱ•ᚦᛈᛞᛂᛝᚩ•ᚷᚠᛇᛗᚳ•ᚻᛞᚩᛏᚳ
•ᚢᚱ•ᛈᚾ•

||page 54(Confirmed)
ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ•ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪ
ᛝ•ᛝᚦᛡᚹᛋᚻ•ᛁᚳ•ᚫᛈᚫᚷᚩ•ᛗᛁᚪ•ᛖᚩ•ᛏᚹ
ᚩ•ᚠᚣᚢᛏᛂ•ᚦᛂᛠᛖᚳᚾᛠ•ᚳᛠᛖ•ᚱ
ᚩᚢᛉ•ᛞᚹᚻᛒᛝᚠᚪᚳᛂᚢ•ᚩᛂᛡᛠᛁᛚᚷᚻ•ᛒᚢ
ᛂ•ᛉᚪᚳᚹᛡ•ᛗᚩᛈᚣᛞᛡᛚᛈ•ᛇᛁᚦᚱ•ᚣᚷᛗ•ᛉ
ᛟᚷᛋ•ᛗᛈᛂᛟᛞ•ᛟᛏᛡᛟ•ᛏᛝᛁ•ᛗᛝᚣᚪᚫ•ᛝ•ᚱ
ᚣᛂ•ᚾᛚᚢᛉᛒ•ᚻᛈᛂᚩᛠ•ᚷᚫᚹ•ᛉᛋᛞᚳ•ᚢᛏ•
ᛟᚻᛇᚾᛈᛏ•ᛠᚣᛒᚢᚷ•ᚷᚪᛇ•ᚾᚷᚩᛖᛚᛗᛒᚦ•ᚣ
ᛡᛟᛇᚣ•ᛗᚳᛟᚦ•ᛖᛚᚱᛇᛈᚱᛞᚣ•ᛉᛞ•ᛝᚣᛈ•
ᛋᛖᛉᚹ•ᚳᚷᚠᛞᚱᛖ•ᛞᛖᚹᚩᛇᛟ•ᚻᚩᛟ•ᛒᛋ•ᚻ
ᛠᚪᚳᛁᛗᛉᛂᛗᛖ•ᛗᛚ•ᚷᚩᛏᚦᛉᛖᛠᚱᚷᚣ
||page 55(Confirmed)
ᛝ•ᚫᛗᛁᚹ•ᛋᛒ•ᛉᛗ•ᛋᛇᚷᛞᚦᚫ•ᚠᛡᚪᛒᚳᚢ•ᚹᚱ•ᛒ
ᛠᚠᛉᛁᛗᚢᚳᛈᚻᛝᛚᛇ•ᛗᛋᛞᛡᛈᚠ•ᛒᚻᛇᚳ•
ᛇᛖ•ᛠᛖᛁᚷᛉᚷᛋ•ᛖᛋᛇᚦᚦᛖᛋ•ᚦᛟ•ᚳᛠᛁᛗ
ᚳᛉ•ᛞᛂᚢ•ᛒᛖᛁ•

||page 56 (Confirmed)
ᚫᛂ•ᛟᛋᚱ•ᛗᚣᛚᚩᚻ•ᚩᚫ•ᚳᚦᚷᚹ•ᚹᛚᚫ•ᛚ
ᚩᚪᛈ•ᛗᛞᛞᚢᚷᚹ•ᛚ•ᛞᚾᚣᛂ•ᚳᚠᛡ•ᚫᛏ
ᛈᛇᚪᚦ•ᚳᚫ
ᚳᛞ•ᚠᚾ•ᛡᛖ•ᚠᚾᚳᛝ•ᚱᚠ•ᚫᛁᚱᛞᛖ•ᛋᚣᛂᛠᚢ
ᛝᚹ•ᛉᚩ•ᛗᛠᚹᚠ•ᚱᚷᛡ•ᛝᚱᛒ•ᚫᚾᚢᛋ•

||page 57 
ᛈᚪᚱᚪᛒᛚᛖ• ᛚᛁᚳᛖ•ᚦᛖ•ᛁᚾᛋᛏᚪᚱ•ᛏ
ᚢᚾᚾᛖᛚᛝ•ᛏᚩ•ᚦᛖ•ᛋᚢᚱᚠᚪᚳᛖ•
ᚹᛖ•ᛗᚢᛋᛏ•ᛋᚻᛖᛞ•ᚩᚢᚱ•ᚩᚹᚾ•ᚳ
ᛁᚱᚳᚢᛗᚠᛖᚱᛖᚾᚳᛖᛋ• ᚠᛁᚾᛞ•ᚦ
ᛖ•ᛞᛁᚢᛁᚾᛁᛏᚣ•ᚹᛁᚦᛁᚾ•ᚪᚾᛞ•ᛖᛗᛖᚱᚷᛖ• 
"""


Pall ="""|| page 0 // 273 runes
ᛋᚻᛖᚩᚷᛗᛡᚠ•ᛋᚣᛖᛝᚳ•ᚦᛂᚷᚫ•ᚠᛂᛟ•
ᚩᚾᚦ•ᚾᛖᚹᛒᚪᛋᛟᛇᛁᛝᚢ•ᚾᚫᚷᛁᚦ•ᚻᛒᚾᛡ 
ᛈᛒᚾ•ᛇᛂᚦ•ᚪᛝᚣᛉ•ᛒᛞᛈ•ᛖᛡᚠᛉᚷᚠ•
ᛋᛈᛏᚠᛈᚢᛝᚣᛝᛉᛡ•ᚣᚻ•ᛒᚢ•ᚷᚩᛈ•ᛝᚫᚦ•ᛁ
ᚫᚻᛉᚦᛈᚷ•ᚣᚠᛝᚳᛂ•ᚦᚪᛗᛁᛝᛁᛡᚣ•ᚻᛇ•ᛏᚻᚫ
ᛡ•ᛉᚣ•ᛖᚢᛝ•ᚳᚠᚾ•ᛇᚦᛂᛁᚦ•ᚦᛈ•ᚣᛝᛠ•ᚣᚾ
ᛖᚣ•ᛞᛉᛝᚹ•ᛒᚳᛉᛞᛒᚠ•ᛗᛏᚾᛖ•ᛠᛂᚾᛚᚷ
ᛒ•ᛉᚷᚦ•ᚣᛁᛞᚪ•ᛝᚷᛗᛂᚱᚩᛚᛇ•ᚣᛏᛈᛁᚦᛞᛂ•
ᛟᚻᛚ•ᛠ•ᚠᛉᚫᛈᚷᛉ•ᚠᛚᚹᛇᛏᚫ•ᚠᚷᚾ•ᛗᛇᛚᚾ•
ᛝᛗᚠᚱᛡ•ᚪᛋ•ᛠᛗᛝᛉᛉᛇᛞᛒ•ᛟᛞᛗᚩ•ᛠ
ᛇᚻ•ᛞᛝᚷ•ᛟᛝᛚᚢᚱᚾᛏ•ᚫᛋᚣᚢᚻᚱᛏ•ᚻᚳ•ᛋᛟ
ᛏᛟᛝᚢᚱ•ᛋ•ᚠᚩᛖᚹᛠᛟᛚᚠᚫ•ᛗᚱᛝ•ᛞᚪᛗᚱ•ᚹ

|| page 1 // 277 runes
ᚪᛁᛗᛋᚾ•ᛋᛟᚱᚢᚹᛋᛚᛡ•ᛟᚪᚫᛝᛋᛞᛈᛏ•ᚳᚱᚦ
ᛡ•ᚱᛒᚩᛞᚦᚠ•ᚣᛉᛁᛏ•ᛟᛁ•ᚠᛚᚩ•ᚠᛠ•ᚱᚩᛟᛗᚻ
ᛗᚷᛈᚻ•ᚫᚻᚾᚩᚻᚣ•ᛟᛋᛚ•ᚾᚷ•ᚫᚣ•ᛟᚳᛒᛚᛂ•ᛝ
ᛚᛟ•ᚫᛂᛠᚹ•ᛠᚦᚩ•ᛒᛟᚣ•ᚳᚠᚳᛂ•ᛚᚫ•ᚾ•ᚦᛈ•
ᚢᛉ•ᛟᛉᚷ•ᛈᚠᛋᛇᚫᛟ•ᛝᛈᛇᚩᛖᚪ•ᚷᚫᛡᛝᚦᚩ
•ᛈᚪᛟᚦᚱᛝᚫ•ᚳᛋᛒᛇᚣᚻ•ᛏᛉᛖᛚᚱ•ᚷᚹᚣ•ᛂᚠ
ᛁᚾᛡᚳᚣᛠᛁᛡ•ᚩᚦ•ᛖᚳᚫᚳᛉᛡᛠ•ᚩᛚᚳ•ᚠᚱ
ᛞᛝᛖᚢ•ᛞᚳᛚᛠᛋᛉᚳᚷᛡ•ᚹᛋᚦ•ᚠᛞᛝ•ᛁᛡ
ᛗᚪᚫᚷ•ᚹᛋ•ᚾᛞ•ᚳᛈᚦᛉᛈᛠᛠ•ᚹᚢ•ᛠᚹ•ᚠᚹ
ᛂᚣ•ᛉᛞᚹᚳᚷᚳᛟ•ᛞᛉᛟ•ᚱᛡᚷ•ᚾᛈᚪᚣᛈ•ᚳ
ᚣᚻ•ᚠᛖᛂᛠᚾ•ᛟᚫ•ᚢᚪ•ᚻᚱ•ᛖᛠᚦᚠᛂᚪ•ᛚᛉ
ᛋᛏ•ᛗᚠᛚᚠᛏ•ᚷᛁᚦ•ᚢᛚᚷ•ᛉᛠᛏᛋᛚᛂᛈ•ᛚᛉᛁ

|| page 2 // 209 runes
ᛟᛗ•ᚢ•ᚻᛏ•ᛒᛇᛚᛞᚻᛒᛗ•ᛠᚱᛒ•ᚾᚻᛒᛖᚷᛇ•
ᛞᛚᚹᛇᛡᛈᚩ•ᚻᛖᛠ•ᚹᛁᚱᛁᚻ•ᚢᚦᚻᚣ•ᚾᛉᛒᚷᛂ
ᛈᚢ•ᛝᛠᚠᚾᛁᛖᛞᛡᛝᚱ•ᛞᛒᛂᛡᛟᛗᛁ•ᚠᛏ•ᛂ
ᛞᛁᚦᚱᛚᛋ•ᛖᛇᚩᚷᛒᛏᛞ•ᚦᚪᚾᚳᚣ•ᛡᛋᚦᛞ•ᛝᚠᛚ
ᛖᚷᚻᚳ•ᛖᚩᛁᛏᚾᛉ•ᛈᛏᚠᚻᚱᛞᛖᚠᛏ•ᚫᚹᚻ•ᛒ
ᚳ•ᚠ•ᛈᚪᛚᚢᛠᚾᛚᛂ•ᛂᚳᛚᚹᛠᛞᚢᛞᛇ•ᛠᛉ
ᛞᚹᚻᛠ•ᚦᛡᚫᚳᛚᛏᚹᛖᛁᚳ•ᛈᛟᛞᚳ•ᚾᚻᚪ•ᚱᛁᚷ
ᚦᛠᛖᛏᚷ•ᚦᚻᚩᛡᚹᚫᛂᛖ•ᛝᛠᛞ•ᚩᚫ•ᚪᛚ•ᛒᛂ
ᚳᚢᛉᛏᚪᛒᛂᛈ•ᚠᛠ•ᚻᛞᚾᛡᚢᛈᛋᚢᚹ•

|| page 3 // 227 runes
ᛚᛂ•ᛇᚻᛝᚳᚦᛏᚫᛂᛏᛉᚻ•ᛏᚢᛟ•ᛋᛈᚱᚷ
•ᚣᚾᚪᚷᛇᛝᚾ•ᚹᚠᚣᚾᛒᛠᛡ•ᛈᚾᚣᚪᛋᛗ
ᛒ•ᛡᛠᛡᛁ•ᚩᛒᚱᚾᛚᛠ•ᚱᛚᛚᛖᛒᚹᚾᚻᛗᚠ
ᛟᛒ•ᛝ•ᚱᚪᛡᚷᛟᛇᛏᛗᛉ•ᛞᛇ•ᛗᚣᚻᛠ•ᛁᛚᛋ•ᚾ
ᚹᚳᚠᛈᛗᛈᛚ•ᛠᛋᚦᚠᛟᛡ•ᚦᛖᚣ•ᚳᛂᛚᚳᛡᛗ•
ᛒᛞᚳᛇ•ᛂᛁᛏᛟ•ᛞᛠᛖᛡᚾᛏ•
ᛈᛞᚦ•ᛇᛞᛇ•ᚫᛚᚳ•ᛡᛇ•ᛠᚻ•ᚹᛗᚣᚦ
ᚢ•ᚻᛏᚦᚱᚻᛝ•ᛚᛝᛋ•ᚫᛠᚷᛋᛚ•ᛋᛉ
ᚩᚻᚹᛞᛗᛖᛗᚪᚠ•ᚳᚣᚳᚫᚾ•ᛏᚦᚷ•ᛁᛂᛁ
•ᚳᛞᛡᛉ•ᚻᚫᚫᛠᚷ•ᛠᛝ•ᚠᛏᚩᚱᛞᚳᛇ•ᚠᚢ
ᛉᛠᛒᚩ•ᛉᛁᚣᚷᛋᛋᛒᛠ•ᚩᛁᛈ•ᛁᛂᛁᚩᛖ•ᚻᛠᚻ

|| page 4 // 273 runes
ᛚᛡ•ᚣᛈᛉᛁᚹᛗᚳᛁ•ᛚᚷᚠᚾᛡᚳᛉ•ᛈᚩᚱᛡ•ᚻ•ᛂ
ᛗ•ᛟᛉᛝ•ᚢᛗᛇᛠᚷᛝ•ᛝᚹᚳ•ᛚᛝᚢ•ᛉᛂᚠᛟ
ᚢ•ᚷᛠ•ᛗᛉ•ᚪᚹ•ᛚᚢᛉᚫ•ᛗᛞᛝᚻᚱᚣ•ᚻᚪ•ᚷᛁ
ᚠᚷᚳ•ᚫᛝᛂᛇᛉᛡ•ᚾᚦᛒᚢᛂᚱ•ᚹ•ᚷᛚᛟᚷ•ᚦᛇᚠ•
ᚦᛠᛁ•ᛋᚷ•ᚷᚣ•ᛠᛡᛈ•ᛡᚫᛚ•ᚦᛠᛉᚫ•ᛖᛗ
ᛖᛏᛟᛏ•ᛠᚳᚠ•ᚳᛠᚷ•ᚦ•ᛈᛁᚳᚾ•ᛇᚣᛝᛂᛝ
ᛗᚹᚳᚾ•ᛒᚣᛠ•ᚩᛟᚷᚱ•ᛗᚱᛗᛈᛡᚹ•ᚫᛟᚦᛟ•ᛈ
ᛉᛂᛚ•ᚱᛚᚱᛒᚪᛈᛏᛉᛚᛏ•ᛗᛉᛁ'ᚹ•ᛂᛋᛟᛗᚾᚱ
ᛖᛒᛋ•ᚳᛏᛚᛟ•ᛋᛒᚠᛉᚦᚪᛠᚢ•ᛇᛉ•ᚱᚷᛏᛇᛠ
ᛁᛂᛒᛟ•ᛉᚷᛂᛝ•ᛠᚦ•ᚱᛝᛒ•ᚾᚢᚪᛝᛒᛈᛋᛠ•ᛈ
ᚹᚩᚻᛖ•ᚫᛇᚷᚾᚫᛋᛇ•ᚩᛈᛗ•ᛖᛉᛡᛒᚹ•ᚢᛖᛁᛞ•
ᛈᚪᛇᚷᛋᚳᚷᛞᛈᚣ•ᛡᛚᚦᚱ•ᚳᚢᚠᛇᚦ•ᛉᛖᛚ•ᚢ

|| page 5 // 274 runes
ᚱᚫ•ᛉᚻᛂᚫᛗᛚᚠ•ᚳᛝᛞ•ᛁᛝᚩ•ᚳᛋᛟᛖᚣᛟᚻᚢ•
ᚷᛞᚹᚪ•ᛖᛋᚷᛝᚠᛉ•ᛞᛉᛂ•ᛠᚻᛁ•ᚦᛈᛉᚣ•ᛡ•
ᛇᛞᛇᛝᛇᛝ•ᛖᛠᛞᚱ•ᛚᛇᛏ•ᛉᛏᚣ•ᚱᛇ•ᛈᛝᛇ
ᛈᚩᛁᛚᛖᚠ•ᛇᚫᚪ•ᚣᛝᚠᚣ•ᚠᛞᚾᛚ•ᛉᛏᚾᚫᛋ•ᛁᚩ
ᚳᚢ•ᚣᛠᚾᛏᚷᚳᚪ•ᛉᛡᛇ•ᚦᛂᚣᛂᛚᛟᛖᛚ•ᚣ•
•ᛈᛡ•ᛖᚹᛟ•ᛇᚾᚪ•ᚻᛞᛇᛋ•ᚦᚣᛇᚦᛂᚦᚱᚢ•ᚳᛠ
ᚪ•ᚢᛂᛡᛈ•ᚣᚫᛇᛋ•ᚻᛠᛏᚣᛞᚣᚫᚠᚻᚩ•ᛟᛗ
ᛉᛟᛂᚷ•ᚢᛡᚱᛡᚳ•ᛁᚠᛟ•ᛁᛂᛈᛒ•ᛖᛝᚣᚦᚩᚫᚣ•
ᛠᛉᛡᛖᛚ•ᛁᚱᚣᛞᛠᛂ•ᚫᚳ•ᛗᚷᛁᚫᚢᚪᚫ•ᛂᚪ
ᚻᛈ•ᚠᛞᛚᛁᛠᛈᛟᚣᚩ•ᚢᛒᚷᛝᛟᚢᛝᛋᚢᚳ•ᛏ
ᛞ•ᚫᛈᚩᛂ•ᛒᚻᚱᛁᚷᚻᛂ•ᚣᚹᛗᛇᚾᚫ•ᛞᛝᛇ•ᛟᛂ
ᛝᚳᛖᛠ•ᛉᚪᚱᚣ•ᚪᚢᛏ•ᚳᛈᚳ•ᚩᛇᛟ•ᚫᛈ•ᛏ

|| page 6 // 206 runes
ᛉᚳᚻᛞᛇ•ᛉᛒᛠ•ᚫᚾᛂ•ᛠᚪᛒ•ᛖᛠᚹ•ᛡᛚ•
ᚹᛁᛡᛋᛈᛚᚦᚪᛋᛂ•ᛡᛞᚣᚱᛞᛟ•ᚦᚱᛉᛟᚹ•ᚣᛞᛏ•
ᚷᛚᛡᚻᚹᛗᚱ•ᛝᚠᚳ•ᚱᚫᛁᛒᚷᛈᚣ•ᛞᚪᚱᚪᛉᛟ•ᚢ
ᚩᛁᛠ•
ᚪᛏᛉᛒ•ᛗ•ᚷᛡᛋᛒ•ᛉᛇ•ᚷᚾᛠᚫᚷᛝᛞ•
ᛉᛖᛏᚩᚷᛡ•ᛝᚻᛏ•ᚳᛁᚣ•ᛂᛏ•ᛟᚩᚻᚱᛂ•
ᚳᛖᛡᚩ•ᛞᚪᛏᚣᚢᚾᚱᛇ•ᚫᚫᛁᛖᚠᛝᚦᚻ•
ᛉᛁᛟᛋᛁ•ᛗᚪ•ᚢᛂᚳᛋᚹᚾᚣ•ᚩᛈᛉᚱ•ᛚᚫᛟᛏᛡ•ᛂ
ᛈᛗ•ᛞᛋᚠᛗ•ᛟᚹ•ᛞᛚᛏ•ᚷᚱ•ᚩᚢᛋᚻᚪ•ᚣᛇᛡᛚ
ᚢᚻ•ᛈᚹᛂᛚᚷᛒ•ᛗᚢᛂᛗ•ᛇᚾᛇ•"ᚫᛚᚪᛚᚷᚪ•ᛋ

|| page 7
ᚻᛝ•ᛚᚦᛒ•ᛋᚳᚢᚳᚩᛡ"•ᛚᚳᛂ•ᛉᚪᚾᛇᛉ•ᛠ
ᛗᛈᚢ•ᛗᚠᛚᛠᛝ•ᛒᛉᛁ•ᛚᚦᚱ•ᛠᛡᛁᚳ•ᚩᛉᛖ
ᛞᛡ•ᛏᛋᛗᛠᛂᛈ•ᛠᛟ•ᛡᚫᚦᚹᚻᛈᛇᚪᚷᛈᚻ
ᛠ•ᚳᛚᛠᛈ•ᛡᚣᚾᛁ•ᛚᛡᛁᚳ•ᚫᛇᚾ•ᚫᚳᛡᚱᛡᛚ
ᛞ•ᛒᛟᛝᛡ•ᛉᛗᛝ•ᚳᚻᛟᛠᚾᛈᚳᚦ•ᛁᛇᚦ•ᛇᚢᚩ
•ᚦᛈᚪ•ᛡᛚᛟᚹᛡᛈ•ᛂᛗ•ᚷᛒᛈᛋᚾᛇ•ᛏᚩᚷᚢᚾᚫ
ᛖ•ᚾᚣᛁᛖ•ᛞᛝ•ᛞᛝ•ᛚᚢᛚᛉ•ᚪᚾᛝ•ᛇᚪᛂ•ᚻ•ᛞ
ᚹᛈᚫᚹᚫ•ᛇᛁᛚᛝ•ᚦᚾᚳ•ᛒᛁᛏ•ᛠᚳᚩᛇᛖᛝ•ᚳᚻ
ᛟᚻᚫᛂ•ᛟᛉ•ᛁᚳᛖᛏᛋᚹᛖᚾᛡᚣᛂᛗ•ᛖᚳᚪ•
        •ᛞᚩ•ᛟᛏᚦᚫ•ᚳᚹᛂ•ᛉᛠ•ᚷᛠᛗ•
                (5 dots)

|| page 8
ᛉᛁᛉᛗ•ᚢᛉᛗᚳᚦᛈᚩᛒ•ᛡᚾᛏ•ᛠᛉ
•ᛈᚱᚣ•ᚩᚳᛠᛗᛝᚷᛉᛚᚢ•ᛝᛁᛏᚩ•
ᛂᚠᛝ•ᛋᛚᚾᛞ•ᚩᛗ•ᛇᚫ•ᚱᛞᚹᛏᛂᚦ•
ᚣᚦᛋ•ᚫᚣᛖᛋᛉᛟᛒ•ᛠᚱᛇ•ᛈᛝᚢᛈ•ᚩᚦᛉ•ᚪᚻ
ᛟᚱᛝᚢᛖᚱ•ᚣᛚᛉᛚ•ᛡᛚᚱ•ᛈᚹᛇᚾ•ᛠᚪᚱᛉᛝ•
ᚣᛋᚻᚢᛚ•ᛋᚣ•ᚷᚾᚢ•ᛇᚫᚾᚾ•ᚩᚫᛖᛞ•ᚪᚩᛂᛡᚢ
ᚪᛉ•ᚱᛉᛡᛟᛂ•ᛗᛁᛇᛚᛠᚻᚦᛗᛠᚣ•ᚷᛒᚳᛈ
ᛉᚳ•ᚾᛟᛟᛋᚷᛗᛈᛖᛏᛚᚾᛂ•ᛂᚳᛝᚩ•ᛁᚹᛚᛠᛒ•
ᚠᚪᛖ•ᛏᛝ•ᚾᛈᛠᚩᛏᚦ•ᚻᛝᛉᛈᚻᛈᚳᛈᚱᚢ•ᛚ
ᚠᛖᛟ•ᚷᚪᛒᚠᛁᚫᚠᚢᛟ•ᛗᚠᚣᛝᛂᚳ•ᚻᛏᚠᛚᚫ•ᛖ
ᚦᛋᛚᚩᚢ•ᚫᚩᚪᛗᛟᚢᚹᛇ•ᛒᚾᛋᛚᛝᛂᛟᚾ•ᛗᛚᛒ•
ᛟᛏ•ᚾᛞᛒᚩᚾᚦᛡᚻᛟ•ᚱᛈᚾᚠᛈᛞ•ᛋᚩᛁᛠᚣᚾ•ᛇ

|| page 9
ᚣᚹᚫᚷᛂ•ᛝᛗᚪᚹᛈ•ᚪᚢᚾ•ᛈᛡᛗᛖᛞᛟ•ᛁ•ᛉ
ᛡᛗ•ᚠᛈᚩ•ᚦᛉᛞ•ᚩᛞ•ᛋᛈᛉᛡᚷ•ᛟᚻᚠᚦᛉᛂ
ᛟᛋᚦᚣᚦ•ᛏᚻᛋᚣ•ᚻᛠᚷᛚᚫᚱᛏ•ᚢᛋᛟ•ᚦᚠᚠᚣ
ᛟᛡ•ᛇᚳᚣᛒᛚᛝ•ᛠᚱᚻᛞ•ᛂᚣᛏᚫ•ᚻᛞᚳᛋ•ᛉ
ᚠᛞ•ᚦᛗ•ᚳᛇᛝ•ᚫᚾᛡᛠᚹᛁᛡ•ᛒᛗᛝ•ᚷᛈᛁᚳ•ᛠ
ᛚᚷᛉᚣᚣᚱᛂ•ᛉᛁᛂᚢ•ᛖᚣ•ᚪᛝᛈ•ᛡᚫᚳ•ᛖᛠ
ᚹᛒᚦᛟᚠᛗ•ᚫᚱᚠᚩᛏ•ᛝᛉᛞ•ᛗᛖᛡ•ᚩᛈᛋ•ᛇᛞ•
ᛇᛟᚫᚾ•ᚷᛗᚣᛁᚫᛁᛂ•ᛈᛂᚩᛡᚷ•ᛈᚳᛂ•ᛚᛖᛡᚻᛚ
ᚷᚱᛇ•ᛟᚣ•ᛠᚣᛗᚹᚾᚹ•ᚠᛁᛂᚢᛗᚫᚾᚳᛗᛠᛁ•
ᚩᛇ•ᛒᛚᛞ•ᚾᚹᚠᚾᛒᚱ•ᛋᛟᚦᛡ•ᚪᛡᛏᚷᚷᚹ•ᚪᛋᛡᚦ
ᛋᚦᛋᚠᛗᚷᛞᛠ•ᛝᛈᚩᚪᚣᛝᛈᛋ•ᛟᚾᛇᚪᛖ•ᚻᚢ
ᚷ•ᚩ•ᚢᚦᛏ•ᛒᚷᚣᛝᚠᚣᛁᚻ•ᚹᛡᛠᚱᚫᚹᛡᛞᚪᚦ

|| page 10
ᚳ•ᛉᚢ•ᛈᛏᛋᚢᛖ•ᚷᚦᛡᛚ•ᛖᛋᛠᛝᛉᛈᛉ•ᚾ
ᛟ•ᛞᛟᛒ•ᚾᚹᚢᛁᛇᛚᛞ•ᛁ•ᚦᚣᚷ•ᛟᛈᛡ•ᛖᚪ•ᚠᛋᛉ
ᛞ•ᛖᚷᚦᛠ•ᚾᛋ•ᛞᛟᛗᛖ•ᛗᚾᛉ•ᚹᛒᛠᛈᛟ•ᛗ
ᛉᚫ•ᛂᚩᛞᚻᛡᚷᚠ•ᚣᛗ•ᛁᚷᛉᚻᚹ•ᚾ•ᛋᛗᚷᛠ•
ᚣᛚᚱᛂᛗᛉᚣ•ᛇᚱᚢᛟ•ᚣᚦᚢᛟᚩ•ᚱᚢᚹ•ᛁᛒᚳ•
ᛠᛏᛞ•ᛚᛖᛋᛂ•ᚳᛟ•ᚷᛞᛡ•ᚢᚹᛝᚻᚫᚢᛈ•ᛏᛈ
ᚩᚣ•ᚾᛇᚦᛟᛏᛇᚳᚠ•ᛒᚪᚾ•ᛗᚦᛝ•ᛟᛠᚢᛁᚪ•ᚾᚻᛝ
ᛉᚩ•ᛇᛁᛡᚠᛟᛒᚦᚠ•ᛋᛒ•ᚠᛞᛇ•ᚩᚦᛏ•7•ᚷ•ᛚᛂᛖᚫ
•ᚣᛁᚫᚹᚻ•ᚫᛏ•ᛁᛉ•ᛉᚻᛞᚩᛠ•ᚫᛋᛝᛚᛝ•ᛖᚩ
ᚻᛗᚩᛟᛒᚦ•ᚱᛚᛋ•ᚳᚻ•ᚪᛡᚾᛇᚱᛉᚦ•ᚣᛉᚻ•ᛡᚾ
ᚢ•ᛗᛉᚹ•ᛖᛈᛖ•ᚩᚳᛈᚳᛞᚪᛉᚢᛗᛝᛟ•ᛋᚾᛟ
ᛉ•ᚠᚱᚳᛒᚢᛂᚱᚫᛝ•ᛒᛋᛟᛠᛡᚪᛚ•ᛏᛟᚾᚫᛟᚪ•ᛁ•

|| page 11
ᛡᛋᚳᛖ•ᚹᛒ•ᚾᛚᛝ•ᚦᚾᛁᛠ•ᛒᛡᚱᚠᛖᛁᚹ•ᚾᚠᛗᚢ
ᚷᚾ•ᛂᛚᚳᚱ•ᛝᚣᛉᛋᚪᛟᚱᛉᚳ•ᛒᚫ•ᚠᚢᚪᛖᚪᚹ•
ᛚᚾ•ᛂᛉ•ᚻᚦᛉ•ᛗᛚᚾᛖ•ᛏᛝᚦᚪᚩᚢᛗᚣ•ᚠᛝᚪ•
ᚻᛡᛇᛡ•ᛚᛏᛁ•ᛇᛁ•ᚳᚢᚢᛖ•ᚳᛒ•ᚫᛇᚠᚦᚳᛚᚩᛉᛚ
ᚩᛚ•ᚠᚳᛠ•ᚪᚠᛟᚫᚠ•ᚾᚳ•ᚢᛒᚱ•ᚾᛇᚩᛉ•ᛁᚳᛟ•ᛞ
ᛉᛠᛝᚠᚱᛡᚳᛇ•ᛉᛟᛈᛗᛞᚳᚦᚹᛈ•ᛡᚻ•ᚾᚦ
ᛇᛏᚹᛖᚢ•ᚫᛇᚦ•ᛝᛟᛏᚳᚷᛒᛠ•ᚪᚳᛒᚪᚩᚹᚫ•ᛉ
ᚢ•ᚫᛖᛒ•ᛇᛏᚢᚩ•ᛟᛞᚠᚢᛋ•ᛡᛂᛗᚦᛠᛏᚪ•ᛒ
ᚹᚣ•ᛏᛂᚻᚦᚫ•ᛚᚪᚱᚫᛟᚦᚩᚾᛟᛁᛖ•ᛡᚠᚷ•ᛋᚠᚦᛏ•
ᛠᛡᛠᛁᚢᛡᛇᛝᛞ•ᛉᛏᚠᛒᚻᚢᛋᚳᚱᛇᚹ•ᛇᛈ
ᛋᚢᛚᚪᛈᚢᚳᛖᚠᛞᛉ•ᚦᛠᛇᛝᚻ•ᚣᚱᛗ•ᛟᚾᛚ•
•ᛈᚹᛞᚱᛂ•ᚪᛝᛞ•ᛁᚦᛏᚷᚢᚹᚳᚻᛖᚩᚪᛖ•ᛉᚪᚢ•

|| page 12
ᚳᛁ•ᚱᚳᚹ•ᛠᛇᛏ•ᚦᚳᚻᚢ•ᛡᚹᛟ•ᚷᛇᛈ•ᚢᛈᚦ•
ᚷᚣᚢᚪᛗ•ᚹᚳᛖᛝᚱᛠᛞᛏᚻ•ᛂᛁᛈᚻᚠᛉᛝᛈ
ᚾ•ᛒᚳᚪᚷᛋᛟ•ᛉᛠᛈᚪᚩᚷᚠᚳᛡᛂ•ᛠᚢᚠᛋᛚ•
ᚣᛚ•ᚢᛒ•ᛉ•ᚱᚣᚾ•ᛁᛠ•ᛚᚹᛋ•ᚠᚦᚪᛠ•ᛈᚷ•ᛏ
ᚷᛡᛟᛠᛡᛒ•ᛉᛂᛒ•ᛖᚾ•ᛞᚠᛠᛗ•ᚦᚪᛗᚠᚪ•
ᚻᛡ•ᛗᛁᛏᛟ•ᚻᚣᚹᛏ•ᚠᛒᛁ•ᚫᛖ•ᛝᛒ•ᛚᛏᛠᛉ•ᛟ
ᛋᚾᛉ•ᚹᛏᛠᛏ•ᛖᚢᛡᛖ•ᛉᚾᛇ•ᛟᚳᚾᚠᚩᚾᚠ•ᚳ
ᚪ•ᚷᚱᚩ•ᛠᚦᚹᚣ•ᛒᛁ•ᛝᛇᛟ•ᚣ•ᚷᛗᚩ•ᛁᚷᛂ•ᚩᛇ•ᚢ
ᛁᛉᛝᚪᚱᛉ•ᛏᛂᛞᛈ•ᚾᛝᚷᛏᚢ•ᛚᚷᚳᛏ•ᚢᛒᛇ•
ᛈᚩᚣᚢᛏ•ᛡᚫᛏᚹᛏᛇ•ᛡᚫᚫ•ᚦᛏᛝ•ᛠᚳᛁᛉ
ᚻᚦᚣ•ᚻᛚᚾᛋᚱᛡᚫᛚᚫ•ᛖᚷᚻ•ᛞᚾᚻᛠ•ᚠᚪᚹᛖᚠ
ᛂ•ᛒᛇᚱᚹᛏᛉᚾᛠᛖᛁ•ᚠᚾᛡᚳ•ᛋᛟᚹ•ᛈᚷᛝᛟ•

|| page 13
ᚷᚦᚠᛂᚷᚳ•ᛒᛁᛗᛚᛇᛠᚹ•ᚾᚫᚹᚷ•ᚩᚻᚪᛏᚾᛂ•ᚣ
ᛝᛏᛡᛝ•ᚢ•ᚩᚠᚣ•ᛗᚢᛒ•ᛏᚠᛈ•ᚱᚩ•ᛉᚩᛝᛒ•ᛖ
ᛏᚩᛉ•ᚣᛗᚠᛉ•ᛖᚩᚫᚷᚣᛚ•ᚩᛇ•ᚠᛋᚫᛇᛗ•ᛡᛟᚹ
ᚾᚩᚢᚹᛖᛁ•ᚾᚦᚫᛠᚪ•ᛠᛚ•ᚹ•ᛡᚩ•ᚢᚦᛗ•ᛝᛚᚪᚠ
ᛝ•ᛚᚠᛚᚳᛒᚢᛝᛉ•ᚣᛡᚪᚷ•ᚹᛟᚪᚻᚹᚢ•ᛖᛠᚷ•
ᛁᚪᛏᛂᛗ•ᛏᛖᛁ•ᚣᛡ•ᚦᚾᚠᚦ•ᚩᛈᚻᚪ•ᚻᛋᛠ•ᛡᛉ
ᚪᚫ•ᚠᚣᛞᛠᛇᚠᚫ•ᛏᛗ•ᚳᛡᚷ•ᚱᚢᛞ•ᛂ•ᛋᛡᛇᚩ
•ᛚᛟ•ᚦᚱᚫᛒᛚᚦ•ᛖᚪᚦᛗᛚ•ᚦᛉᚪᚱ•ᛟᛖᛒᛂᚱᛂᛖᛁ
ᛈ•ᚪᛖᛠᚠᛂᚢ•ᛞᚹᚦᚣ•ᛉᚷᚩᚳᛡ•ᛇᛗᛞᚳᛏ•
ᚻᛚᚦᛝᛖᛗᚱ•ᛒᚷᛞᛉᛗᛒᛉᚳᛝᚦᚣᛞᚫᛠ•ᛋ
ᛏᛗᛏᚻᚹ•ᛇᚳᚪᛞ•ᛠᚢᛒᛉ•ᛡᛁᛡᛚ•ᚷᛋᚦᛞ•ᚠ
ᚢᚩᛠ•ᛚᛋᚣᛏ•ᛋᚪᛞᚫᚹᛂᛞ•ᛋᛈᛋᛂ•ᚪᛖᛁᛇᛒᛟ

|| page 14
•ᛏᛂ•ᚠᚩᛚᛞ•ᚾᚷᚳ•ᛚᚷᛗ•ᛠᚦᚢ•ᛟᚻᚾᛟᚣᛡ•
ᛇᚻᚣᚪᛈ•ᚾᛋ•ᛞᚫᛠᚳᛉᛂ•ᚦᚹᛋᚱᚦᚫᚾ•ᛡᛚᚣ
ᚫᛋᛖ•ᛟᚣᛝᛡ•ᚦᚣᚷᛇᚱ•ᛋᛠᛏ•ᛡᚳᛉ•ᛠᚷ•
ᚳᛒᛋ•ᚹᚾᚻᛖᛝᛋ•ᚩᛡᛗᛉᛝ•ᛉᚦ•ᛠᛞᚳᛒᚷ
ᛉᚹᛝᚢ•ᛉᛞᛈ•ᛉᛡᛈᛟ•ᚾᛡᚠᛡᚢᛋ•ᛉᚪᛖ
ᚻᚱᚣᛠᛇ•ᛒᛟ•ᚪᛝᛡ•ᚳᚱᚳᛈᚩᛏ•ᚻᚣᚫᛁᛋᚩᚦᛚ
•ᛟᛚ•ᛋᚪᚢᚪᛈᚻ•
                    (insect)

|| page 15
        •ᚠᚢᛚᛗ•ᚪᛠᚣᛟᚪ•
3258    3222    3152    3038
3278    3299    3298    2838
3288    3294    3296    2472
4516    1206     708     1820
ᛚᚢᛝᚾ•ᚳᚢ•ᛒᚾᛏᚠᛝ•ᛁᚢᛁᚢ•ᛟᚫᛂᚠᚫ•ᚢ
ᚷᛉᛇᛈᛉ•ᚣᛠᛚᚪᛉ•ᛟᛉᛡᚦᚻᛠ•ᚾ
ᚪᚳ•ᚢᚷᚾ•ᛈᛖᚾᚦᚩᚢᛁᛡᚱ•ᛏᛁᛒᛇᚳᚠᚷ•ᚩ
ᚦᚪ•ᛁᛈᚻᛡᛒ•ᚹᛈᚻᚱᛞᛉᛏᚢ•ᚣᛒ•ᚠᛋᛉᚢ•ᛗᛁ•
ᛡᚱ•ᛝᚢᚠᚦᛝ•ᛈᛟᛒ•ᚻᚷᚻᛡᛚ•ᚩᛞᚪᚳ•ᚦᛈᛞᛋ
ᛡᚻᛇᛚ•ᚢᛏᛋᛞ•ᚦᚢᛞᛝ•ᛚᛉᛝ•ᛏᚩᛚ•ᚪᛚ•ᚣ•ᛟ
ᛡᛉᚣ•ᛒᚻᚫᛂᛡᛁ•ᚱᚦᛚᚠ•ᛠᚾᛝ•ᛉᛗᛒᚩᛠᛈ•

|| page 16(Confirmed)
ᛖᛞᚪᚫᛏᚩᛠᛖᛠᛉᚳᛠᛏ•ᚩᛞᚳᛠᚾᚳᚦ
ᛗ•ᛞ•ᚷᛁᚳᚹᛟ•ᚪᚢᛒᚳᚫ•ᚦᚱ•ᛋᚣᚪ•ᛏᚦᛒ•ᛝᚹᛋᚱᛁ
ᛝ•ᛒᛁᚪᚫᛚ•ᛏᚱᛡᚫᚠᛞ•ᛝᛂᚩ•ᛡᛠᛉ•ᚪᛡᚻ•ᚱᛒ
ᛁ•ᛞᛡᛂᚪᛈᚱᛋ•ᚢᛡ•ᚻᚷ•ᛚᛟᚠ•ᚻᚷᚫᛋ•ᛈᚹᚷᚷ
•ᛗᛟᚪᚾᚱ•ᚩᛟᛞ•ᚷᛟᚠᛠ•ᛡᚷᚳ•ᛉᛠᚠᛚ•ᛒᚫ
ᛈ•ᚩᛂᛈ•ᛂᛗᛠ•ᚾ•ᛉᚪ•ᛡᛖᛋᚷᚫᚦ•ᛂᚷᛉᚩᚦ
ᛂᚳᚣ•ᚢᛂᚦᛂᚪᚾᛏᛒ•ᚳᛈᛡᛂᛋᚫ•ᛋᛗ•ᚻᛞᛠ
ᛉᚢᛗ•ᛏᛠᛖᚣᚠ•ᛂᛏᛋᛗᛞᛟᛁᛝᚪᛉᛖᛈ•ᛚ
ᛇᛞᚦ•ᚪᛋᛉ•ᚳᛒᚢᛟᚳᛒᛚᚾᛟᛝᛉᚩ•ᛖᚳ•ᛝᛟ
ᚳᛁᛒᛈᚫ•ᚣᛖᛂᛝ•ᛞᚢᚱ•ᛉᛟᚩ•ᚠᚹᚩ•ᚣᛁᚠᚢᛇ•ᛚ
ᛏᛈᛒᛗ•ᛇᛝ•ᚢᚳᚱᛡ•ᛖᚩᛁᚣᛂᛏᛡ•ᛖᚠᛇᚠᛚ•ᛁ
•ᚣᚷᚠᛝᛡᛈᚷᛒ•ᛡᚩᚷᛡ•ᛟᚾᚹᛡᛈᛟ•ᚦᛈ•ᛟᚷ

||Page 17(Confirmed)
ᛚᚦ•ᛈᛞ•ᚦᛇᛒ•ᛡᚪᛒᚪ•ᚾᛗ•ᚳᚾᛖᛡᚹᛝᛏᚱ•ᛝᚫ
ᛚᛟᛁᛇᚣ•ᛝᛡᚾᛏ•ᚱᛁ•ᛋᚪᛖ•ᛇᚢ•ᛝᛞᛂ•ᚠᚱᛠᛗ
ᛠᚪ•ᚫᛈ•ᛏᚠ•ᛖᛏᚷᚾᚠᛁᚠ•ᚱᚻᚱᛇᛒ•ᚻᛈᛏ•ᛇᚱ
ᛝᛡᛒᚹᛚᛏ•ᛗᛉᚦ•ᚾᛂᚳᚫ•ᚷᛈ•ᛋᛖᚩ•ᚢᛝᚩ•ᛏ
ᛈᛁᚣᚾᚪ•ᛏᚹ•ᚠᛗᚾᛟᚾᚳᛒ•ᛂᛉᛡ•ᛟᚪᛁᚫᛝ•ᛒ•
ᛉᛏᛂᛁᛋ•ᛠ•ᚳᛖᚱᚦᚣᚩᚣ•ᛈᚫᚷ•ᛡᛂᛁᚩ•ᚱᚦ
ᛠ•ᛇᚦᚩᛉ•ᚾᚱᚾᚫᛁᛉ•ᛁ•ᛝᚣᚫᛡᚫᛗ•ᚹᛖ•ᛇᚷᚻ
ᛖᛗ•ᚷᚢᛞᚹ•ᛂᚻ•ᛉᚱᚢᛂᚢᚾᛈ•ᛋᚣᛂᚫ•ᛈᚳ
ᚣᚳᛒᛡ•ᚫᛟᚪᚠ•ᛏ•ᚷᚩᛇᛟ•ᛁᚱᛗ•ᛖᛉᛟ•ᛗᛇᚫᛟ
ᚦ•ᚱ•ᛞᛁᚢᚦᚻᛗᛡᚾ•ᛁᚦᚻᛚ•ᛏᚳ•ᚪᚦ•ᚠᚪᚫᚣᚻ
ᛠ•ᚦᚠᛋᚠᛝᚷᚱᛈ•ᛏᛂᛉᛟ•ᚷᛚᚻ•ᚩᚪᚦᛏᚳᛁ•ᚠ
ᚣᚢᛁᚹ•ᛟᚪᚣᛁᛠᛂᚪ•ᛟᛝᚦ•ᛟᚠᚦᚾ•ᛇᚷ•ᛠᛚᛒᚠ

||Page 18(Confirmed)
•ᛠᚪᛂᛇᛠᛚ•ᚱᚷᛋ•ᚹᚩᛒᛁ•ᛠᚳ•ᛁᛞᛂ•ᛖᛗᚱ•ᚷ
ᚪᚻᛠᛚᚷᚩ•ᛉᚻ•ᛡᛝ•ᛞᚱᚹᚩᛈᛡ•ᚣᚳᚦ•ᛁᛇᚢᛁ•
ᛟᚦᚠᚳᚻ•ᚩᛁ•ᛝᚾᛁᛞ•ᛏ•ᚫᚱᛝᚫᛈ•ᛠᛞᛇᛉᚳ
ᛠᚩᛟᛖ•ᛗᛈᛒᚦᛝᛋᚢᛡ•ᚻᛡᛏ•ᛉᛇᚷᚠᛡᛡ
ᛟᚢ•ᛡᚦᚣᛞᚪᚫᛝᛒ•ᚳᚩᚷ•ᛏᛞᚦᛁ•ᚠᛒᛖ•ᚦᛟᚳ•
ᚠᚻ•ᛞᚠᚣᛋᚾᛟ•ᛠᛇᛂ•ᛖᛉ•ᚩᛈᛠᛚᚪ•ᛟᚩᚾ•
ᛂᛉᛋ•ᚣᚫᚷᛖᚩᛟᚢᚱᚹᚢ•ᛟᛡᛂᛇᚢᛞᛉ•ᛒᛇ
ᚳ•ᛝᛚᛗᛠᛗ•ᚪᚱᛡᛗᛒᚩᚹ•ᛋᛖᚾᚻᚣ•ᛈ•ᛞᛚᛞ
•ᛈᛏ•ᚪᛞᛚᛉ•ᛟᚱᚾᚹ•ᛠᚠᛁ•ᛟᚾᛒ•ᛇᛟᛖᛝᚳᚠ
ᛏᛞᛏ•ᛇᚫ•ᛝᚢ•ᛠᛡᚫᛖᛟᛞᛝᛠ•ᚠᛗᛒᛚ•ᛏ
ᚢ•ᛈᚱᚹᛟᛇᛉ•ᚳᛟᛈᛏ•ᚢᚠᚳᛞ•ᛂᛋᛞᛈᛚ•ᚠᛝ
ᚱᛂᚣ•ᛞᛗᛖᚣ•ᚢᛖᛝᛠᚳᛞᛈᚩᛠ•ᛏᛒᚳ•ᚷ

||Page 19(Confirmed)
ᚾᚩᛟᚾᚠ•ᚩᛁᚠᚢᛋᚾ•ᛞᚹᛠᛇᛈ•ᚱᚩᚩᛂ•ᚪᛟ•ᛇᛠ
ᛂᛁ•ᛟᛂᛞᚢᚳᛝᚩ•ᚱᛝᛋ•ᛂᛁᛈᛉᛖ•ᛞᛁᚾᛗᛗᚳ
•ᛉᚩᛁᛂᛞᚳ•ᚢᚪᛇ•ᚦᛡᛇᚻᛠᚣ•ᛠᚻ•ᚠᚩ•ᛡ
ᛠᛋᛟᚪ•ᚹ•ᚫᚻᚩᛂᚢᚱᚩᚣ•ᛏᚫᚷ•ᛂᛚᛂ•ᛝᛏ
ᛖᛒᛚᛉᚻ•ᚱᚩᚫᛇᛈᛂᛠ•ᚳᛈᛚᚣᛈ•ᚪᛠᚻᚻᛋ
ᚫ•ᚩᛝᚹ•ᛋᛞᚠᚳᛠ•ᚩᛇᚫᚪᚩᚹᛗᚪ•ᚣᚫᚷᚫᛂᚱᚹ
ᛞ•ᚱ•ᚦᚷᚳᚹ•ᚾᚷᛡ•ᛚᛒᚳ•ᛂᚷᚹᚹ•ᚱᛁᚠᛏ•ᚠᛚ•ᛋᛂ
ᛚᚪᛂᚱᛏ•ᛞᚷᚫᛠᚠᛉᛞ•ᚫᚷᚻᛏ•ᛗᚣᛈ•ᛏᛒᛟ
ᛝ•ᛂᛋᚾ•ᛝᛁᚹ•ᚦ•ᛠᛝᛞᚾᛟᚷᚫ•ᛁᛗ•ᛝᛉᚱᛞᛋ
ᛗ•ᚠᚫᚹ•ᛟᛋ•ᚦᛞᛞᛈᛝ•ᛞᛡᚷᛒ•ᚪᛟ•ᚦᛡᛒ•ᚪᚹ•
ᚾᛉᚫ•ᛚᛈᛁ•ᛒ•ᚠᚾᚠ•ᛡᚩᛏᛞᚾᛋᛖᚳᚻ•ᛖᚻ•ᚢᛟ•
ᚪᛖᛗᛝ•ᛠᚫ•ᛈᚩᚪᛞ•ᚠᚫᚻ•ᚠᛏᚦᛂᛚᛂᛒ•ᛗᛇ

||Page 20(Confirmed)
ᛈ•ᛂᚢᛒ•ᚷᛁᛇ•ᛈᛉᚣ•ᛈᛟᚦᛞᚱᛠᚪᛡ•ᛝᛡᛒᛚ
ᚻᚦᚫᛉ•ᛟᚫ•ᚪᛇ•ᛉᚳ•ᛠᚠᚫ•ᚢᚣᚦᛋ•ᚠᛝᚠᚱᚹ•
ᛟᛒᛗᚷᛞᚾᛡ•ᛞᚪ•ᚻᚣᛇ•ᚱᛚ•ᛖᚣᛇᚻᛠᚩ•ᚢ
ᚳᚱᚻ•ᛡᛟᛗᛠᛝᛂᚦ•ᛂᚢᛁᛇ•ᛂᛁ•ᛖᚷᛁ•ᚪᛇᛏ•ᛝ
ᛡᚳᛚ•ᛇᚠᛗᚪ•ᚷᛚᛒᛋ•ᛉᛞᚫᛟᛋᛚ•ᚹᛏᛠᛗ•ᛚᚦ
ᛗ•ᛝᚦ•ᚣᛈᚠ•ᚪᛞᛚᚪᛖᛚᚩ•ᚱᚷ•ᛚᚳᛇᛏᚷᚣᛟᛗ•
•ᚪᛁ•ᚷᛂᛒᛡᛗ•ᛞᛈᚪᚳᛠᚷᛋ•ᛏᛈ•ᚩᛋᛏᛗᚱᚣ
ᛋᛉ•ᛁᛂᛚᛝᛚᛁ•ᛉᚢᛠᛗᛇᚢᛋᚻ•ᚳᛉᛂᚩ•ᚠᛂᚠ•
ᛁᚣᛁᛟ•ᛏᚷᚱᚦ•ᛡᛒᛋᚳ•ᛇᚢᚷ•ᛚᚱ•ᛁᛗᚱ•ᛗᛝᚻᛈ
ᚫ•ᛝᛋᚫ•ᛖᛈᛁ•ᛒᛇᚹᚫᚢᛂᚳᛒ•ᚦᛋᚹᚦᚫ•ᛡᛟᚷᛚ•
ᛞᛚᚢᛟᛡ•ᚱᛞᚱᛒᛂᚳᚢᛠ•ᚩᛉᛉ•ᛝᛡᛂ•ᛁᚫᛟ
•ᛖᛗᚹ•ᛖᛉᚦᛗᚪᛋᛉ•ᛞᚦ•ᛡᚢ•ᛉᛗᚫᛋᚳᛖ•

||Page 21(Confirmed)
ᚳᚫᛠ•ᛞᚳᚷ•ᚩᛁᛇ•ᚾᛟᚷᚣᚳᚦᚳᚦ•ᛗᚣ•ᛈᚪᛒ
ᛈ•ᚻᚢᚻᚾᛏᚫᛒᛇᚩᛁᛈ•ᚫᚩ'ᚣ•ᛡᚣᛗᚷ•ᚠᚱᛡᛚ
ᛏ•ᛖᛟᚩᛈᛚᚩᚷᛁᛟᛠ•ᛞᛖᚳᛗᛁᚣ•ᛈᛚ•ᛁᚹᛋᛂᚹ•
ᛟᛡᚪ•ᚦᛖᚩᛂᚷᛋᛝᚣᛗᛟᚻ•ᛗᚠᚦᛉᚦᚫᛋᛈᚣᚩ
ᚠ•ᛈᛟᛋᛖᚫᛇᛗᛚᛈᚾ•ᛡᚠᚳᚾᚩᛂᛋᛡ•ᚫᛂᚦᚪᛠ
•ᛈᚻᛋᛟ•ᛗᚹ•ᚱᚣᛁᚢ•ᛉᚹᛋᚱ•ᛞᛈᚦᛈᚩ•ᛞᛂᚩ•
ᚢᛈᛖᚪᚫᛉᚫ•ᛏᚱᛟᛏᛒ•ᛠ•ᚫᚳᚾ•ᛖᛝᚦᛂᛂᚠ
ᛚᚾᚩᛒ•ᛉᚷ•ᚪᚩᛚ•ᚪᚢ•ᛞᚻᚳᚹᛚᛡᛞᛇ•ᛟᚩᛡᛚᚳ
•ᛡᚳᛉ•ᛝᛠᛝᚷᛝᛞᛂᛏ•ᛠᛈ•ᚹᛈᛗ•ᛈᚱ•ᚫ
ᛏᛖᚢᛝᚫᛡ•ᚾᛁᛠᚻᚦᚣᛠ•ᚫ•ᚩᛉᛋᚩ•ᛂᚠᛏᚷ•
ᚹᛁᚪᛁᚩᛁ•ᛝᛠ•ᚾ•ᚷᛗᚹᚦᛖ•ᚷᛟᚪᚹᛞᚻᚢ•ᛡᚹ•
ᚣᚷᛉᛒᚪᚾᛝᛡᛂᛡ•ᚠᚷᛈᚦᚠᚦ•ᛁᛈᚪᛝᛋᛞᛟᚩ

||Page 22(Confirmed)
ᛝᛗ•ᛁᚷ•ᛂᚷ•ᚳᚩᚦᛖᚦᛂ•ᚣᚠ•ᚦᚳᛂᛡᛖᚢ•ᛉᛂ
ᚳᚻᛂᚱᛂ•ᚪᚻᚾᚦ•ᛚᚷ•ᚱᚦ•ᛒᚪᚩᛖᚢᛡᛂᚹᛏᚱᚹ
ᛟ•ᚦᚳᛗᚦᚠᚫᚻ•ᛡᚠᛠᚣᚪᚦᛚᛏᛒᚢᛝ•ᛖᛋᛗᚱ•
ᚪᚹᛒ•ᚹᛒᛗᚱᚾᛗᚻᛗᛁᚾᚪᛞ•"ᛡᛖᚩ•ᚾᚹᛡ•ᚢᛂ
ᚦᛠ•ᛚᚳᚷᛚᛇ•ᛟᛠᛠᚪ"•ᛇᛉᚣᚪ•ᚷᛏᚩ•ᛖ
ᚹᛒᛈᚷᛝᛒ•ᛡᚦᚠᛋᚾ•ᛒᚦᚠ•ᛇᛝᛠ•ᚠᚾᛉ•
(Cross/body)

||Page 23(Confirmed)
(5 dots)
ᚢᚪ•ᚹᛝᚷᛉᛞᚷ•ᛁᛒᛁ•ᛇᛏᛒᛁᚣ•ᛠᚷᛋᚫ
ᛈᚹᛗᛠ•ᛇᛂᛇ•ᚹᚻᛁ•ᚷᛠᛒᚢᚣᚻᚣ•
ᛝᚹᚢᚱᛋ•ᚩᛡᚠᛡᛠ•ᛞᛟᚦᛗᚳᚾᛉ•
ᛞᚦᛖᚱᛇᚳ•ᚪᛂᛋᛟ•ᚢᚹᚱᛏ•ᛋᛖᛋᛏ•ᚣᚱᛠᚫᚾ
ᛞ•ᛈᛒᛡᛋᚢᛞᛖᚣᚦ•ᛚᚹᛟᛋ•ᚷᛚᛂ•ᚫᛖᚩᚳᚦᚹ
ᛗ•ᚢᚩᚷ•ᚠᚪᚩᛡᛝᛒᛠᚦᚳᚪ•ᚱᛡᛏ•ᛟᚹᚠᚣᛝᚢ
ᚣᛁ•ᛚᛏᚫᚫ•ᚪ•ᚱᛈᚠᛗᚹᚩᛞ•ᛠᛒᛈ•ᛝᛟ•ᚾᚷᛗ•
ᛡᛖᚩ•ᚾᛚᛉᛝ•ᛁᛡᚫᛗ•ᚻᛖᚹᛗ•ᛝᛈᛇᛗᛡᛂ•ᚫ
ᚩᛡ•ᚠᚣᛉᛟᚫᚦ•ᚫᛒᚩ•ᚪᚦᛂᚱᛂᚾᚦ•ᛡᚠᚪᛏᚾᚻ•ᚷ
ᚢ•ᛞ•ᚳᚦᚢᚱᚢᛟ•ᛞᚻᚱ•ᚷᚹᛏᛈᛖᚠ•ᚪᚻᛠᚦ

||Page 24(Confirmed)
ᛞᚱᚠ•ᛖᛂᚫ•ᚾᚳᚻᚹ•ᛇᛡᛈᛠᚹ•ᛗᛚ•ᚹᛟᚹᛠ•ᚪ
ᚾᚪ•ᚳᚪ•ᚷᛚᚦᛒᚩᚹᚢ•ᚷᛚᚠᛋᚻ•ᚾᛉᛝᛗ•ᛖᚦᚢᛝ
ᛡ•ᛈᚣᚢ•ᛉᚷᚷ•ᚹᛞᛁᛋ•ᚦᛡᛡᛈᚳᚪᚩ•ᚢᛗᚢ
ᛉᚩᚣᚻᛏ•ᚩᚫᛗᚢ•ᚩᚾᛏᛠᛒᛟᛒᚠᛁᛈ•ᛚᛋᛝᚫᚳ
•ᚫᛟᛏ•ᚢᚩᛉᚾᛡᛋᚠᛖ•ᛉᚱ•ᛗᚩᚩᚫ•ᚠᚢᚦᛖᛞᚾ
ᚣ•ᛡᛋ•ᛋᚱᛚᛟ•ᚢᚻ•ᚢᚾᛈ•ᛁᚻ•ᛖᛉ•ᚦᛞᛗ•ᛈᛟ
ᚠ•ᛈᚠᛝᚫᛝᛋ•ᛟᛂᚹ•ᛠᛒᚣ•ᛟᚹᛞ•ᚠᚣᛂᛁᛏᛉ
ᛚ•ᚩᚦᛝ•ᚠᚪᛋᛡᛁᚻᛒᚱ•ᚪᚢᚣ•ᚫᚢ•ᛟᛠᚪᚣ•ᛖᛟ
ᚫ•ᛖᛈᚠᛒ•ᛈᛂᛁ•ᛋᛝᛒ•ᚱᚦᚳᛇ•ᛚᛁᚢᛈᛏᚳᛒᛉ•
ᛖᚪᚣᚠᛗᚳᚣᚱ•ᚻᚹᛏᚾᛡᛉᚫᚦᛟ•ᚳᚹ•ᛠᚠ•ᛏ
ᛠ•ᛝᚩᚻ•ᛡᛠᛒᛋᚻᛟ•ᚫᛁ•ᛠᛏᛁᛋ•ᛏᚫᚻᚱ•ᚻᛂ
ᛋᛡᚹᚾᚾᛡᚹᛚ•ᚢᛖ•ᛏ•ᚱᛝᚳᚣ•ᚪᛉᛇᛝᛋᛖᛇᛁ

||Page 25(Confirmed)
ᚻᚾ•ᚷ•ᚹᛉᚳᛉᚣ•ᛋᛈᚳᛟᚱ•ᛒᚣᛂᛝᛖᛁ•ᚾᚷᚪ•
ᚣᚷ•ᛚᛒ•ᚢᛂᚩ•ᛝᛉᛉᚪᛖ•ᛒᚦᛉᛡᚱ•ᛏᚷᚹᛂᛋ
ᛁᚠ•ᛠᛁᛡᚦᛝᚾᛖᚾᚠᚩᛗᛖᚣᚪ•ᚳᛖᚳᚹᚪᚫᚹ•ᛇ
ᚢᚦᚻᛉᚢᚾ•ᛠᛚᚢᚾᚦᛈᛋᚢᛈᚱ•ᛞᚫᛟᚱᛡᚫᚪ
ᚢ•ᚢᛗᛚᚦᛠ•ᛚᛝᛈᚣ•ᚩᛋᛟᚪᚱᛗᚦᛟᛈ•ᛚᛋ•ᛏᛁ
ᚠᛋᛖᚹᛝ•ᛗᛞᚩ•ᛠᚫᛡᛒᛏᚩᛋ•ᛖᛏᚪᚠ•ᚫᛒ•ᛚᚾ•
ᛋᚪᛉᛟ•ᚾᛚᚹᛖ•ᚩᛚᛁᛂᛏ•ᛒᚪᚠᛉᛏ•ᚩᛟᛂ•ᚾᚷᛋ•
ᚷᛚᚷᛠ•ᛒᚷᛖᚩᚪᚩᛖᛞ•ᚷᛇᛗ•ᚳᚱᚷ•ᛈᛞᚩᚠᚹ
ᛇ•ᛠᛞᚣᛝ•ᚾᛁᚠᛈᛚ•ᛖᛟ•ᚢᚳᛗ•ᛚᚫᛏᛉᛂᚱ
ᛉ•ᛁᛠᚷᛚ•ᚷᚳᛋᚩᛝ•ᚫᚦ•ᛗᚻᛟᚠ•ᚱᛋᚳᚦ•ᚣᚩ•ᛒᛁ
ᚫᚻᛖᚢᛏᛚᛚ•ᛇᚷᛟᚣ•ᛒᚾᚦᚻ•ᛠᛖᛂᛒᚾᛁᛚᛠ
ᚱ•ᛂᚠᚳᛋᛝᚳᛈ•ᚷᚻᛋᛗ•ᛇᛞᛇ•ᚣ•ᛡᛖᛏᛠᚢ

||Page 26(Confirmed)
ᛡ•ᚩᚾᛠᚩ•ᛂᚣᛇᛉᛠᚪᛡ•ᚾᛞᛝᚻ•ᛈᛠᚻᛡ
ᚢ•ᛝᚻᚦᛈ•ᛉᚢ•ᛠᚣᛈᛟᚦᛋᚣᛈ•ᚠᛏ•ᛒᛁᛟᚪᚷ
ᛚ•ᛠᚻ•ᛝᛁᛡᛚᛝᚾᛞᚪᛈᚷ•ᚾᛏᚦᛋᛒ•ᛋᛋᛠ•ᚷᚳ
•ᛠᛗᚢ•ᛖᛉᛒᚷᚫᚠᚩᛁᛉ•ᚠᚪ•ᛠᚱᛇ•ᚩᛁᛞᛋᛚ
ᚦᛖᛒᛇ•ᛟᚷᚣᚷᚾᚷ•ᚦᚠᚳᛗ•ᚩᛖᛖ•ᚩᚠᛒᚻᛝ•ᚳᛁ
ᛂᚪᚾᚩᚪ•ᛈᚻᚱᛗ•ᚱᛗᛟ•ᚦᚷᛂ•ᛒᚱᚦᚪᛠ•ᛉᛖᛡ
ᛞᚦ•ᚱᛝᛂᛒ•ᚾᛏᚣ•ᛏᛋᛒᚾᚫ•ᚢᛖᛁᚩᛡ•ᛂᛇᚢᚦᛚ
ᚳᛖ•ᛚᛁ•ᛒᚢᚠᚪᚱᛠ•ᛗᛒ•ᛞᛉᛗ•ᚢᛠᛏᚣ•ᚪᛂ
ᛈᚢᛈᛠᚣᚷ•ᛗᛡᛗᚢᚪᛗᛝ•ᚣᛡ•ᚪᛖᛏ•ᛖ
ᛋᚪᛟ•ᚳᚻᛁᛋᚠᛁᚾ•ᛈᛟᛝ•ᛇᚦᚣᛏᚫᛉ•ᛖᛟᛏ•ᛞᛡ
ᛚᛖᛈᛏᚪ•ᛏᚠᚱᚾ•ᚪᛠᚱ•ᛠᚳ•ᚾᚻᚹᛒᛇᛋ•ᛁᚻᚣ
ᛋᚹᚩᛉᚹ•ᚩᛝᚢ•ᚻᛝᛟ•ᛏᛚᚠ•ᛂᚷᛏᛂᛝ•

||Page 27(Confirmed)
ᛗᛈᚣ•ᛚᛋᚩᚪᚫᚻᛚᛖᛇᛁᛗᛚ•ᛚᛋᚳᛈ•ᚾ
ᚻᚷᚢᛡᚻᚢ•ᛒᚠ•ᛞᛂᚢ•ᛒᛖᛁ•ᚫᚠ•ᛈ•
ᚫᛈᚦ•ᚱᛗᛚᚳ•ᛒᚷᚣᛗᛠᛒᚫ•ᚾᚦ•ᛗᚠ
ᛡᛠᚳᛒᚷᚫᚠ•ᛖᛂᚱᚩ•ᛈᛒ•ᚠᛒᚩ•ᛇᚱᛠᚱ•ᛠᚷ
ᛖᛚ•ᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖ•ᛏᚱ•ᚢᚣ•ᛟᛂᛉ•
ᛠᚷᛝ•ᚣᛏᛝᚾ•ᚪᛏᛋ•ᛝᚪᛂ•ᚠᛚᛋᚢ•ᚹᛠᛈᛁᛏ•
ᛁᚾ•ᚱᚱᛝᛗ•ᚣᛗᚠᛁᚫᛁᚪ•ᚢᛟᛒᚹ•ᛗᛁᚻᚣᚹᛞᛚ•ᛟ
ᛏᛞ•ᛟᚳᛒ•ᛡᛒ•ᚪᛏ•ᚹᛏᛈ•ᚹᛠᚩᚱᚩᛖ•ᚣᛚᛋ•
ᚢᛡᚱᚠᛂᛇᚱᛡᚦᛖᚢᛏ•ᛝᚫ•ᚾᚪᛠᚩᚪᚾᚪᚦᚷᚩ•
ᚫᛉᛒᛏᛖᛠᛗᚷᚱᛗ•ᚣᛝᚠᛒ•ᛞᛟᛞᚪ•ᛠᚱᚳᛁ
ᛈᛞᚠᛗᛝᚻ•ᛋᚩ•ᛞᛈᛉᚾ•ᛟᚱᛡᚾᚳᚳᛏ•ᚾᛈᚠ

||Page 28(Confirmed)
ᛈᚳ•ᛂᚦᛒᛁᚹ•ᛞᚹᛝᛠᛡᚹᛚ•ᚹᛂᚾᚪᛟ•ᛏᛞᛉᚣ
ᛖᚱᛞ•ᚱᛏᛇᛁᚳᛈ•ᛝ•ᚦᛟᚷᛂᚦ•ᚣᛋ•ᛠᚻ•ᚠᛒᛚ•ᛁ
ᚫᛚᛞᛉᚪ•ᛁᚹᚷ•ᛒᚩᚹᚾᛠ•ᛋᛖᛗᛒᛋ•ᚳᚹᚦᛟᚠᚻᚫ
•ᛞᚢᛁᛒᛞ•ᛇᛝᛈᚠᛁ•ᛟᚢᚣᛏ•ᚻᚱᛖᚾᚳᛈᛡᛈᛞ
ᛂ•ᛁᛏᛗᛋᚫᛉᚩᚣ•ᚪᛂᛗᛡᛖ•ᛇᛂᚠᛗᚱ•ᛞᛟᚪᛒ
ᛞᚻ•ᚾᛈᚪ•ᛇᚱᚻᚾᛝᛠᚠᚾᚠ•ᚩᛗᛋᚾ•ᛠᚪᛁᚢᛚ•
ᚪᚫ•ᛂᛉᛡᚠ•ᛁᛖᛈᛠᚻ•ᚠᛇᚩᚹ•ᛠᛂᛇᛁᛠᚫ•ᛂ
ᛒ•ᛋ•ᚠᛖᚷ•ᛋᛁ•ᛟᛗᛒᛁᛝᛏᚪᚢᛁᚦ•ᚩᛝᛗᚠ•ᚹᛟᛒᛟ
ᛡ•ᚠᚣᛝᚩᛠ•ᚳᛚᛈᚱ•ᛞᛂᚩᛝᛂ•ᚪᛖᛗᛈᚾ•ᚠ
ᛠᚷᛞᛒ•ᚩᛉᚷᚾᚣᚷ•ᛠᛈᛂᛞᚾᛟᚩᚢᚾᚹᛗ•
ᛂ•ᚢᚷᛠ•ᛗ•ᛇᚪ•ᚻᚦᛡ•ᛝᛈᛞᛒ•ᚳᛉᚳ•ᛠ
ᛉ•ᛟᚣ•ᛒᚦᛁᛂᛚᛡᛝᛡ•ᚹᛂᚫ•ᛋᛗᚪᛡᛠᛇᛝᛏ•

||Page 29(Confirmed)
ᚦᛞᚷ•ᚢᛏᛚᛏᚣ•ᚢᛝ•ᚷᛟᚪᛏ•ᛂᚦᚣ•ᚫᚻᚪ•ᛒᛝ•
ᚦᚢᚱᚪᚾᛞ•ᛁᛝᚫ•ᛚᚫᚷ•ᚹᛁᛒᚣ•ᚾᚫᚠ•ᛚᛋᛒ•ᛈᛟᚪᛟ
ᛞᚷᛟᚣᛉᚷᛚ•ᛋᛠᛁ•ᚳᛟᛁᚦᛈᚹᛉ•ᛖᚢ•ᛟᛂᛝ
ᛋᚢᛝ•ᚳᛡᛠ•ᛚᛇ•ᛚᚷᚢᛁᛏᛒᛋ•ᛞᛁ•ᚠᚠᚷᚠ•ᚦᛂ
ᚳ•ᚫᛟ•ᛁᛗᛡᛁᛇᚦ•ᚩ•ᚢᛈᛒ•ᚻᛋ•ᛂᚣᛂᛖ•ᛒᛇᛇᚱ•
ᚹᛂᛏᛡ•ᚳᚪᚫ•ᚩᛈᚱ•ᛡᚾᛗᛁᛝ•ᚻᚹᚦ•ᛡᚦᚻᚦ•ᛉ
ᚫᚫᛋᚳᛡᚾᛇ•ᛟᛉᚢ•ᚱᛂᛖ•ᛚᚾᛞ•ᛗ•ᛏᚱᛟᚦ•ᛁᛝ
ᛡᛒ•ᚳᚩᚹᛟ•ᛏᛗᛋᚱᚷ•ᚱᛚᛞᛚ•ᚩᚣ•ᛞᚳᚪᛖᛞᚠ
ᚳ•ᛇᛖᛉᛚᚫ•ᛖᚩᛁᛋ•ᛡᛁᛟᛋᚪᛒᛗ•ᛗᚣᚹᛂ•ᛖᚫᛝ
ᛚ•ᛂᚱᛇ•ᛈᛚᚩᚻ•ᚪᛞ•ᛡᛂ•ᛞᚠᚹᛞᛂᚳ•ᚾᚦᛉ•ᛂ
ᚻ•ᚷᛚ•ᚠᛖᚦ•ᛇᚻ•ᛝᛖᛒᛚᛞᛁᛗᚠ•ᚹᛒᛗᛟᛁᛖᛁᛠ•
ᛈᚻᛝᛖᛞᛟᚩᚻᛂ•ᚹᚩᚾᛂᛈᛗ•ᛖᚳ•ᛖᛇ•ᚷᚻᛗ

||Page 30(Confirmed)
ᛞᚪᛈᛖ•ᛗ•ᛉᚫᛒᛇᚱ•ᛖᚣᛟᚣ•ᚱᛠᛈᚢᛠ•ᚣ
ᛖᚪᚻ•ᚩᛉᛠᚢᚻᛡᛟ•ᚷᚫᚩᛒᛉ•ᚫᚱᛞᛋᚩᚱ•ᚷ
ᛠ•ᛉᚻᛁ•ᚷᚳᛞᛠᛡᚳ•ᛂᛠᛉᛇᚻᛋᚹ•ᛝᛡᚷ
ᛖᛡᚣ•ᛠᚩᚷ•ᚱᚦᚠᛟᚩᚦ•ᚦᛁᛏᚱ•ᛇᛉᛇ•ᚢᚷᛠ•
ᛟᛏ•ᚩᚠᛚ•ᛟᛝᛈ•ᚱᛡᚪᚩᛏ•ᚩᛠᚷᚫᛗ•ᛈᛋᚱ•ᛖ
ᚦᚠ•ᛞᚹᚾᛚ•ᛝᚩᛇᛂ•ᚳᛚᚢᚹᛏ•ᚩᛖᛏᚠᚪᛚ•ᛟᛇᛟ•
ᛠᚱᛇ•ᚢᚪᚦᛈᛟᛡᛉ•ᛡᛒᚱᛒᚠᚢᛚᚢᛟ•ᛒᛇᛒ•
ᛉᚦᚹ•ᛝᚣᛖ•ᚳᚫᚣᛟ•ᚹᛁᛝᚫᛏ•ᚫᛇᛈᛡᛟᚠ•ᛚ•ᛝ
ᚠᛡ•ᛞᚪᛚᛈ•ᛋᛁ•ᚢᚣᚪᛚᛠᛝᚹ•ᚪᛏᛈᚳᚣ•ᛝᚫ
ᚻᛗᛞᚷᛚ•ᛠᛉᛒ•ᛇᛡᛋᛖ•ᚣᛁᛚ•ᚣᛠᚣ•ᚻ•
ᚣᛉᚾᛏᚫᛉᛋᚦᚪᚹᛗ•ᚪᚱ•ᚪᚩᚻ•ᛗᛖᚫᛞᛠᛁᛗ
•ᛒᛟᚾᚳᚩᚱᛉ•ᛋᚹᚫ•ᚻᛖ•ᛋᚠᚾ•ᚢᚦᛟᚷᛖᚪᛟᛇᛇ•

||page 31(Confirmed)
ᚦᚳᛒᛝᛏᛉᛡᛞ•ᛋᛡ•ᚩᚠ•ᛈᛖᛞᛋᛁ•ᛚᛁᚻᚾᛝᚱ•
ᚻᛈ•ᛇᚢᚫᛞ•ᛚᚻᛉᚳᛈ•ᛁᛗᛉᚳ•ᛂᚫᚾᛞᛋ•ᛏᛚ
ᛡᚩᛋᛗ•ᛚᛞᚾ•ᛈᚫᛏᚷᛈ•ᚫᚦᛂᛗ•ᛒᚻᚩᚻᛁᚷᚻᚳ•
ᛚᚹᛋᚱᛇᛗᛏ•ᛂᚳᛁ•ᛠᚦᛞ•ᛏᛚ•ᚱᛖᛠᛒᚪ•ᛒᚠᛒ•ᛁ
ᛒᛡᛇᛏᚣ•ᛏᛖᚣᚳᚱᛋᚠ•ᛁᚦᚪᛉ•ᚪᚣᚫᛠ•ᛂ•ᛈ
ᛗ•ᚠᛋ•ᚪᛒᚱ•ᛉᚣᚻ•ᚦᚩ•ᛇᛞᚢ•ᚠᛁ•ᚻᚩᚫᚠᚣᚷ
ᚱᚪᛂ•ᛏᛉᛇ•ᛖᛠᛞ•ᛏᚠᚢᛝ•ᚫᛂᛖᛈᚳᛒᚦᚢ
ᛝ•ᛡᛒᚹᚱ•ᛖᚾᛈᛇᚣᛇ•ᛉᚱᚹ•ᛒᛡᛞ•ᛖᚱᚩᚻᚣ
ᛠᛈᚦ•ᛗᛁᚷᛚ•ᚹᛉᚫ•ᚠᛞᚾ•ᛂᛟ•ᚻᛚᛡ•ᛗᛖᚷ•
ᛟᛁᛡ•ᚻᛟᚱᛇᚹᚣᚠ•ᛈ•ᛂᚷᚦ•ᚪᛒᛝ•ᛈᛒᚪᛖ•ᚢᚹᚻ
ᚩᛒᛋᛉ•ᚹᛞ•ᚦᛇᚱᛖ•ᛂᚾᛞᛝᚹᚪ•ᚻᛖᚹ•ᛟᛡᛂ
ᛡᛟᛝᛂᛉᛚᛂ•ᛞᛉᛟᛈ•ᚱᚪᛁᛏᚷᛉᛝᛇ•ᛠᛗᚩ

||page 32(Confirmed)
ᛚ•ᚦᚫᚹ•ᚫᚢᛈᛡᚳ•ᚹᛝᚻᚹᛒᛗᛋᛟᛖᛁᛡ•ᛟᚹᚦᚻᛒ
•ᛡᚱᛏᚦᚠ•ᚠᚩᚦ•ᚻᚩᛗᛖᛉᚹᛞᛋᛚᚠᛞ•ᛝᛒᛇᛡ
ᛚᚪ•ᚹᛞᚾᚫᛉᛏᚣᛗᚷ•ᚦᚹᛉᛡᚦ•ᚹᛒᛋᚱᛉᛡᛉ
ᚪ•ᚢᛒᚻᛠ•ᚹᛝᚢᚻᛇᛝᛡᛠᛂ•ᛋᛈᚦᛏ•ᛟᛝᚩ
ᛗᛒᚢᛞᛋ•ᛒᛂ•ᛠᚱᛟ•ᛖᚾ•ᚾᚹᚷᚢᛚᚪᚩᚣ•ᚢᛏ
ᚠᛂᛏ•ᚪᚷᛒᛇ•

||page 33(Confirmed)
ᛞᛇ•ᛉᚳᚠᛁᚪᚹᚻᚷ•ᛇᛟ•ᚠᛏᛖᛟᛠᚪ
ᛡᛋᚷ•ᚣᛠᚾᚦᚫᚱ•ᚩᛡᛗ•ᚹᛉᛗ•ᚣ
ᛞᛒᛏᚱ•ᚢᛂᚻ•ᚫᛟ•ᛡᛝᚹᚻᛋᚠᛡ•ᛚᚦ
ᛏ•ᛁᚹᛏ•ᚩᚢᚾᚹᛗᛚ•ᛋᚦᛠᚹᛂ•ᚪᛂᚫᚷᚣᛗᚹᛞ•
ᛈᛡ•ᛖᛂᚹ•ᛖᚢ•ᚻᚹ•ᛝᛁ•ᛋᚫᚷ•ᛂᛚ•
(3 dots)
ᛝᚦᛇ•ᛁᚠᚳᛟᛇ•ᛞᚹᚣᛡᚣᚢ•ᚣᚾᚦᚱᛖ
ᛗᛁ•ᛇᛞᚱᚹ•ᛉᚹᚻ•ᚳᛂᛡᚪ•ᚾᚹ•ᚾᛗ•ᚠ
ᛇᛁ•ᛇᚪ•ᚩᛋᛒᛟ•ᛏᛂ•ᛈ•ᛖᛈᛂᚩᚹᚢᛠ
ᛝᚹ•ᛗᚳᚩᛏᛏᚠᚢᛂ•ᛞᛠᛉᚩ•ᛉᚦᚷᛞ•ᛒᚩᛏᛚ
ᛇᛁᛒᛡᚪ•ᛖᚠᛠᚢᛖ•ᛈᛋᚹᛞᛞ•ᛋᛡ•ᚹᚦᛞᛋ•ᛝ
ᛂ•ᛚᚷᚢᛡ•ᚾᛉᚠ•ᚱᚪᚣᛗᚠᚦᚻ•ᚱᚪᚱ•ᚫᚪᚷᛟᛞ•ᛒ

||page 34(Confirmed)
ᛗᛒ•ᚾᚻ•ᛇᛞ•ᚻᛗᛚᛁ•ᛠᚾᛁ•ᚫᛖᚢ•ᛏᚦᛇᛋᛈᚻ
•ᚻᛇᚳᛠᚫ•ᛞᛚᛋᛝ•ᛁᚹ•ᚪᚳᚩᛏᛇᛝᚷ•ᚳᚦᛋᛠᚠ
ᚢᛝᛚᚻ•ᚹᚩᛇᚪᛈᚷ•ᛇᛗᛚᛂᛋᛏ•ᛚᚳᛈ•ᚾᛋᛝ•ᚳᚪ
ᚳ•ᚾᛉ•ᚾᚢᛉᚫᛗᛏᛞᛏᚫ•ᛟᛗᛋᛉ•ᛏᚣᛉ•ᛇ
ᛠᚷ•ᚻᛒᚾᚷᛇᚢᛟ•ᛂᚦᛉᚩ•ᚾᚪ•ᛞ•ᚩᛈ•ᛠᛚᛋ
ᛏ•ᛒᚷᛁᚢᛟᛖᛁ•ᛂᚦᛖᚻᚹ•ᛂᚫᛂᚾᚻᛉᚹ•ᛒᚪᛋ•ᚠᚱ
ᚱᛁᛉᚢᚦᚻ•ᚢᛗᚪ•ᛞᛝᛠᚪ•ᚫᛉᛖᚾᚹ•ᛟ•ᛝᛞ
ᚾ•ᛈᚫᚳᛡ•ᛈᚠᛉᚩ•ᛒᚷᛗᚫ•ᛚᚻᛞᚣᛖᛉᛒ•ᛂᚹ
ᛇ•ᛈᚩᛁᚦᚠ•ᚷᚾᛈᛞᛝᛏᛖᚪ•ᛂᛋᛠ•ᛈᛝᚢ•ᛒᚷ
ᚳᛉ•ᚪᚢᛈᛚ•ᛂᚱᚷᚣᚪ•ᚪᚠ•ᛗᛝᚣᚳᛟ•ᚹᚣᚷ
ᛈ•ᛗᛖᚩᚹᚢ•ᛟᛞᛋᚱ•ᚣᛞᛋᚳᛡᛉ•ᚻᚦᚹᛚᛞ
ᛠᚩᛞᛠᚢᛟᛖ•ᛠᚹ•ᛉᚻᛡᚹᛞ•ᚪᛗ•ᚠᚦᛈ•

||page 35 (Confirmed)
ᛝᛏᚳᚪ•ᛠᚣᚷ•ᚳᚦᛖᚾᚢᛁᚫᛁᚢᛡ•ᚹᛚᚳ•ᚻᛈ•ᛞ
ᛂᚳ•ᛗᛒ•ᛗᚪᛂ•ᚩᚪᛞᛁ•ᚩᚱᛟᚠᛖᚣᛟᛁ•ᛇᛟ•ᛁᛈᚣ
ᛚᚪᛡ•ᚳᛏᛠᛋᛖᛒᛝ•ᚫᛟᚫᛞᛖᛞᚣᛡ•ᛠᚪᛖ
ᚦᛚᚫ•ᚳᛋᚪᚩᚷᚹᛚ•ᛈᛖ'ᛏ•ᛂᛉᛝᛚ•ᛏᛉᚩᚣᛝ
ᚠᚩᚣ•ᛁᚻ•ᛟᚫᚷᛂᛝᛡᚾᛗᚣᛟᛡ•ᛝᚷᛖᛉ•ᛟᛉ
ᛈᛚᛋᛉᛠ•ᛚᛡ•ᚱᚪᛞ•ᛠᚷ•ᚱ•ᚳᛇᚻ•ᛗᚪᛟᚷ•
ᛞᚪᛋᛡᚻ•ᛈᚷᛖᚳᛟᚱᛟᚢ•ᛁᚫᛟᚦ•ᛂᚱᛡ•ᚱᛖᚦ
ᛒ•ᚣᛏᛝᛡᚩᛏᚦᚳ•ᛉᚳ•ᛋᚪᚫ•ᛗᚠᛂᚱᛖ•ᛡᛇᛁᛇ
ᛟᛉᚳᚹᚪᛖ•ᛋᚢᛉ•ᛋᛟᛚ•ᛂᚾ•ᛈᛇᛒ•ᚦᚦ•ᛁᚫᛚᛋᛝ
ᛂᛂᛡ•ᛟᚻᛇᚢᛚ•ᛁᚱ•ᛡᚻᛚᛏᚹᛉᛇ•ᚱᛏᛠ•ᛁᚫᛚ
ᛗ•ᛁᚱᚷᛏᛠ•ᛇᛟᚻᛟᚳᛋᛏᚾᚩ•ᛁᚱᚷ•ᚹ•ᛞᚢᚣᛚᛁ
ᛗᛒᚢ•ᛚᚱ•ᛏᛁᚢ•ᚷᚳᚠᛇ•ᛚᛇᚣᛏ•ᛏᚫᚢ•ᚫᛠᛇ

||page 36(Confirmed)
ᛖᚾ•ᚢᚹᛝᚻ•ᚷᚣᚱ•ᚩᛁ•ᛚᚾᛉ•ᚾᚩᛈ•ᚠᛠᚫᚫᚩ•ᛉ
ᚾᛋᛟᚫᛚ•ᚾᚫ•ᚦᚢᛠᚣᚫ•ᛈᛁᛇᚢᚱᛂ•ᛈᛟᛂᚪᛝᛈ
ᚦᛈᚪᛝ•ᚣᛗᛟ•ᛉᛒᚢᛏᛇᛗᛈᚫᚣ•ᛉᚫᚣᚱᚫᚣ
ᚠᚠᛗᛡ•ᛉᛖ•ᚱᚢᛏᚷᚢᚣᚱ•ᛡᚢᚩᛇᛁ•ᛂᚠᛈᛂ
ᛞ•ᛁᚦᚩᚻᛡᚷᚻ•
1 ᛚᚦᛇᛟ•ᚪᚫᛠ•ᛗᛉᚻᚳᛉᚪᛏᚦ•ᚫᛉ•ᚩᛋᚳᛞ
ᛏ•ᚣᚹᚾ•ᛟᛏᛉ•ᚹᛁᛟᛂᚠᛁᚩ•ᛁᚱᛋ•ᛉᚾᛗᚪᛡ•ᚱᛈᛋ
ᛞ•ᛁᛟ•ᚻᛖᛏᚢᚹ•ᛠᛟᛞᛟᛂᛁᛝᛡ•ᛂᚱᛞᛗᛒ•ᚩ
ᚳᚩ•ᚦᛟᚱᚢᛚ•ᚢᚦᛋᚢᛞᛚ•ᚷᛁᚣᛝᚩᛟ•ᛁᛖᚣ•ᛖᚠ•
ᛇᛝᛒᛚᛁᚢᚣᚠᛟᚾᛟ•ᛒᛟᚷᛂᚪᚾᛗᚫ•ᚣᚦᚠ•ᛁᛒᛝᛈ
ᚾᛁᚱᚷ•ᛂᛇᚫ•ᚻᚪ•ᚱᛉᛉ•ᚩᛚᚾᚫ•ᛞᚣᛒᚾᚪ•

||page 37(Confirmed)
2 ᚾᚣᛖᛉ•ᚾᚢᛉᛁ•ᛝᛏᛈᚹᛋᚣ•ᛏᛠᛈᛉ•ᚪᛁ
ᛂᛋᚱᚪᛏᛋᛝᛏ•ᚳᚷᚳᚻ•ᛖᛟᚱᚪᛡᚻᚳ•ᛝᛒᛖᚱ
ᛠᚪ•ᛚᛟᛖᛚᚪ•ᚦᛋ•ᚳᚹᚱᚹ•ᚩᚻᚣ•ᚢᛝᚩ•ᛈᛚᛁᛏᚪ
•ᚠᛋᛝᛞ•ᚳᚪᚱᛒ•ᚹᛈ•ᚾᚩᚦᚳᚦᚾᛗᚩᛖ•ᚣᛇᚾ•ᚠᛒ
3 ᛞᚢᛈ•ᚹᚾᛖᚪ•ᚱᛚᛁᚹ•ᚫᛉ•ᛝᚠᛞᚪᚠ•ᛒᛂᛉ•ᛞ
ᛂᛝᚣᛇᚪ•ᚫᛂ•ᛝᛈᚪ•ᚢᛠ•ᛇᛏᚱ•ᛖ•ᚫᛗ•ᚫᛠ
ᚻ•ᛁᚫᛟ•ᛠᚹᚳᛂᚦᚻ•ᛡᚩᚢ•ᚩᚦᚷᛡ•ᚻᛋᚷᚪᛁᛟᛞ
ᚪᛂ•ᛁᚹᛡᛒ•ᛗᛝᛡᛞᚠᛒᛋᛏ•ᛒᚷᚠ•ᚷᛟᚢᚳᚫᛏᛁ
ᛖ•ᚱᚷᛗᚣ•ᚪᚷᚹ•
4 ᛝᛂᛋᛂᛗᚱᛗ•ᚾᛒᛋᛗᛉᛞᚻᛉᛁ•ᚣᛡᚻᚣ
ᛠᛉᚻ•ᛞᛖ•ᚹᛖᚦ•ᚢᚳ•ᛉᛗᚪᚣᛠ•ᚹᚫᚪᚳ•

||page 38(Confirmed)
ᚢᚫᚳᛇᚳᚣ•ᛡᚫᛏᛖᚳᚠ•ᛋᚻ•ᛋᚱᚢᚦ•ᛁᛋᛝᛗᛞ
ᚫᚢᛠᚢᚪ•ᚾᛝᚳ•ᛖᛈᚹᛉ•ᚢᛉᚫ•ᚾᛈᚳᚻᚱᚣ
ᚹᛚᛉᚱᛒ•ᛗᚫᛟᚣᚩ•ᚳᛇᛗ•
5 ᚻᚫᛉᚦᛒᛟ•ᛏᛟᚹᛂ•ᚫᛠᛗᚠᚫᚳᚷ•ᛇ•ᚻᚹᛗ
ᚻᛝᚣ•ᛁᚩᛁ•ᛏᛁᛖᛡᛂ•ᛗᚣᛚ•ᚻᚱᚩᛞᛒᛡᛈᛠᛗ•
ᚳᛠ•ᛖᛒᚢ•ᚷᛁᚦ•ᛟᚫ•ᛡᚻᛝᛖᚾ•ᚱᛠᛡᛋ•ᚻᛏ
ᛝᚻᚪᚷᚩᛝᚫ•ᚹᛚᛏᚱ•ᚷᛁᚾ•ᛖᛠᛂᛡᛞᛋᚻ•ᛝᚾ
ᚳᛋᚾᛞᛇᚾᛋᛁᚳᛡ•ᚱᛝᛚᚫᚣᛇᛚᚩ•ᚳᛞᚾ•ᛝᚷᛡ•
ᛝᛂ•ᚻᛂᛚᛠᛟ•ᛂᛏᚷ•ᛚᛒᛝᚢᛏ•ᚻᚳ•
•ᚫᛞᛟᚫᛟᛗ•ᛟᚫᚪᚻᚱᛗᚢ•ᚣᚢᚣ•ᛈᛗ•ᚪᛂᚫᛟ
ᛠᛚᚠᛖᛡᚢ•ᛉᚻ•ᚪᚩᛡᛒᛠᚢᚷ•ᚻᛏᛠᚪᛞ•

||page 39(Confirmed)
ᛋᚹ•ᚦ•ᚾᛋᛁᚻᛒ•ᛉᛠᛝ•ᛒᚢᛚᛟᚢᚾ•ᚢᚦᚩᛗᚪ•ᚾ
ᛞᚫᛇ•ᚫᚣᚪᛋ•ᚣᛝᛡᛗᚷᛇᛈ•ᛠᚳᚻᛝᛚ•ᚠᚷ
ᛡ•ᛁᛡᚪᚠᛒᛈ•ᚳᛋᚦᛠᚦᚫᚱ•ᚷᛞᛚᛟ•ᚷᚱᛁᛇ•ᚣᚩ
ᛟᚢᛝᚱᚷ•ᛗᛏᚷᛒᛈᚷ•ᛗᛏ•ᛗᚣᚹᛒᛏᛒ•ᚷᚣᛈ
ᚷ•ᚾᚦᛇᛒᚳ•ᚷᛖᛇᛟᛚᛈ•ᚹᚾ•ᚻᚷᚱᛇᛏ•ᛈᚷᛒ•ᚹ
ᛗᛋᚹᛟᚻ•
(3 dots)
ᛡᚳᛋ•ᛈᛞᛋᛡ•ᚪᚹᛏᚳᚹᛟ•ᛗᚹᛁᛒᛞ•ᚷ
ᛇᚢᛚ•ᛉᛋᚫ•ᛟᚻᛚᚦᛒ•ᚣᚪᛚᛞᚦᚠ•ᚻ•
ᛞᛝᚩᚢᛋᚪᚫ•ᛖᚦᛁ•ᛏᛂᛏ•ᛝᚦᚾᚳᛉ
ᛏᛝ•ᚳᛈᛁ•ᚾᛏ•ᛒᚾᛡᚱᛒ•ᚢᛈᛋᚦᛁᚳᛈᛋᛁᚹ•ᚹᛚᚣᚾ
ᚢ•ᛒᛁᚪᛠ•ᚹᛟᚳ•ᛠᚢᚪ•ᛚᚦᚹ•ᚠᚾᛏᚳᛡᛁ•ᛚᚩ•ᚾ
ᛗᛂᛠ•ᚦᛟᛂ•ᚪᚦᚹ•ᛡᚾᛖᛠᛈ•ᛒᛋᛂ•

||page 40(Confirmed)
ᚠᚾᛗ•ᚣᚷᛞᚫᚻ•ᚪᛈᛉᚣᚻ•ᛇᛠᚩᛖ•ᛏᛝ
ᛠ•ᛚᛁᛏᚦᚠ•ᛗᚪᚳᛖ•ᛞᚳ•ᛏᚱᛟᚷᛠᚾ
ᚫᛒᚢᛖᛒᚢ•ᚦᚠᛟ•ᚷᛋᛟ•ᛁᛈ•ᛟᛉᛋᛒ•ᚹᛂᛒ
ᚣᛗᚢᛠ•ᚱᛁᚢᛟᛂᛁ•ᛗᛖᚫ•ᚱᛋᛉᛝ•"ᛠᛈᛚ•
ᛞᚩᛚᛁᛉᛠᛝᛖᚱ"•ᚾᛈᛖᚹᛡ•ᚾᛂᛏᚣ•ᛋᚩᛋ
ᛏᛝ•ᚢᚾᛇᚪ•ᛖᛏᚪᛂᚳᚣ•ᛟᛒ•ᛚᛋ•ᛒᛞᛂ•ᛁᛝᚣᛖ
ᚳ•ᛂᚻᛚᚣ•ᚷᚫᛚᛞ•ᛚᚫᛚᚦᛉ•ᛚ•ᛖᛉᚩᛉᛁᚳᚢᛗ
ᚾᚢ•ᚩᚾᛇ•ᚻᛡᛚᛇᚩᚫᚪ•ᚩᛟᚩ•ᚣᚱ•ᛖᚠᚢ•ᛁᚻ•ᛟᛚ
ᚾᛏ•"ᚠᛞᚱᛠᚷ•ᛈᚩᛇᚩᛗᛠᛒ•ᛂᛡ•ᛋᛗᚠ•ᛏ
ᚠᚫᚩ•ᛟᚳᛚᛞᛡᛚ•ᚩᚳᛝᚢ•ᛈᚹᛏ•ᚷᚳᛋ•ᚢᛟᚷᚦ•
ᚠᛉᚠᛏ•ᚳᛋᛉᛟ•ᚷᚠᛉᚾᛞ•ᛒᛏᛠᛡ"•ᛈᛡ

||page 41(Confirmed)
ᛠᛁᚪ•ᛋᚣᛗᛞᚣᛋ•ᛒᛞᛂᛞ•ᚩᚾᛏᛚ•ᚳᚪᛝ•ᚱᚷ
ᚻᚷ•ᛂᚹᚠ•ᚪᚢᛇ•ᛞᛏᛗᛂᛁ•ᛝᚫ•ᛉᛈᚳᛈᛠ•ᛟᚪ
ᛒᛁᛁᛋ•ᛇᚷᚻᛋ•ᛇᛡᛒ•ᚠᚹᛝ•ᚫᚪᚠᚩᚣᛡᚪᚾᚻ•ᛒᚦᛟ
ᛇᚣᛟᛁᛒ•ᛟ•ᚩᛋᚹ•ᛞᚳᚠᚪᛁ•ᛉᛏᛟᚢᚩᛟᚦᛈᛋᚩ•
ᚻᛇᚦᛝ•ᛏᛠᚠᛝᛠ•ᚩᛗ•ᛏᚠᚣᛚᚣ•ᚹᛚᛞ•ᚪᛉ
ᛠ•ᚪᛂ•ᚩᛋᛒᛚ•ᚳᛖᚾᚪᚩᚱᛏᚦ•ᚱᛒᚳᚣ•ᛠᛗᚹᛚ•
ᚻᛈ•ᛇᛈᛖ•ᛚᛂᚩᛡᚪ•ᛖᛋᚫᚩ•ᛠᛉᛝᚣ•ᛖᚫᛒ
ᛗ•ᛖᚻᚱ•ᛈᚾᛗ•ᚹᛏᛟᚣᚢ•ᚠᛉᛈᛗᚩᚷᚾ•ᛡᛇᚳ
ᚠᛒᛈᛗ•ᛋᛇᛁ•ᛖᛈᚢᚱᛏᚳᚣ•ᛂᛚᚠ•ᚱᛚᚱᚫᛖᚻᛟ
•ᛇᚣᛡ•ᚩᛉ•ᚪᛋᚣᛁᛝ•ᛉᛚᛂ'ᚳ•ᛖᚣᚢᛝᚦᛇᚱ•
ᛠᛁᚫ•ᚦᚠᛟᚷᛠᛁ•ᛈᛋᛒ•ᛗᛒᛂᚠᚾᚳᛖ•ᚻᚫᚩᛂ•
ᛉᛂᛚᛈᚪᛁ•ᛟᚹᚱᛁᚱᚦᛖᛉ•ᚪᚾ•ᛞᛂᚷ•ᛟᛟᚳᛏᛂ

||page 42(Confirmed)
ᛞ•ᛉᚾᛗᚦ•ᛁᛂᚱ•ᛈᛉᚢᚫᚦᛒᚠᛂᚦ•ᚠᚪᛝᛖ•ᚹᚹᚣ
ᛚᛇ•ᚢᚣ•ᚾᚱᚪ•ᛈᚾᚹ•ᛚᚾᛏᛚᚢᛒᚱᛝᚪᛋ•ᚫᛈ•ᛂᛚ
ᚢᚳᚷ•ᛚᛏᛂᚹᛈ•ᚫᛗᛚ•ᛉᛚᛗᛏᛞᚠᛈᛁ•"ᚠᚳᚦ
ᛗᛂᚹᚱᚪᛚ•ᚩᛝᚱᚢᛈᚱᛟᛡ•ᚳᛉᚱ•ᛇᛏᚦᚾ•ᚱᛇᚫ
ᛞᛟᚻ•ᛒᚾᚣ•ᚠᛡᚪᛡᛖᚫᛞᛂᚢᛖ•ᚦᚱ•ᚩᛇᚱᛡ•
ᚣᛁᛉᛇᚻᚩᛠ•ᚫᚻᛡᛝᛠᚦ•ᚾᚣ•ᚾᚠᛁᛝ"•"ᛏ
ᚻᚹᚫ•ᛒᛇ•ᛡᚻᛉᛒ•ᛞᛝᚱᛂᚦᚻ•ᚪᚷᚣᛁᚠᚷ•ᛁᛏᛞ
ᛠᛒᚠᚩᛈ•ᛇᛡᛟᚹᚱᚾᚩᛏ•ᛋᚹᚢ•ᛖᛡᛖᛡᚦ•ᛉ
ᚪᚷᛈᚾ•ᛋᚱᚠᛞᛝᚻᛖᛂᛞ•ᛂᛡ•ᚱᚹ•ᚷᛝᚪᛒ•ᛂᛈ
ᛂ•ᛏᚠᛉ•ᚪᛂ•ᛁᚠᛉᚢᚩᚣᚻᚦ•ᚻᚾᛁᛒ•ᛡᛟᛡᛋᛈᚣ
ᛉ•ᛠᚢᛠᛚ•ᚠᛝᛗᚻ•ᚦᛒᚩ•ᛗᛚ•ᚩᛠᛋᚦᛠ•ᛇ
ᛋᛉ•ᚠᛗᛒ•ᚫᛋᛇᚾᛡᚾ•ᚢᚫᚹ•ᛞᛠᚢᚾᛝᚠᚾᛖᚫ

||page 43(Confirmed)
ᚻᛂ•ᛁᛖᛏᛡ•ᚷᛁᚩᚾ•ᚳᚢᚫᛗᛈᛋᚪᛡ•ᚷᛚᚣᚹᛟ"•
ᚠᚢ•ᛉᚠᚫᛞᚠᛡᛂᚾ•ᚻᛋᚦᚠ•ᛏᚠᛂᚱᚹᚠᛋᚾᚹᛂ
ᛖᛒᚢᚦ•ᚩᛇᚫᛈ•ᛡᛟ•ᚢᛁᚩᛂᚩᛇᛟᛂᛞᚩ•ᛈᚹᛞ
ᚷᚱ•ᚠᛟ•ᛇᚷ•ᛂᛟᛇᚫᛋᚫᚣ•ᛒᛏᛞᛟ•ᛠᚻᛡᚱᛠ
ᛠᛉᛋ•ᚠᚾᚣᚱᚠ•ᚪᚾᛡᚪᛖᚫ•ᚳᛇᛁᛝ•ᛒᛡᛞᛠ
ᚫᛒᛠᚳᛉᚠ•ᚫᛏᛁᚱᚪᛗᚩ•ᛚᛉᛋᚪ•ᛒᚩᛈᚫᚩᛝᚻᛇ
ᛖᛇᚫ•ᚻᛖᛇᛠ•ᚱᛗᛞ•ᚫᛇᛗ•ᚾᚾᚣᛡ•ᚱᚾᛗ
ᛠ•ᛂᛉᛋᛂ•ᛟᛖᛒ•ᛏᚻᚾ•ᚠᚪᚠ•ᛒᚾ•ᚩᚾ•ᛖᛋᛏᛒᚹ
ᛡ•ᚻᛏ•ᚩᛟᚩ•ᛒᚾᛖᚳᛁᚹᚣᛟ•ᛟᚩᛒ•ᛋᛖᚩ•ᚫᚻᛟ
ᚠᚫᚷᚩᛂ•ᛟᛒᚻ•ᚳᛖᛁᛚᚫᚣᛚ•ᚢᛚᛁ•ᚾᛟᛏ•ᚫᛈᛟᛈ
ᛝᛗ•ᚳᚢᛁ•ᚣᛋᚳᚢᛡᛇᚩ•ᚠᛖ•ᚷᛟ•ᚻᚫ•ᛝᚠ•ᛗᚠ
ᛝᛉᛞᛁ•ᛗᛝᚣᚪᛝᚠᛉᛁᛟᚷᛚ•ᛇᚩ•ᚫᛡᛏ•ᛂᛏ

||page 44(Confirmed)
ᛠᚢ•ᚷᚦᚣ•ᚦᚾᛟᚣᚩᛖᚻ•ᛁᛋᛖᚣᚦᚪᛡᛝᛟᛇᛚ•
ᛡᛏᛝ•ᛁᛚ•ᚠᛉᛡᛠᛏ•ᚠᚾᛂᚠᚻᚳ•ᚻᛞᛠᚣᛟ
ᛝ•ᛉᛇᚻᚩᛋᚻ•ᛇᛏᚠ•ᛚᚱᛇᚦᚪᛁᛁ•ᛒᚠᛁᛚ•ᛂᛡᛒᚣ
ᛗᚫᚫ•ᛞᚻᛟ•ᚪᚹᛉᛚᛏᛁᚪ•ᛟᛞᛖᚾᛈᚻᚣ•ᚦᛚᛖᛋ
ᛖᛟᚫᛖ•ᛏᚱᚪ•ᛁᚫᚹᚫ•ᛋᛈᚱ•ᛂᛡᚪᛏ•ᚫᚦ•ᚠᛠᚢ
ᛈᚣᚫᛝ•ᚣᚾᚻᛡ•ᚳᛗᚠᚾ•ᛞᛂ•ᛖᚩ•ᛒᚷᚻᚪ•ᛖᛞ
ᛟᚠᛇᛞᛟ•ᛈᚳᛁᚪᛒᚷᛒᛈᛟ•ᛟᛂᚠᚪᛖ•ᛂᚣᚩᛂ•ᚣ
•ᚫᛋ•ᚦᛁᚫᛂᚫᛏ•ᛖᛇᚻᛟ•ᚣᚠᚹᛞᚷ•ᛡᚱᛒᚢ•ᛒᛚ
ᚢ•ᚷᛈᛂᚪ•ᛏᛡ•ᚳᛂᚠᛡᛝᛚᚣᛒ•ᛗᚻ•ᚱᛚᛟᛠᛋ
ᚦᛝ•ᛏᚳᛟᛉᛁ•ᛂᚱᚳᛖᛏᛂᚷ•ᛡᛈᛏᛉᚩᛁᛂᛟ•ᚷ
ᚩᚪᚢ•ᚣᛖᚪᛋᛟᛇᚢᚪᛡ•ᛗᚱᛚᚳᚠ•ᛒᛗᛝ•ᚻᛉ•
ᛠᛂᚫ•ᛉᚪᚷᚻᚣᛏᛖᛝ•ᛉᛉᛗᚾᚫᛋ•ᚱᛗᛞᛋ

||page 45(Confirmed)
ᚳ•ᚦᛚᛟ•ᛝᛇᚢ•ᚻᚩ•ᛏ•ᚢᛁᚦᛂᚾᚠᚱᚦ•ᛋᛟᚷᛠ
ᛗᚪ•ᛝᛚᚪᛁᛒᛠᚢᛋ•ᚩ•ᛖᛋᛝ•ᚠᛡᚢᛟᛞᛇᚪ•ᛞ
ᛡᛒᚹᚩ•ᛂᛋ•ᛟᛝᛏᚳ•ᚻᚾᛇᛋ•ᛗᛚᚻᛞᛖᛈ•ᚫᛂᚱ
ᚪᚢᚻᚱᚦᚱ•ᛟᛂ•ᛟᛗᚩᛟᛏ•ᚫᛇ•ᛉᛒᚳ•ᛂᛁ•ᚪᚩᛉ•
ᚹᚪᚾᛈᛏᚢᚣ•ᛁᛒᚢ•ᚦᚩᛡ•ᛗᚳᚠᛉᚱᛁ•ᚪᛗᛏᛒ•
ᛗᛚᛁᚦᛏᛠᛋᚾᚷᛚ•ᛏ•ᛇᛈ•ᚩᛚᛞ•ᛚᚹᚳᛂᚹᛉ•ᚪ
ᛡᚹᛇ•ᛖᛖᚹ•ᛏᚪ•ᚣᚠᛉᚳ•ᛗᚩᚷᛞᚷ•ᛚᚳ•ᛒᚣᛋ
ᚣᚠᛞᚣᛝ•ᛠᛇᛏᚩᚢᚫ•ᛟᛁᛒ•ᛏᚾᚫᚠ•ᛂᛟᛗᚾ
ᛈ•ᛠᛡᚩᛏᛡᚪᚱᛞ•ᚪᛝᛈᚹᛗᛂᛟᛠᚩ•ᛚᚹᛉ•
ᚱᛗ•ᚩᛏᚹᛂᚹᚾ•ᚷᚳᛠ•ᛂᚳᚢᚱ•ᛟᛇᛟᚾᚻᚫᛉ•
ᚣᛚᚩ•ᚩᛡᚳᚻᛂ•ᛋᚣᚹᛁ•ᚣᚠᛋᚾᚪ•ᚷᛖᚾᛂᚪᚹᛠ•
ᛞᚠᛟ•ᚢᛁ•ᛖᛇᚦ•ᚫᛞ•ᚳᛂ•ᚷᚢᚻᚣᚻᛁᛒᛉᚾ•ᚹᛝ

||page 46(Confirmed)
ᚻᛏᛉᚫᛁᛂᚢ•ᛞᚠᛡᚫ•ᛋᛁᚹᛝᛈ•ᛗᛉᛂᛈ•ᛞᛗ
ᛝ•ᛇᛚᛞᚣ•ᚠᚩᛞ•ᛝᚷᚾᛇ•ᚷᛖ•ᛚᛉᚣ•ᚫᛚᛖᛉ•
ᛡᛝᛋ•ᚳᛁᚦ•ᚷᛏᚣ•ᚹᚩ•ᛝᛖ•ᛒᚪᛗᛏᚪᚷᛒ•ᛈᛡ
ᛟ•ᚪᛉᛝᛒᛞᛉᛂᚦᚢ•ᛏᛇᛖ•ᚣᚪᚳ•ᛠᚦᚹ•ᛏᛉ
ᚩᚳᛞᛒ•ᛟᚩᛠᚾᚠᚪ•ᛚᛗᛖᛁᚦᚫᚪᛡᛂᛁᚪᚱ•ᚦᚱᛖ
ᛖᚣᛋᚾ•ᛖᛏᚢᚻᛈᚳᚦᛋ•ᚳᛇᛉᛖᛇᚠ•ᛞᛠᛏ
ᛈ•ᚣᛇᛠᚢᛏ•ᛉᚦᚷᚻ•ᚫᚾᛠᚱ•ᛡᛒᛏᛁᛉ•ᚩᚢ
ᛝ•ᛚᛒᛇᚩ•ᛟᛉ•ᚦᛞᚷᚠ•ᚩᚱᛈᚪᛏ•ᚫᛋᚪᚦ•ᛖᛟᚪᛝ
ᚫ•ᚣᛒᛚ•ᛡᚦᚾᚠᛈᛟᛡᚾ•ᛖᚹ•ᛖᛗᚩ•ᛉᚹᚦᛠ•ᛁᚦ
ᛒᛖᚱ•ᛟᚳᛉ•ᛈᛖ•ᛁᚢᚦ•ᛈᚠᛞᛈᛂ•ᛁᛟᚻ•ᛒᚦᛏᚩ
ᚳᚢᛚ•ᛞᛂᛝ•ᚦᛂᛁᚪ•ᚹᚣ•ᚢᛝᚾ•ᛋᚾᛈᚠᚫᛒᛂᚫ•ᛡ
ᛗᚹ•ᛇᚪᚩᚾᛂᚳᛚᛒᛉ•ᚣᛠᚦᚹ•ᛝᛚᛗᚳᛡᛇᚠᚫ

||page 47(Confirmed)
ᛠᛁᚦ•ᛒᛠᛚᚦᚳᛞᛁᛇ•ᚠᚢᛉᛋᛉᛁᚦᚫᛋᛗ•ᚦᚹ•
ᛈ•ᛒᛋᛏᚫᚾᚱᛁ•ᚦᛇᛡᚱᛚᛡᚹ•ᚢᚩᛋᚱ•ᚹᚫ•ᛒᚹᛡᛖ
ᛟᛂ•ᛡᚣᛖᚩᛖᛡᚷᚫᚠᚾᚹ•ᛟᛏᚫᚠᛂᚹᛠ•ᚦᛞ•ᛁ
ᚫᚩᚾ•ᛋᚷᛈᚪᛖᚩ•ᚣᚦᚹ•ᚾᚷ•ᛠᛋᚩᛇᛏ•ᛝᛚᚷᛞ
•ᛒᛈᛈ•ᛗᛁᚪᛖ•ᛚᛏᛁ•ᚫᛂᛖ•ᛒᚾᚠᚪᛋᚷᛒᚠ•ᚫᚹᚣᚷ
ᚢᛡᚠᛠ•ᛖᛋᛞ•ᛚᚳᛒᛞᛏᛈ•ᛖᚾᛈᚣ•ᚱᚠᚻ•ᚫ
ᛝ•ᛟᚪᛗ•ᛒ•ᛡᛚ•ᛝᛋᚱᚢᚹᚱᚣᚻᚹ•ᚹᛡᛈ•ᛁᚻᚾᚻᚱ
•ᚳᛖᛏᚫᚩᛋ•ᚣᛋ•ᛝᚫᛡᛝᚫ•ᚻᚦ•ᛇᚪᛞᛋ•ᛒᛁᚳᛈ
•ᛇᛒᛟᚫ•ᛠᛝᛖ•ᛝᛠᚣ•ᛒᚣᛉᚻᚢᚠᚦᛞᚹ•ᛗ
ᚢᛁᛡᛂᚩ•ᛋᛇᚫᛇᛝᚱ•ᛚᛇᛠ•ᛏᚩᛂ•ᚩᛝᛈ•ᚱᚻ
ᛠᚢᛉᚦ•ᚣᚢᛋ•ᛡᛚᛖᚷᛗᛝᚹᚻᚱᛋ•ᚢᛟᚣᛠ
ᚷᚩᚷ•ᛇᛁᛖ•ᛠᛂᛇᛁᚾᛂᚩᛗᚱᛡᛉ•ᚠᚻᚳ•ᚪᚩᚪᚫ

||page 48(Confirmed)
ᚻᚳᛁᚦ•ᛂᚷ•ᛝᛖᚢ•ᛡᛏᛁ•ᛚᚩᚱᛈ•ᚠᚪ•ᛈᛞᚱᛒ•
ᛝᛁᛋ•ᚷ•ᚠᚾᛈᚠᛒ•ᛟᚦᛁᛠᚪ•ᛡᛏᚾᚳ•ᚦᛟᚻᛈᛖᛚ
ᚫ•ᛟᚠᛗ•ᛡᛝ•ᛒᛝᚦᛝᛠᚠ•ᛇᛗᛟ•ᚩᛠᛈ•ᛁᛡᚱ
•ᚹᚹᛟᚩᛒᚩ•ᚾᚩᛂᛟᚾ•ᚦᛡᚠ•ᚩᛂᛞᚦᛏᛁ•ᛈᚾᚪᚱᛂ•
ᛉᚱᚣ•ᛝᛡ•ᛏᛗ•ᛈᛞᚣᚻ•ᛗᛝᚫᚳᛇ•ᛡᚣᛂᛟ
•ᛝᚩᚢᛇᛁᚱ•ᛏᚪ•ᚩᚻᚪᛚᚫᛚᚪ•ᛋᛈ•ᛏᚪᛂᚳᚦᚢᛏᚹ
ᚦ•ᛗᚷᛖᛗᚣᛡᛁᛞ•ᚢᛋᚠᛒ•ᛟᛚᛟ•ᚪᛒ•ᚦᛚᚣ•ᚳ
ᛠᚣ•ᛞᛇᛁ•ᚹᛉ•ᛟᛝᛒᚢᛋᛞᚻᛞ•ᚢ•ᛠᚱ•ᚫᚩ
ᚻᛝᛒᚪᚹ•ᛈᛡᚾᛚᛇ•ᛖᛟᛝ•ᛡᚠᛇᛡ•ᚳᚦᚹ•ᛚᚦᚪᛁ
ᛈ•ᛞᛟᛂ•ᚢᛉᚢᚾᛠᚠ•ᚩᚾᚪ•ᚱᛠᚷ•ᛗᚢ•ᛗᛁᛂ
ᛒᛗᚱᚾᛗ•ᚩᚾᚠᚣ•ᛗᚠᛇᚠᛂ•ᛒᛡᛈᛂᛖᛡᛏ•ᛈᛟ
ᚫᛏᛟ•ᚻᛖᚾ•ᚳᛇᚩ•ᛋᚻᚫᛇ•ᛝᛁᛟ•ᛇᚠᚢᛞᚣᚪᛚᚠ

||page 49(Confirmed)
ᛡ•ᛖᛂ•ᚠᛚᛟ•ᛁᚳ•ᛁᛝᚷᚦ•ᛗᛋᚫᚷᚪᛠ•ᛗᛁ•ᛒᛡᛏ
ᚾ•ᛝᛗᚦ•ᛏᚣᚫᛂ•ᛖᚻᚠᚪᛡᚷ•ᚪᛗᛁ•ᛞᛉᛏ•ᚢᛖ
ᚦᚾ•ᛖᚪᛈᚹᛠᛚ•ᛒᚢᚱᛡᛟ•ᚪᚣ•ᛟᛇᚹᛂᛈᛞ•

||page 50(Confirmed)
numbers

||page 51(Confirmed)
ᚹᚹᛈ•ᚠᛡᛚᛉᛒᚾ•ᚳᛗᚾᚱᛗ•ᚻᚦᚫᛞᛂ•ᛒᛡᚫ•ᛇᚹ
ᛗᚢ•ᚪᛈᛡ•ᛈᛁᛂ•ᚪᚢᚾᛠᛖᛞᛗᚪ•ᛏᛟᛗ•ᛋᛞ
ᛝᚷᛚᛋᛞᛝ•ᛟ•ᛋᛂᛞ•ᛚᛟᚠᛂᚫᚠᚪ•ᛝᛟᚣᛈ•ᚣᚩ
ᛒᚷᚳᛖᛏᚹ•ᚪᛋᛒ•ᛗᛠᚣᛇᛗᚫᛚᚱ•ᚹᛇᛂᛒ•ᛈᛚᚠ

||page 52(Confirmed)
ᛈ•ᚠᛗ•ᛝᚪᛇᚾᛟᚹᛇᛉ•ᚣᚫᛉᛞᛟᚱᛒ•ᛡᚱᛟ•ᚹᛏ
ᚷᚱᛂᛖ•ᛠ•ᛈᛚᛞ•ᚻᚦᚱ•ᚦᚣᛚᛉ•ᛠᛈᚫᚠᚪ•ᚫᚪ
ᛒ•ᛈᛋ•ᛗ•ᛏᚫᚳᛈᛝᚹᚦ•ᚻᛠ•ᛞᚩᛂᚷ•ᛋᚩᛠᚳ
ᛖᛋ•ᚣᛖᚫ•ᛈᚦ•ᛁᛇᛈᚳᛝ•ᛈᚳᛇᚢᛏᚳᛡᛇᛝᚾ
ᚢᚻᚦ•ᚣᚠᛗᚾ•ᛝᚠᛂᛉᛟᚱᛗ•ᛝᛠᛂᛏᚳ•ᚢᚷ
ᚦ•ᚠᚦᛋ•ᚪᛈᚩᚪᚫᛞᛋᛝ•ᛒᛗᚩᚷ•ᚹᚠᛗᛖ•ᛠᛇᚻᚠ
ᚻᚳᚱᚫ•ᛝᛗᛉᚳ•ᛋᚪᚹᛋᛠ•ᚩᚣᛚᛉᛝ•ᛠᛟᛉ
ᛟᛠᛡᛝᛒ•ᛝᚳᚫᛁᚱ•ᛒᚠ•ᛏᚣᚣ•ᛠᛒ•ᚣᛚᚩ•ᛇ
ᛉ•ᚩᚷᛗᚩ•ᚠᛚᛟᛝᚦᛠ•ᚦᚣᛖᚣ•ᚾᚷᚾ•ᛡᛏ•ᛂ
ᛟᚾᛁ•ᛋᛟ•ᛠᚦᚣ•ᛋᛒ•ᚫᛚᚪᛂᛡᛖᚷᛉᛡᚾᛉᛏ•
ᛡᛒᚻᛚᚷ•ᚢᚦᛠ•ᚢᚾᛁᚩᛗᛠᛁᚷ•ᛟᚦᚱᚣ•ᛒᛖ
ᛠᚩᛈ•ᛗᛏᚱᚫᚢᚻᛁᛝ•ᛇᚳᚠ•ᛂᚾᚱᚷ•ᛟᚷᚻᚣᚻ

||page 53(Confirmed)
ᛇᚫᛠᚫᚣ•ᚢᛗᛈ•ᛉᛁᚢᚾᚩᛟᚾ•ᚷᛞᚦ•ᛡᚫᚹ•ᛞ
ᛟᛖᚱ•ᛗᚾᛖᚻᚷᛒᚢᛂ•ᚢᚦᛗᛖᛞᛝ•ᛒᚷᚣᚱ•ᛖ
ᛁᚢᛂ•ᚣᛡᛚᚢ•ᛂᛟ•"ᛠᛉᚣᛇᚱ•ᚩᛈᛋᚳᚫᛗ
ᛇ•ᚾᛂ•ᛖᚠᛋ•ᛖᚠᚪᛝ•ᚢᛝᛂᛇᚷᚠᛝᚱᛁᚦ•ᛂᚢᚫ•
ᚣᛋᚠᛖᚢᛋᚫᚣᛠ•ᛁᛏᛟᚱᛏᛟᚩ•ᚷᚾᚻ•ᛞᛗᚩᚳ
ᛞᛖᛏ•ᚹᛉᛞᛚ•ᚩᚫᛂ•ᛇᚢᛒ"•ᛗᛏ•ᛞᛗᛖ•ᛏ
ᛈᚹᛇᛋ•ᚹᛒᛇᚦ•ᚾᚻᚷᛂ•ᚱᛡᛞᛡᚦᚪᛁᛇᚫᛉᛚ•ᛇ
ᛠ•ᛡᚪᛂ•ᚻᚱ•ᚦᛈᛞᛂᛝᚩ•ᚷᚠᛇᛗᚳ•ᚻᛞᚩᛏᚳ
•ᚢᚱ•ᛈᚾ•

||page 54(Confirmed)
ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ•ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪ
ᛝ•ᛝᚦᛡᚹᛋᚻ•ᛁᚳ•ᚫᛈᚫᚷᚩ•ᛗᛁᚪ•ᛖᚩ•ᛏᚹ
ᚩ•ᚠᚣᚢᛏᛂ•ᚦᛂᛠᛖᚳᚾᛠ•ᚳᛠᛖ•ᚱ
ᚩᚢᛉ•ᛞᚹᚻᛒᛝᚠᚪᚳᛂᚢ•ᚩᛂᛡᛠᛁᛚᚷᚻ•ᛒᚢ
ᛂ•ᛉᚪᚳᚹᛡ•ᛗᚩᛈᚣᛞᛡᛚᛈ•ᛇᛁᚦᚱ•ᚣᚷᛗ•ᛉ
ᛟᚷᛋ•ᛗᛈᛂᛟᛞ•ᛟᛏᛡᛟ•ᛏᛝᛁ•ᛗᛝᚣᚪᚫ•ᛝ•ᚱ
ᚣᛂ•ᚾᛚᚢᛉᛒ•ᚻᛈᛂᚩᛠ•ᚷᚫᚹ•ᛉᛋᛞᚳ•ᚢᛏ•
ᛟᚻᛇᚾᛈᛏ•ᛠᚣᛒᚢᚷ•ᚷᚪᛇ•ᚾᚷᚩᛖᛚᛗᛒᚦ•ᚣ
ᛡᛟᛇᚣ•ᛗᚳᛟᚦ•ᛖᛚᚱᛇᛈᚱᛞᚣ•ᛉᛞ•ᛝᚣᛈ•
ᛋᛖᛉᚹ•ᚳᚷᚠᛞᚱᛖ•ᛞᛖᚹᚩᛇᛟ•ᚻᚩᛟ•ᛒᛋ•ᚻ
ᛠᚪᚳᛁᛗᛉᛂᛗᛖ•ᛗᛚ•ᚷᚩᛏᚦᛉᛖᛠᚱᚷᚣ

||page 55(Confirmed)
ᛝ•ᚫᛗᛁᚹ•ᛋᛒ•ᛉᛗ•ᛋᛇᚷᛞᚦᚫ•ᚠᛡᚪᛒᚳᚢ•ᚹᚱ•ᛒ
ᛠᚠᛉᛁᛗᚢᚳᛈᚻᛝᛚᛇ•ᛗᛋᛞᛡᛈᚠ•ᛒᚻᛇᚳ•
ᛇᛖ•ᛠᛖᛁᚷᛉᚷᛋ•ᛖᛋᛇᚦᚦᛖᛋ•ᚦᛟ•ᚳᛠᛁᛗ
ᚳᛉ•ᛞᛂᚢ•ᛒᛖᛁ•

||page 56 (Confirmed)
ᚫᛂ•ᛟᛋᚱ•ᛗᚣᛚᚩᚻ•ᚩᚫ•ᚳᚦᚷᚹ•ᚹᛚᚫ•ᛚ
ᚩᚪᛈ•ᛗᛞᛞᚢᚷᚹ•ᛚ•ᛞᚾᚣᛂ•ᚳᚠᛡ•ᚫᛏ
ᛈᛇᚪᚦ•ᚳᚫ
ᚳᛞ•ᚠᚾ•ᛡᛖ•ᚠᚾᚳᛝ•ᚱᚠ•ᚫᛁᚱᛞᛖ•ᛋᚣᛂᛠᚢ
ᛝᚹ•ᛉᚩ•ᛗᛠᚹᚠ•ᚱᚷᛡ•ᛝᚱᛒ•ᚫᚾᚢᛋ•

||page 57 
ᛈᚪᚱᚪᛒᛚᛖ• ᛚᛁᚳᛖ•ᚦᛖ•ᛁᚾᛋᛏᚪᚱ•ᛏ
ᚢᚾᚾᛖᛚᛝ•ᛏᚩ•ᚦᛖ•ᛋᚢᚱᚠᚪᚳᛖ•
ᚹᛖ•ᛗᚢᛋᛏ•ᛋᚻᛖᛞ•ᚩᚢᚱ•ᚩᚹᚾ•ᚳ
ᛁᚱᚳᚢᛗᚠᛖᚱᛖᚾᚳᛖᛋ• ᚠᛁᚾᛞ•ᚦ
ᛖ•ᛞᛁᚢᛁᚾᛁᛏᚣ•ᚹᛁᚦᛁᚾ•ᚪᚾᛞ•ᛖᛗᛖᚱᚷᛖ• 
"""

Page1 = ""
Page2 = ""
Page3 = ""
Page4 = ""
Page5 = ""
Page6 = ""
Page7 = ""
Page8 = ""
Page9 = ""
Page10 = ""
Page11 = ""
Page12 = ""
Page13 = ""
Page14 = ""
Page15 = ""
Page16 = ""
Page17 = ""
Page18 = ""
Page19 = ""
Page20 = ""
Page21 = ""
Page22 = ""
Page23 = ""
Page24 = ""
Page25 = ""
Page26 = ""
Page27 = "ᛗᛈᚣ•ᛚᛋᚩᚪᚫᚻᛚᛖᛇᛁᛗᛚ•ᛚᛋᚳᛈ:ᚾᚻᚷᚢᛡᚻᚢ•ᛒᚠ•ᛞᛂᚢ•ᛒᛖᛁ•ᚫᚠ•ᛈ•ᚫᛈᚦ•ᚱᛗᛚᚳ•ᛒᚷᚣᛗᛠᛒᚫ•ᚾᚦ•ᛗᚠᛡᛠᚳᛒᚷᚫᚠ•ᛖᛂᚱᚩ•ᛈᛒ•ᚠᛒᚩ•ᛇᚱᛠᚱ•ᛠᚷᛖᛚ•ᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖ•ᛏᚱ•ᚢᚣ•ᛟᛂᛉ•ᛠᚷᛝ•ᚣᛏᛝᚾ•ᚪᛏᛋ•ᛝᚪᛂ•ᚠᛚᛋᚢ•ᚹᛠᛈᛁᛏ•ᛁᚾ•ᚱᚱᛝᛗ•ᚣᛗᚠᛁᚫᛁᚪ•ᚢᛟᛒᚹ•ᛗᛁᚻᚣᚹᛞᛚ.ᛟᛏᛞ•ᛟᚳᛒ•ᛡᛒ•ᚪᛏ•ᚹᛏᛈ•ᚹᛠᚩᚱᚩᛖ•ᚣᛚᛋ.ᚢᛡᚱᚠᛂᛇᚱᛡᚦᛖᚢᛏ•ᛝᚫ•ᚾᚪᛠᚩᚪᚾᚪᚦᚷᚩ•ᚫᛉᛒᛏᛖᛠᛗᚷᚱᛗ•ᚣᛝᚠᛒ•ᛞᛟᛞᚪ•ᛠᚱᚳᛁᛈᛞᚠᛗᛝᚻ•ᛋᚩ•ᛞᛈᛉᚾ•ᛟᚱᛡᚾᚳᚳᛏ•ᚾᛈᚠ"
Page28 = "ᛈᚳ•ᛂᚦᛒᛁᚹ•ᛞᚹᛝᛠᛡᚹᛚ•ᚹᛂᚾᚪᛟ•ᛏᛞᛉᚣᛖᚱᛞ•ᚱᛏᛇᛁᚳᛈ•ᛝ•ᚦᛟᚷᛂᚦ•ᚣᛋ•ᛠᚻ•ᚠᛒᛚ•ᛁᚫᛚᛞᛉᚪ•ᛁᚹᚷ•ᛒᚩᚹᚾᛠ•ᛋᛖᛗᛒᛋ•ᚳᚹᚦᛟᚠᚻᚫ•ᛞᚢᛁᛒᛞ•ᛇᛝᛈᚠᛁ•ᛟᚢᚣᛏ•ᚻᚱᛖᚾᚳᛈᛡᛈᛞᛂ•ᛁᛏᛗᛋᚫᛉᚩᚣ•ᚪᛂᛗᛡᛖ•ᛇᛂᚠᛗᚱ.ᛞᛟᚪᛒᛞᚻ•ᚾᛈᚪ•ᛇᚱᚻᚾᛝᛠᚠᚾᚠ•ᚩᛗᛋᚾ•ᛠᚪᛁᚢᛚ•ᚪᚫ•ᛂᛉᛡᚠ•ᛁᛖᛈᛠᚻ•ᚠᛇᚩᚹ•ᛠᛂᛇᛁᛠᚫ•ᛂᛒ•ᛋ•ᚠᛖᚷ•ᛋᛁ•ᛟᛗᛒᛁᛝᛏᚪᚢᛁᚦ•ᚩᛝᛗᚠ•ᚹᛟᛒᛟᛡ•ᚠᚣᛝᚩᛠ•ᚳᛚᛈᚱ•ᛞᛂᚩᛝᛂ•ᚪᛖᛗᛈᚾ•ᚠᛠᚷᛞᛒ•ᚩᛉᚷᚾᚣᚷ•ᛠᛈᛂᛞᚾᛟᚩᚢᚾᚹᛗ.ᛂ•ᚢᚷᛠ•ᛗ•ᛇᚪ.ᚻᚦᛡ•ᛝᛈᛞᛒ•ᚳᛉᚳ•ᛠᛉ•ᛟᚣ•ᛒᚦᛁᛂᛚᛡᛝᛡ•ᚹᛂᚫ•ᛋᛗᚪᛡᛠᛇᛝᛏ•"
Page29 = "ᚦᛞᚷ•ᚢᛏᛚᛏᚣ•ᚢᛝ•ᚷᛟᚪᛏ•ᛂᚦᚣ•ᚫᚻᚪ•ᛒᛝ•ᚦᚢᚱᚪᚾᛞ•ᛁᛝᚫ•ᛚᚫᚷ•ᚹᛁᛒᚣ•ᚾᚫᚠ•ᛚᛋᛒ•ᛈᛟᚪᛟᛞᚷᛟᚣᛉᚷᛚ•ᛋᛠᛁ.ᚳᛟᛁᚦᛈᚹᛉ•ᛖᚢ•ᛟᛂᛝᛋᚢᛝ•ᚳᛡᛠ.ᛚᛇ•ᛚᚷᚢᛁᛏᛒᛋ•ᛞᛁ•ᚠᚠᚷᚠ•ᚦᛂᚳ•ᚫᛟ•ᛁᛗᛡᛁᛇᚦ•ᚩ•ᚢᛈᛒ•ᚻᛋ•ᛂᚣᛂᛖ.ᛒᛇᛇᚱ•ᚹᛂᛏᛡ•ᚳᚪᚫ.ᚩᛈᚱ•ᛡᚾᛗᛁᛝ•ᚻᚹᚦ•ᛡᚦᚻᚦ•ᛉᚫᚫᛋᚳᛡᚾᛇ•ᛟᛉᚢ•ᚱᛂᛖ•ᛚᚾᛞ•ᛗ•ᛏᚱᛟᚦ•ᛁᛝᛡᛒ•ᚳᚩᚹᛟ•ᛏᛗᛋᚱᚷ•ᚱᛚᛞᛚ•ᚩᚣ•ᛞᚳᚪᛖᛞᚠᚳ•ᛇᛖᛉᛚᚫ•ᛖᚩᛁᛋ•ᛡᛁᛟᛋᚪᛒᛗ•ᛗᚣᚹᛂ•ᛖᚫᛝᛚ•ᛂᚱᛇ•ᛈᛚᚩᚻ•ᚪᛞ•ᛡᛂ•ᛞᚠᚹᛞᛂᚳ•ᚾᚦᛉ•ᛂᚻ•ᚷᛚ•ᚠᛖᚦ•ᛇᚻ•ᛝᛖᛒᛚᛞᛁᛗᚠ•ᚹᛒᛗᛟᛁᛖᛁᛠ•ᛈᚻᛝᛖᛞᛟᚩᚻᛂ•ᚹᚩᚾᛂᛈᛗ•ᛖᚳ•ᛖᛇ•ᚷᚻᛗ"
Page30 = "ᛞᚪᛈᛖ•ᛗ•ᛉᚫᛒᛇᚱ•ᛖᚣᛟᚣ•ᚱᛠᛈᚢᛠ•ᚣᛖᚪᚻ•ᚩᛉᛠᚢᚻᛡᛟ•ᚷᚫᚩᛒᛉ•ᚫᚱᛞᛋᚩᚱ•ᚷᛠ•ᛉᚻᛁ•ᚷᚳᛞᛠᛡᚳ•ᛂᛠᛉᛇᚻᛋᚹ•ᛝᛡᚷᛖᛡᚣ•ᛠᚩᚷ•ᚱᚦᚠᛟᚩᚦ•ᚦᛁᛏᚱ•ᛇᛉᛇ•ᚢᚷᛠ•ᛟᛏ•ᚩᚠᛚ•ᛟᛝᛈ•ᚱᛡᚪᚩᛏ•ᚩᛠᚷᚫᛗ•ᛈᛋᚱ•ᛖᚦᚠ•ᛞᚹᚾᛚ•ᛝᚩᛇᛂ•ᚳᛚᚢᚹᛏ•ᚩᛖᛏᚠᚪᛚ•ᛟᛇᛟ•ᛠᚱᛇ•ᚢᚪᚦᛈᛟᛡᛉ.ᛡᛒᚱᛒᚠᚢᛚᚢᛟ•ᛒᛇᛒ•ᛉᚦᚹ•ᛝᚣᛖ•ᚳᚫᚣᛟ•ᚹᛁᛝᚫᛏ•ᚫᛇᛈᛡᛟᚠ•ᛚ•ᛝᚠᛡ.ᛞᚪᛚᛈ•ᛋᛁ•ᚢᚣᚪᛚᛠᛝᚹ•ᚪᛏᛈᚳᚣ•ᛝᚫᚻᛗᛞᚷᛚ.ᛠᛉᛒ•ᛇᛡᛋᛖ•ᚣᛁᛚ•ᚣᛠᚣ•ᚻ.ᚣᛉᚾᛏᚫᛉᛋᚦᚪᚹᛗ•ᚪᚱ•ᚪᚩᚻ.ᛗᛖᚫᛞᛠᛁᛗ•ᛒᛟᚾᚳᚩᚱᛉ•ᛋᚹᚫ•ᚻᛖ•ᛋᚠᚾ•ᚢᚦᛟᚷᛖᚪᛟᛇᛇ•"
Page31 = "ᚦᚳᛒᛝᛏᛉᛡᛞ•ᛋᛡ•ᚩᚠ.ᛈᛖᛞᛋᛁ•ᛚᛁᚻᚾᛝᚱ•ᚻᛈ•ᛇᚢᚫᛞ•ᛚᚻᛉᚳᛈ•ᛁᛗᛉᚳ.ᛂᚫᚾᛞᛋ•ᛏᛚᛡᚩᛋᛗ•ᛚᛞᚾ•ᛈᚫᛏᚷᛈ•ᚫᚦᛂᛗ•ᛒᚻᚩᚻᛁᚷᚻᚳ•ᛚᚹᛋᚱᛇᛗᛏ•ᛂᚳᛁ•ᛠᚦᛞ•ᛏᛚ•ᚱᛖᛠᛒᚪ•ᛒᚠᛒ•ᛁᛒᛡᛇᛏᚣ•ᛏᛖᚣᚳᚱᛋᚠ•ᛁᚦᚪᛉ•ᚪᚣᚫᛠ•ᛂ•ᛈᛗ•ᚠᛋ•ᚪᛒᚱ.ᛉᚣᚻ•ᚦᚩ•ᛇᛞᚢ.ᚠᛁ•ᚻᚩᚫᚠᚣᚷᚱᚪᛂ•ᛏᛉᛇ•ᛖᛠᛞ•ᛏᚠᚢᛝ•ᚫᛂᛖᛈᚳᛒᚦᚢᛝ•ᛡᛒᚹᚱ•ᛖᚾᛈᛇᚣᛇ•ᛉᚱᚹ•ᛒᛡᛞ•ᛖᚱᚩᚻᚣᛠᛈᚦ•ᛗᛁᚷᛚ•ᚹᛉᚫ.ᚠᛞᚾ•ᛂᛟ•ᚻᛚᛡ•ᛗᛖᚷ•ᛟᛁᛡ•ᚻᛟᚱᛇᚹᚣᚠ•ᛈ•ᛂᚷᚦ•ᚪᛒᛝ•ᛈᛒᚪᛖ•ᚢᚹᚻᚩᛒᛋᛉ•ᚹᛞ.ᚦᛇᚱᛖ•ᛂᚾᛞᛝᚹᚪ•ᚻᛖᚹ•ᛟᛡᛂᛡᛟᛝᛂᛉᛚᛂ•ᛞᛉᛟᛈ•ᚱᚪᛁᛏᚷᛉᛝᛇ•ᛠᛗᚩ"
Page32 = "ᛚ•ᚦᚫᚹ•ᚫᚢᛈᛡᚳ•ᚹᛝᚻᚹᛒᛗᛋᛟᛖᛁᛡ•ᛟᚹᚦᚻᛒ•ᛡᚱᛏᚦᚠ•ᚠᚩᚦ.ᚻᚩᛗᛖᛉᚹᛞᛋᛚᚠᛞ•ᛝᛒᛇᛡᛚᚪ•ᚹᛞᚾᚫᛉᛏᚣᛗᚷ•ᚦᚹᛉᛡᚦ•ᚹᛒᛋᚱᛉᛡᛉᚪ•ᚢᛒᚻᛠ•ᚹᛝᚢᚻᛇᛝᛡᛠᛂ•ᛋᛈᚦᛏ•ᛟᛝᚩᛗᛒᚢᛞᛋ•ᛒᛂ•ᛠᚱᛟ•ᛖᚾ•ᚾᚹᚷᚢᛚᚪᚩᚣ•ᚢᛏᚠᛂᛏ•ᚪᚷᛒᛇ:"
Page33 = ""
Page34 = ""
Page35 = ""
Page36 = ""
Page37 = ""
Page38 = ""
Page39 = ""
Page40 = "ᚠᚾᛗ•ᚣᚷᛞᚫᚻ•ᚪᛈᛉᚣᚻ•ᛇᛠᚩᛖ•ᛏᛝᛠ•ᛚᛁᛏᚦᚠ•ᛗᚪᚳᛖ.ᛞᚳ•ᛏᚱᛟᚷᛠᚾᚫᛒᚢᛖᛒᚢ•ᚦᚠᛟ•ᚷᛋᛟ•ᛁᛈ•ᛟᛉᛋᛒ•ᚹᛂᛒᚣᛗᚢᛠ•ᚱᛁᚢᛟᛂᛁ•ᛗᛖᚫ•ᚱᛋᛉᛝ.ᛠᛈᛚ•ᛞᚩᛚᛁᛉᛠᛝᛖᚱ•ᚾᛈᛖᚹᛡ•ᚾᛂᛏᚣ.ᛋᚩᛋᛏᛝ•ᚢᚾᛇᚪ•ᛖᛏᚪᛂᚳᚣ•ᛟᛒ•ᛚᛋ•ᛒᛞᛂ•ᛁᛝᚣᛖᚳ•ᛂᚻᛚᚣ•ᚷᚫᛚᛞ•ᛚᚫᛚᚦᛉ•ᛚ•ᛖᛉᚩᛉᛁᚳᚢᛗᚾᚢ•ᚩᚾᛇ•ᚻᛡᛚᛇᚩᚫᚪ•ᚩᛟᚩ•ᚣᚱ•ᛖᚠᚢ.ᛁᚻ•ᛟᛚᚾᛏ•ᚠᛞᚱᛠᚷ•ᛈᚩᛇᚩᛗᛠᛒ•ᛂᛡ•ᛋᛗᚠ•ᛏᚠᚫᚩ•ᛟᚳᛚᛞᛡᛚ•ᚩᚳᛝᚢ•ᛈᚹᛏ•ᚷᚳᛋ•ᚢᛟᚷᚦ•ᚠᛉᚠᛏ•ᚳᛋᛉᛟ•ᚷᚠᛉᚾᛞ•ᛒᛏᛠᛡ.ᛈᛡ"
Page41 = "ᛠᛁᚪ•ᛋᚣᛗᛞᚣᛋ•ᛒᛞᛂᛞ.ᚩᚾᛏᛚ•ᚳᚪᛝ•ᚱᚷᚻᚷ•ᛂᚹᚠ•ᚪᚢᛇ•ᛞᛏᛗᛂᛁ•ᛝᚫ•ᛉᛈᚳᛈᛠ•ᛟᚪᛒᛁᛁᛋ•ᛇᚷᚻᛋ•ᛇᛡᛒ•ᚠᚹᛝ•ᚫᚪᚠᚩᚣᛡᚪᚾᚻ•ᛒᚦᛟᛇᚣᛟᛁᛒ•ᛟ•ᚩᛋᚹ•ᛞᚳᚠᚪᛁ.ᛉᛏᛟᚢᚩᛟᚦᛈᛋᚩ•ᚻᛇᚦᛝ•ᛏᛠᚠᛝᛠ•ᚩᛗ•ᛏᚠᚣᛚᚣ•ᚹᛚᛞ•ᚪᛉᛠ•ᚪᛂ•ᚩᛋᛒᛚ•ᚳᛖᚾᚪᚩᚱᛏᚦ•ᚱᛒᚳᚣ•ᛠᛗᚹᛚ•ᚻᛈ•ᛇᛈᛖ•ᛚᛂᚩᛡᚪ•ᛖᛋᚫᚩ•ᛠᛉᛝᚣ•ᛖᚫᛒᛗ•ᛖᚻᚱ•ᛈᚾᛗ•ᚹᛏᛟᚣᚢ•ᚠᛉᛈᛗᚩᚷᚾ•ᛡᛇᚳᚠᛒᛈᛗ•ᛋᛇᛁ•ᛖᛈᚢᚱᛏᚳᚣ•ᛂᛚᚠ.ᚱᛚᚱᚫᛖᚻᛟ•ᛇᚣᛡ•ᚩᛉ•ᚪᛋᚣᛁᛝ•ᛉᛚᛂ'ᚳ•ᛖᚣᚢᛝᚦᛇᚱ•ᛠᛁᚫ•ᚦᚠᛟᚷᛠᛁ•ᛈᛋᛒ•ᛗᛒᛂᚠᚾᚳᛖ•ᚻᚫᚩᛂ•ᛉᛂᛚᛈᚪᛁ•ᛟᚹᚱᛁᚱᚦᛖᛉ•ᚪᚾ•ᛞᛂᚷ•ᛟᛟᚳᛏᛂ"
Page42 = "ᛞ•ᛉᚾᛗᚦ•ᛁᛂᚱ•ᛈᛉᚢᚫᚦᛒᚠᛂᚦ•ᚠᚪᛝᛖ•ᚹᚹᚣᛚᛇ•ᚢᚣ•ᚾᚱᚪ•ᛈᚾᚹ•ᛚᚾᛏᛚᚢᛒᚱᛝᚪᛋ•ᚫᛈ•ᛂᛚᚢᚳᚷ•ᛚᛏᛂᚹᛈ•ᚫᛗᛚ•ᛉᛚᛗᛏᛞᚠᛈᛁ.'ᚠᚳᚦᛗᛂᚹᚱᚪᛚ•ᚩᛝᚱᚢᛈᚱᛟᛡ•ᚳᛉᚱ•ᛇᛏᚦᚾ•ᚱᛇᚫᛞᛟᚻ•ᛒᚾᚣ•ᚠᛡᚪᛡᛖᚫᛞᛂᚢᛖ•ᚦᚱ•ᚩᛇᚱᛡ•ᚣᛁᛉᛇᚻᚩᛠ•ᚫᚻᛡᛝᛠᚦ•ᚾᚣ•ᚾᚠᛁᛝ'.'ᛏᚻᚹᚫ•ᛒᛇ•ᛡᚻᛉᛒ•ᛞᛝᚱᛂᚦᚻ•ᚪᚷᚣᛁᚠᚷ•ᛁᛏᛞᛠᛒᚠᚩᛈ•ᛇᛡᛟᚹᚱᚾᚩᛏ•ᛋᚹᚢ.ᛖᛡᛖᛡᚦ•ᛉᚪᚷᛈᚾ•ᛋᚱᚠᛞᛝᚻᛖᛂᛞ•ᛂᛡ•ᚱᚹ•ᚷᛝᚪᛒ•ᛂᛈᛂ•ᛏᚠᛉ•ᚪᛂ•ᛁᚠᛉᚢᚩᚣᚻᚦ•ᚻᚾᛁᛒ•ᛡᛟᛡᛋᛈᚣᛉ•ᛠᚢᛠᛚ•ᚠᛝᛗᚻ•ᚦᛒᚩ•ᛗᛚ•ᚩᛠᛋᚦᛠ•ᛇᛋᛉ•ᚠᛗᛒ•ᚫᛋᛇᚾᛡᚾ•ᚢᚫᚹ•ᛞᛠᚢᚾᛝᚠᚾᛖᚫ"
Page43 = "ᚻᛂ•ᛁᛖᛏᛡ•ᚷᛁᚩᚾ•ᚳᚢᚫᛗᛈᛋᚪᛡ•ᚷᛚᚣᚹᛟ'•ᚠᚢ•ᛉᚠᚫᛞᚠᛡᛂᚾ.ᚻᛋᚦᚠ•ᛏᚠᛂᚱᚹᚠᛋᚾᚹᛂᛖᛒᚢᚦ•ᚩᛇᚫᛈ•ᛡᛟ.ᚢᛁᚩᛂᚩᛇᛟᛂᛞᚩ•ᛈᚹᛞᚷᚱ•ᚠᛟ•ᛇᚷ•ᛂᛟᛇᚫᛋᚫᚣ•ᛒᛏᛞᛟ•ᛠᚻᛡᚱᛠᛠᛉᛋ•ᚠᚾᚣᚱᚠ.ᚪᚾᛡᚪᛖᚫ•ᚳᛇᛁᛝ•ᛒᛡᛞᛠᚫᛒᛠᚳᛉᚠ•ᚫᛏᛁᚱᚪᛗᚩ•ᛚᛉᛋᚪ•ᛒᚩᛈᚫᚩᛝᚻᛇᛖᛇᚫ•ᚻᛖᛇᛠ•ᚱᛗᛞ•ᚫᛇᛗ.ᚾᚾᚣᛡ•ᚱᚾᛗᛠ•ᛂᛉᛋᛂ•ᛟᛖᛒ•ᛏᚻᚾ•ᚠᚪᚠ•ᛒᚾ•ᚩᚾ•ᛖᛋᛏᛒᚹᛡ.ᚻᛏ•ᚩᛟᚩ•ᛒᚾᛖᚳᛁᚹᚣᛟ•ᛟᚩᛒ•ᛋᛖᚩ•ᚫᚻᛟᚠᚫᚷᚩᛂ•ᛟᛒᚻ•ᚳᛖᛁᛚᚫᚣᛚ•ᚢᛚᛁ•ᚾᛟᛏ•ᚫᛈᛟᛈᛝᛗ•ᚳᚢᛁ•ᚣᛋᚳᚢᛡᛇᚩ•ᚠᛖ•ᚷᛟ•ᚻᚫ•ᛝᚠ•ᛗᚠᛝᛉᛞᛁ•ᛗᛝᚣᚪᛝᚠᛉᛁᛟᚷᛚ•ᛇᚩ•ᚫᛡᛏ•ᛂᛏ"
Page44 = "ᛠᚢ•ᚷᚦᚣ•ᚦᚾᛟᚣᚩᛖᚻ•ᛁᛋᛖᚣᚦᚪᛡᛝᛟᛇᛚ•ᛡᛏᛝ•ᛁᛚ•ᚠᛉᛡᛠᛏ•ᚠᚾᛂᚠᚻᚳ•ᚻᛞᛠᚣᛟᛝ•ᛉᛇᚻᚩᛋᚻ.ᛇᛏᚠ•ᛚᚱᛇᚦᚪᛁᛁ•ᛒᚠᛁᛚ•ᛂᛡᛒᚣᛗᚫᚫ•ᛞᚻᛟ•ᚪᚹᛉᛚᛏᛁᚪ•ᛟᛞᛖᚾᛈᚻᚣ•ᚦᛚᛖᛋᛖᛟᚫᛖ•ᛏᚱᚪ•ᛁᚫᚹᚫ•ᛋᛈᚱ•ᛂᛡᚪᛏ•ᚫᚦ•ᚠᛠᚢᛈᚣᚫᛝ•ᚣᚾᚻᛡ•ᚳᛗᚠᚾ•ᛞᛂ•ᛖᚩ•ᛒᚷᚻᚪ•ᛖᛞᛟᚠᛇᛞᛟ•ᛈᚳᛁᚪᛒᚷᛒᛈᛟ•ᛟᛂᚠᚪᛖ•ᛂᚣᚩᛂ•ᚣ•ᚫᛋ•ᚦᛁᚫᛂᚫᛏ•ᛖᛇᚻᛟ•ᚣᚠᚹᛞᚷ.ᛡᚱᛒᚢ•ᛒᛚᚢ•ᚷᛈᛂᚪ•ᛏᛡ•ᚳᛂᚠᛡᛝᛚᚣᛒ•ᛗᚻ•ᚱᛚᛟᛠᛋᚦᛝ•ᛏᚳᛟᛉᛁ•ᛂᚱᚳᛖᛏᛂᚷ•ᛡᛈᛏᛉᚩᛁᛂᛟ•ᚷᚩᚪᚢ•ᚣᛖᚪᛋᛟᛇᚢᚪᛡ•ᛗᚱᛚᚳᚠ•ᛒᛗᛝ•ᚻᛉ•ᛠᛂᚫ•ᛉᚪᚷᚻᚣᛏᛖᛝ•ᛉᛉᛗᚾᚫᛋ•ᚱᛗᛞᛋ"
Page45 = "ᚳ•ᚦᛚᛟ•ᛝᛇᚢ•ᚻᚩ•ᛏ.ᚢᛁᚦᛂᚾᚠᚱᚦ•ᛋᛟᚷᛠᛗᚪ•ᛝᛚᚪᛁᛒᛠᚢᛋ•ᚩ•ᛖᛋᛝ•ᚠᛡᚢᛟᛞᛇᚪ•ᛞᛡᛒᚹᚩ•ᛂᛋ•ᛟᛝᛏᚳ•ᚻᚾᛇᛋ•ᛗᛚᚻᛞᛖᛈ•ᚫᛂᚱᚪᚢᚻᚱᚦᚱ•ᛟᛂ•ᛟᛗᚩᛟᛏ•ᚫᛇ•ᛉᛒᚳ•ᛂᛁ•ᚪᚩᛉ•ᚹᚪᚾᛈᛏᚢᚣ•ᛁᛒᚢ.ᚦᚩᛡ•ᛗᚳᚠᛉᚱᛁ•ᚪᛗᛏᛒ•ᛗᛚᛁᚦᛏᛠᛋᚾᚷᛚ•ᛏ•ᛇᛈ•ᚩᛚᛞ•ᛚᚹᚳᛂᚹᛉ•ᚪᛡᚹᛇ•ᛖᛖᚹ•ᛏᚪ•ᚣᚠᛉᚳ•ᛗᚩᚷᛞᚷ•ᛚᚳ•ᛒᚣᛋᚣᚠᛞᚣᛝ•ᛠᛇᛏᚩᚢᚫ•ᛟᛁᛒ•ᛏᚾᚫᚠ.ᛂᛟᛗᚾᛈ•ᛠᛡᚩᛏᛡᚪᚱᛞ•ᚪᛝᛈᚹᛗᛂᛟᛠᚩ•ᛚᚹᛉ•ᚱᛗ•ᚩᛏᚹᛂᚹᚾ•ᚷᚳᛠ•ᛂᚳᚢᚱ•ᛟᛇᛟᚾᚻᚫᛉ•ᚣᛚᚩ•ᚩᛡᚳᚻᛂ•ᛋᚣᚹᛁ•ᚣᚠᛋᚾᚪ•ᚷᛖᚾᛂᚪᚹᛠ•ᛞᚠᛟ•ᚢᛁ•ᛖᛇᚦ•ᚫᛞ•ᚳᛂ•ᚷᚢᚻᚣᚻᛁᛒᛉᚾ•ᚹᛝ"
Page46 = "ᚻᛏᛉᚫᛁᛂᚢ•ᛞᚠᛡᚫ•ᛋᛁᚹᛝᛈ•ᛗᛉᛂᛈ•ᛞᛗᛝ•ᛇᛚᛞᚣ•ᚠᚩᛞ•ᛝᚷᚾᛇ•ᚷᛖ•ᛚᛉᚣ•ᚫᛚᛖᛉ.ᛡᛝᛋ•ᚳᛁᚦ•ᚷᛏᚣ•ᚹᚩ•ᛝᛖ•ᛒᚪᛗᛏᚪᚷᛒ.ᛈᛡᛟ•ᚪᛉᛝᛒᛞᛉᛂᚦᚢ•ᛏᛇᛖ•ᚣᚪᚳ•ᛠᚦᚹ•ᛏᛉᚩᚳᛞᛒ•ᛟᚩᛠᚾᚠᚪ,ᛚᛗᛖᛁᚦᚫᚪᛡᛂᛁᚪᚱ•ᚦᚱᛖᛖᚣᛋᚾ•ᛖᛏᚢᚻᛈᚳᚦᛋ•ᚳᛇᛉᛖᛇᚠ•ᛞᛠᛏᛈ•ᚣᛇᛠᚢᛏ•ᛉᚦᚷᚻ•ᚫᚾᛠᚱ•ᛡᛒᛏᛁᛉ•ᚩᚢᛝ•ᛚᛒᛇᚩ•ᛟᛉ•ᚦᛞᚷᚠ•ᚩᚱᛈᚪᛏ•ᚫᛋᚪᚦ•ᛖᛟᚪᛝᚫ•ᚣᛒᛚ•ᛡᚦᚾᚠᛈᛟᛡᚾ•ᛖᚹ•ᛖᛗᚩ•ᛉᚹᚦᛠ•ᛁᚦᛒᛖᚱ•ᛟᚳᛉ•ᛈᛖ•ᛁᚢᚦ•ᛈᚠᛞᛈᛂ•ᛁᛟᚻ•ᛒᚦᛏᚩᚳᚢᛚ•ᛞᛂᛝ•ᚦᛂᛁᚪ•ᚹᚣ•ᚢᛝᚾ•ᛋᚾᛈᚠᚫᛒᛂᚫ•ᛡᛗᚹ•ᛇᚪᚩᚾᛂᚳᛚᛒᛉ•ᚣᛠᚦᚹ•ᛝᛚᛗᚳᛡᛇᚠᚫ"
Page47 = "ᛠᛁᚦ•ᛒᛠᛚᚦᚳᛞᛁᛇ•ᚠᚢᛉᛋᛉᛁᚦᚫᛋᛗ•ᚦᚹ.ᛈ•ᛒᛋᛏᚫᚾᚱᛁ•ᚦᛇᛡᚱᛚᛡᚹ•ᚢᚩᛋᚱ•ᚹᚫ•ᛒᚹᛡᛖᛟᛂ•ᛡᚣᛖᚩᛖᛡᚷᚫᚠᚾᚹ•ᛟᛏᚫᚠᛂᚹᛠ.ᚦᛞ•ᛁᚫᚩᚾ•ᛋᚷᛈᚪᛖᚩ•ᚣᚦᚹ•ᚾᚷ.ᛠᛋᚩᛇᛏ•ᛝᛚᚷᛞ•ᛒᛈᛈ•ᛗᛁᚪᛖ•ᛚᛏᛁ•ᚫᛂᛖ•ᛒᚾᚠᚪᛋᚷᛒᚠ•ᚫᚹᚣᚷᚢᛡᚠᛠ•ᛖᛋᛞ•ᛚᚳᛒᛞᛏᛈ•ᛖᚾᛈᚣ•ᚱᚠᚻ•ᚫᛝ•ᛟᚪᛗ•ᛒ•ᛡᛚ•ᛝᛋᚱᚢᚹᚱᚣᚻᚹ•ᚹᛡᛈ•ᛁᚻᚾᚻᚱ•ᚳᛖᛏᚫᚩᛋ•ᚣᛋ.ᛝᚫᛡᛝᚫ•ᚻᚦ•ᛇᚪᛞᛋ•ᛒᛁᚳᛈ•ᛇᛒᛟᚫ•ᛠᛝᛖ•ᛝᛠᚣ•ᛒᚣᛉᚻᚢᚠᚦᛞᚹ•ᛗᚢᛁᛡᛂᚩ•ᛋᛇᚫᛇᛝᚱ•ᛚᛇᛠ•ᛏᚩᛂ•ᚩᛝᛈ•ᚱᚻᛠᚢᛉᚦ•ᚣᚢᛋ•ᛡᛚᛖᚷᛗᛝᚹᚻᚱᛋ•ᚢᛟᚣᛠᚷᚩᚷ•ᛇᛁᛖ•ᛠᛂᛇᛁᚾᛂᚩᛗᚱᛡᛉ•ᚠᚻᚳ•ᚪᚩᚪᚫ"
Page48 = "ᚻᚳᛁᚦ•ᛂᚷ.ᛝᛖᚢ•ᛡᛏᛁ•ᛚᚩᚱᛈ.ᚠᚪ•ᛈᛞᚱᛒ•ᛝᛁᛋ•ᚷ•ᚠᚾᛈᚠᛒ•ᛟᚦᛁᛠᚪ•ᛡᛏᚾᚳ.ᚦᛟᚻᛈᛖᛚᚫ•ᛟᚠᛗ•ᛡᛝ.ᛒᛝᚦᛝᛠᚠ•ᛇᛗᛟ•ᚩᛠᛈ•ᛁᛡᚱ•ᚹᚹᛟᚩᛒᚩ•ᚾᚩᛂᛟᚾ•ᚦᛡᚠ•ᚩᛂᛞᚦᛏᛁ•ᛈᚾᚪᚱᛂ•ᛉᚱᚣ•ᛝᛡ•ᛏᛗ•ᛈᛞᚣᚻ•ᛗᛝᚫᚳᛇ.ᛡᚣᛂᛟ•ᛝᚩᚢᛇᛁᚱ•ᛏᚪ•ᚩᚻᚪᛚᚫᛚᚪ•ᛋᛈ•ᛏᚪᛂᚳᚦᚢᛏᚹᚦ•ᛗᚷᛖᛗᚣᛡᛁᛞ•ᚢᛋᚠᛒ•ᛟᛚᛟ•ᚪᛒ•ᚦᛚᚣ•ᚳᛠᚣ•ᛞᛇᛁ.ᚹᛉ•ᛟᛝᛒᚢᛋᛞᚻᛞ•ᚢ•ᛠᚱ•ᚫᚩᚻᛝᛒᚪᚹ•ᛈᛡᚾᛚᛇ•ᛖᛟᛝ•ᛡᚠᛇᛡ•ᚳᚦᚹ.ᛚᚦᚪᛁᛈ•ᛞᛟᛂ•ᚢᛉᚢᚾᛠᚠ•ᚩᚾᚪ•ᚱᛠᚷ•ᛗᚢ•ᛗᛁᛂᛒᛗᚱᚾᛗ•ᚩᚾᚠᚣ•ᛗᚠᛇᚠᛂ•ᛒᛡᛈᛂᛖᛡᛏ•ᛈᛟᚫᛏᛟ•ᚻᛖᚾ•ᚳᛇᚩ•ᛋᚻᚫᛇ•ᛝᛁᛟ•ᛇᚠᚢᛞᚣᚪᛚᚠ"
Page49 = "ᛡ•ᛖᛂ•ᚠᛚᛟ•ᛁᚳ•ᛁᛝᚷᚦ•ᛗᛋᚫᚷᚪᛠ•ᛗᛁ•ᛒᛡᛏᚾ•ᛝᛗᚦ•ᛏᚣᚫᛂ•ᛖᚻᚠᚪᛡᚷ•ᚪᛗᛁ•ᛞᛉᛏ•ᚢᛖᚦᚾ•ᛖᚪᛈᚹᛠᛚ•ᛒᚢᚱᛡᛟ•ᚪᚣ•ᛟᛇᚹᛂᛈᛞ:"
Page50 = ""
Page51 = "ᚹᚹᛈ•ᚠᛡᛚᛉᛒᚾ•ᚳᛗᚾᚱᛗ•ᚻᚦᚫᛞᛂ•ᛒᛡᚫ•ᛇᚹᛗᚢ•ᚪᛈᛡ•ᛈᛁᛂ•ᚪᚢᚾᛠᛖᛞᛗᚪ•ᛏᛟᛗ•ᛋᛞᛝᚷᛚᛋᛞᛝ•ᛟ•ᛋᛂᛞ•ᛚᛟᚠᛂᚫᚠᚪ•ᛝᛟᚣᛈ•ᚣᚩᛒᚷᚳᛖᛏᚹ•ᚪᛋᛒ•ᛗᛠᚣᛇᛗᚫᛚᚱ•ᚹᛇᛂᛒ•ᛈᛚᚠ"
Page52 = "ᛈ•ᚠᛗ•ᛝᚪᛇᚾᛟᚹᛇᛉ•ᚣᚫᛉᛞᛟᚱᛒ•ᛡᚱᛟ•ᚹᛏᚷᚱᛂᛖ•ᛠ•ᛈᛚᛞ•ᚻᚦᚱ•ᚦᚣᛚᛉ•ᛠᛈᚫᚠᚪ•ᚫᚪᛒ•ᛈᛋ•ᛗ•ᛏᚫᚳᛈᛝᚹᚦ•ᚻᛠ•ᛞᚩᛂᚷ•ᛋᚩᛠᚳᛖᛋ•ᚣᛖᚫ•ᛈᚦ•ᛁᛇᛈᚳᛝ.ᛈᚳᛇᚢᛏᚳᛡᛇᛝᚾᚢᚻᚦ•ᚣᚠᛗᚾ•ᛝᚠᛂᛉᛟᚱᛗ•ᛝᛠᛂᛏᚳ•ᚢᚷᚦ•ᚠᚦᛋ•ᚪᛈᚩᚪᚫᛞᛋᛝ•ᛒᛗᚩᚷ•ᚹᚠᛗᛖ•ᛠᛇᚻᚠᚻᚳᚱᚫ•ᛝᛗᛉᚳ•ᛋᚪᚹᛋᛠ•ᚩᚣᛚᛉᛝ•ᛠᛟᛉᛟᛠᛡᛝᛒ•ᛝᚳᚫᛁᚱ.ᛒᚠ•ᛏᚣᚣ•ᛠᛒ•ᚣᛚᚩ•ᛇᛉ•ᚩᚷᛗᚩ•ᚠᛚᛟᛝᚦᛠ•ᚦᚣᛖᚣ•ᚾᚷᚾ.ᛡᛏ•ᛂᛟᚾᛁ•ᛋᛟ•ᛠᚦᚣ•ᛋᛒ•ᚫᛚᚪᛂᛡᛖᚷᛉᛡᚾᛉᛏ•ᛡᛒᚻᛚᚷ•ᚢᚦᛠ•ᚢᚾᛁᚩᛗᛠᛁᚷ•ᛟᚦᚱᚣ•ᛒᛖᛠᚩᛈ•ᛗᛏᚱᚫᚢᚻᛁᛝ•ᛇᚳᚠ•ᛂᚾᚱᚷ•ᛟᚷᚻᚣᚻ"
Page53 = "ᛇᚫᛠᚫᚣ•ᚢᛗᛈ•ᛉᛁᚢᚾᚩᛟᚾ•ᚷᛞᚦ•ᛡᚫᚹ•ᛞᛟᛖᚱ•ᛗᚾᛖᚻᚷᛒᚢᛂ•ᚢᚦᛗᛖᛞᛝ•ᛒᚷᚣᚱ•ᛖᛁᚢᛂ•ᚣᛡᛚᚢ•ᛂᛟ.ᛠᛉᚣᛇᚱ•ᚩᛈᛋᚳᚫᛗᛇ•ᚾᛂ•ᛖᚠᛋ•ᛖᚠᚪᛝ•ᚢᛝᛂᛇᚷᚠᛝᚱᛁᚦ•ᛂᚢᚫ•ᚣᛋᚠᛖᚢᛋᚫᚣᛠ•ᛁᛏᛟᚱᛏᛟᚩ•ᚷᚾᚻ•ᛞᛗᚩᚳᛞᛖᛏ•ᚹᛉᛞᛚ•ᚩᚫᛂ•ᛇᚢᛒ•ᛗᛏ•ᛞᛗᛖ.ᛏᛈᚹᛇᛋ•ᚹᛒᛇᚦ•ᚾᚻᚷᛂ•ᚱᛡᛞᛡᚦᚪᛁᛇᚫᛉᛚ•ᛇᛠ•ᛡᚪᛂ•ᚻᚱ•ᚦᛈᛞᛂᛝᚩ•ᚷᚠᛇᛗᚳ•ᚻᛞᚩᛏᚳ•ᚢᚱ•ᛈᚾ:"
Page54 = "ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ:ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪᛝ•ᛝᚦᛡᚹᛋᚻ•ᛁᚳ•ᚫᛈᚫᚷᚩ•ᛗᛁᚪ•ᛖᚩ•ᛏᚹᚩ•ᚠᚣᚢᛏᛂ•ᚦᛂᛠᛖᚳᚾᛠ•ᚳᛠᛖ•ᚱᚩᚢᛉ•ᛞᚹᚻᛒᛝᚠᚪᚳᛂᚢ•ᚩᛂᛡᛠᛁᛚᚷᚻ•ᛒᚢᛂ•ᛉᚪᚳᚹᛡ•ᛗᚩᛈᚣᛞᛡᛚᛈ•ᛇᛁᚦᚱ•ᚣᚷᛗ•ᛉᛟᚷᛋ•ᛗᛈᛂᛟᛞ•ᛟᛏᛡᛟ•ᛏᛝᛁ•ᛗᛝᚣᚪᚫ•ᛝ•ᚱᚣᛂ•ᚾᛚᚢᛉᛒ•ᚻᛈᛂᚩᛠ•ᚷᚫᚹ•ᛉᛋᛞᚳ•ᚢᛏ•ᛟᚻᛇᚾᛈᛏ•ᛠᚣᛒᚢᚷ•ᚷᚪᛇ•ᚾᚷᚩᛖᛚᛗᛒᚦ•ᚣᛡᛟᛇᚣ•ᛗᚳᛟᚦ•ᛖᛚᚱᛇᛈᚱᛞᚣ•ᛉᛞ•ᛝᚣᛈ•ᛋᛖᛉᚹ•ᚳᚷᚠᛞᚱᛖ•ᛞᛖᚹᚩᛇᛟ•ᚻᚩᛟ•ᛒᛋ•ᚻᛠᚪᚳᛁᛗᛉᛂᛗᛖ•ᛗᛚ•ᚷᚩᛏᚦᛉᛖᛠᚱᚷᚣ"
Page55 = "ᛝ•ᚫᛗᛁᚹ•ᛋᛒ•ᛉᛗ•ᛋᛇᚷᛞᚦᚫ•ᚠᛡᚪᛒᚳᚢ•ᚹᚱ•ᛒᛠᚠᛉᛁᛗᚢᚳᛈᚻᛝᛚᛇ•ᛗᛋᛞᛡᛈᚠ•ᛒᚻᛇᚳ•ᛇᛖ•ᛠᛖᛁᚷᛉᚷᛋ•ᛖᛋᛇᚦᚦᛖᛋ•ᚦᛟ•ᚳᛠᛁᛗᚳᛉ•ᛞᛂᚢ•ᛒᛖᛁ:"
Page56 = "ᚫᛂ•ᛟᛋᚱ:ᛗᚣᛚᚩᚻ•ᚩᚫ•ᚳᚦᚷᚹ•ᚹᛚᚫ,ᛉᚩᚪᛈ•ᛗᛞᛞᚢᚷᚹ•ᛚ•ᛞᚾᚣᛂ•ᚳᚠᛡ•ᚫᛏᛈᛇᚪᚦ•ᚳᚫ:ᚳᛞ•ᚠᚾ•ᛡᛖ•ᚠᚾᚳᛝ•ᚱᚠ•ᚫᛁᚱᛞᛖ•ᛋᚣᛂᛠᚢᛝᚹ•ᛉᚩ•ᛗᛠᚹᚠ•ᚱᚷᛡ•ᛝᚱᛒ•ᚫᚾᚢᛋ:"
Page57 = ""

Pages27to32 = "ᛗᛈᚣ•ᛚᛋᚩᚪᚫᚻᛚᛖᛇᛁᛗᛚ•ᛚᛋᚳᛈ•ᚾᚻᚷᚢᛡᚻᚢ•ᛒᚠ•ᛞᛂᚢ•ᛒᛖᛁ•ᚫᚠ•ᛈ•ᚫᛈᚦ•ᚱᛗᛚᚳ•ᛒᚷᚣᛗᛠᛒᚫ•ᚾᚦ•ᛗᚠᛡᛠᚳᛒᚷᚫᚠ•ᛖᛂᚱᚩ•ᛈᛒ•ᚠᛒᚩ•ᛇᚱᛠᚱ•ᛠᚷᛖᛚ•ᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖ•ᛏᚱ•ᚢᚣ•ᛟᛂᛉ•ᛠᚷᛝ•ᚣᛏᛝᚾ•ᚪᛏᛋ•ᛝᚪᛂ•ᚠᛚᛋᚢ•ᚹᛠᛈᛁᛏ•ᛁᚾ•ᚱᚱᛝᛗ•ᚣᛗᚠᛁᚫᛁᚪ•ᚢᛟᛒᚹ•ᛗᛁᚻᚣᚹᛞᛚ•ᛟᛏᛞ•ᛟᚳᛒ•ᛡᛒ•ᚪᛏ•ᚹᛏᛈ•ᚹᛠᚩᚱᚩᛖ•ᚣᛚᛋ•ᚢᛡᚱᚠᛂᛇᚱᛡᚦᛖᚢᛏ•ᛝᚫ•ᚾᚪᛠᚩᚪᚾᚪᚦᚷᚩ•ᚫᛉᛒᛏᛖᛠᛗᚷᚱᛗ•ᚣᛝᚠᛒ•ᛞᛟᛞᚪ•ᛠᚱᚳᛁᛈᛞᚠᛗᛝᚻ•ᛋᚩ•ᛞᛈᛉᚾ•ᛟᚱᛡᚾᚳᚳᛏ•ᚾᛈᚠᛈᚳ•ᛂᚦᛒᛁᚹ•ᛞᚹᛝᛠᛡᚹᛚ•ᚹᛂᚾᚪᛟ•ᛏᛞᛉᚣᛖᚱᛞ•ᚱᛏᛇᛁᚳᛈ•ᛝ•ᚦᛟᚷᛂᚦ•ᚣᛋ•ᛠᚻ•ᚠᛒᛚ•ᛁᚫᛚᛞᛉᚪ•ᛁᚹᚷ•ᛒᚩᚹᚾᛠ•ᛋᛖᛗᛒᛋ•ᚳᚹᚦᛟᚠᚻᚫ•ᛞᚢᛁᛒᛞ•ᛇᛝᛈᚠᛁ•ᛟᚢᚣᛏ•ᚻᚱᛖᚾᚳᛈᛡᛈᛞᛂ•ᛁᛏᛗᛋᚫᛉᚩᚣ•ᚪᛂᛗᛡᛖ•ᛇᛂᚠᛗᚱ•ᛞᛟᚪᛒᛞᚻ•ᚾᛈᚪ•ᛇᚱᚻᚾᛝᛠᚠᚾᚠ•ᚩᛗᛋᚾ•ᛠᚪᛁᚢᛚ•ᚪᚫ•ᛂᛉᛡᚠ•ᛁᛖᛈᛠᚻ•ᚠᛇᚩᚹ•ᛠᛂᛇᛁᛠᚫ•ᛂᛒ•ᛋ•ᚠᛖᚷ•ᛋᛁ•ᛟᛗᛒᛁᛝᛏᚪᚢᛁᚦ•ᚩᛝᛗᚠ•ᚹᛟᛒᛟᛡ•ᚠᚣᛝᚩᛠ•ᚳᛚᛈᚱ•ᛞᛂᚩᛝᛂ•ᚪᛖᛗᛈᚾ•ᚠᛠᚷᛞᛒ•ᚩᛉᚷᚾᚣᚷ•ᛠᛈᛂᛞᚾᛟᚩᚢᚾᚹᛗ•ᛂ•ᚢᚷᛠ•ᛗ•ᛇᚪ•ᚻᚦᛡ•ᛝᛈᛞᛒ•ᚳᛉᚳ•ᛠᛉ•ᛟᚣ•ᛒᚦᛁᛂᛚᛡᛝᛡ•ᚹᛂᚫ•ᛋᛗᚪᛡᛠᛇᛝᛏ•ᚦᛞᚷ•ᚢᛏᛚᛏᚣ•ᚢᛝ•ᚷᛟᚪᛏ•ᛂᚦᚣ•ᚫᚻᚪ•ᛒᛝ•ᚦᚢᚱᚪᚾᛞ•ᛁᛝᚫ•ᛚᚫᚷ•ᚹᛁᛒᚣ•ᚾᚫᚠ•ᛚᛋᛒ•ᛈᛟᚪᛟᛞᚷᛟᚣᛉᚷᛚ•ᛋᛠᛁ•ᚳᛟᛁᚦᛈᚹᛉ•ᛖᚢ•ᛟᛂᛝᛋᚢᛝ•ᚳᛡᛠ•ᛚᛇ•ᛚᚷᚢᛁᛏᛒᛋ•ᛞᛁ•ᚠᚠᚷᚠ•ᚦᛂᚳ•ᚫᛟ•ᛁᛗᛡᛁᛇᚦ•ᚩ•ᚢᛈᛒ•ᚻᛋ•ᛂᚣᛂᛖ•ᛒᛇᛇᚱ•ᚹᛂᛏᛡ•ᚳᚪᚫ•ᚩᛈᚱ•ᛡᚾᛗᛁᛝ•ᚻᚹᚦ•ᛡᚦᚻᚦ•ᛉᚫᚫᛋᚳᛡᚾᛇ•ᛟᛉᚢ•ᚱᛂᛖ•ᛚᚾᛞ•ᛗ•ᛏᚱᛟᚦ•ᛁᛝᛡᛒ•ᚳᚩᚹᛟ•ᛏᛗᛋᚱᚷ•ᚱᛚᛞᛚ•ᚩᚣ•ᛞᚳᚪᛖᛞᚠᚳ•ᛇᛖᛉᛚᚫ•ᛖᚩᛁᛋ•ᛡᛁᛟᛋᚪᛒᛗ•ᛗᚣᚹᛂ•ᛖᚫᛝᛚ•ᛂᚱᛇ•ᛈᛚᚩᚻ•ᚪᛞ•ᛡᛂ•ᛞᚠᚹᛞᛂᚳ•ᚾᚦᛉ•ᛂᚻ•ᚷᛚ•ᚠᛖᚦ•ᛇᚻ•ᛝᛖᛒᛚᛞᛁᛗᚠ•ᚹᛒᛗᛟᛁᛖᛁᛠ•ᛈᚻᛝᛖᛞᛟᚩᚻᛂ•ᚹᚩᚾᛂᛈᛗ•ᛖᚳ•ᛖᛇ•ᚷᚻᛗᛞᚪᛈᛖ•ᛗ•ᛉᚫᛒᛇᚱ•ᛖᚣᛟᚣ•ᚱᛠᛈᚢᛠ•ᚣᛖᚪᚻ•ᚩᛉᛠᚢᚻᛡᛟ•ᚷᚫᚩᛒᛉ•ᚫᚱᛞᛋᚩᚱ•ᚷᛠ•ᛉᚻᛁ•ᚷᚳᛞᛠᛡᚳ•ᛂᛠᛉᛇᚻᛋᚹ•ᛝᛡᚷᛖᛡᚣ•ᛠᚩᚷ•ᚱᚦᚠᛟᚩᚦ•ᚦᛁᛏᚱ•ᛇᛉᛇ•ᚢᚷᛠ•ᛟᛏ•ᚩᚠᛚ•ᛟᛝᛈ•ᚱᛡᚪᚩᛏ•ᚩᛠᚷᚫᛗ•ᛈᛋᚱ•ᛖᚦᚠ•ᛞᚹᚾᛚ•ᛝᚩᛇᛂ•ᚳᛚᚢᚹᛏ•ᚩᛖᛏᚠᚪᛚ•ᛟᛇᛟ•ᛠᚱᛇ•ᚢᚪᚦᛈᛟᛡᛉ•ᛡᛒᚱᛒᚠᚢᛚᚢᛟ•ᛒᛇᛒ•ᛉᚦᚹ•ᛝᚣᛖ•ᚳᚫᚣᛟ•ᚹᛁᛝᚫᛏ•ᚫᛇᛈᛡᛟᚠ•ᛚ•ᛝᚠᛡ•ᛞᚪᛚᛈ•ᛋᛁ•ᚢᚣᚪᛚᛠᛝᚹ•ᚪᛏᛈᚳᚣ•ᛝᚫᚻᛗᛞᚷᛚ•ᛠᛉᛒ•ᛇᛡᛋᛖ•ᚣᛁᛚ•ᚣᛠᚣ•ᚻ•ᚣᛉᚾᛏᚫᛉᛋᚦᚪᚹᛗ•ᚪᚱ•ᚪᚩᚻ•ᛗᛖᚫᛞᛠᛁᛗ•ᛒᛟᚾᚳᚩᚱᛉ•ᛋᚹᚫ•ᚻᛖ•ᛋᚠᚾ•ᚢᚦᛟᚷᛖᚪᛟᛇᛇ•ᚦᚳᛒᛝᛏᛉᛡᛞ•ᛋᛡ•ᚩᚠ•ᛈᛖᛞᛋᛁ•ᛚᛁᚻᚾᛝᚱ•ᚻᛈ•ᛇᚢᚫᛞ•ᛚᚻᛉᚳᛈ•ᛁᛗᛉᚳ•ᛂᚫᚾᛞᛋ•ᛏᛚᛡᚩᛋᛗ•ᛚᛞᚾ•ᛈᚫᛏᚷᛈ•ᚫᚦᛂᛗ•ᛒᚻᚩᚻᛁᚷᚻᚳ•ᛚᚹᛋᚱᛇᛗᛏ•ᛂᚳᛁ•ᛠᚦᛞ•ᛏᛚ•ᚱᛖᛠᛒᚪ•ᛒᚠᛒ•ᛁᛒᛡᛇᛏᚣ•ᛏᛖᚣᚳᚱᛋᚠ•ᛁᚦᚪᛉ•ᚪᚣᚫᛠ•ᛂ•ᛈᛗ•ᚠᛋ•ᚪᛒᚱ•ᛉᚣᚻ•ᚦᚩ•ᛇᛞᚢ•ᚠᛁ•ᚻᚩᚫᚠᚣᚷᚱᚪᛂ•ᛏᛉᛇ•ᛖᛠᛞ•ᛏᚠᚢᛝ•ᚫᛂᛖᛈᚳᛒᚦᚢᛝ•ᛡᛒᚹᚱ•ᛖᚾᛈᛇᚣᛇ•ᛉᚱᚹ•ᛒᛡᛞ•ᛖᚱᚩᚻᚣᛠᛈᚦ•ᛗᛁᚷᛚ•ᚹᛉᚫ•ᚠᛞᚾ•ᛂᛟ•ᚻᛚᛡ•ᛗᛖᚷ•ᛟᛁᛡ•ᚻᛟᚱᛇᚹᚣᚠ•ᛈ•ᛂᚷᚦ•ᚪᛒᛝ•ᛈᛒᚪᛖ•ᚢᚹᚻᚩᛒᛋᛉ•ᚹᛞ•ᚦᛇᚱᛖ•ᛂᚾᛞᛝᚹᚪ•ᚻᛖᚹ•ᛟᛡᛂᛡᛟᛝᛂᛉᛚᛂ•ᛞᛉᛟᛈ•ᚱᚪᛁᛏᚷᛉᛝᛇ•ᛠᛗᚩᛚ•ᚦᚫᚹ•ᚫᚢᛈᛡᚳ•ᚹᛝᚻᚹᛒᛗᛋᛟᛖᛁᛡ•ᛟᚹᚦᚻᛒ•ᛡᚱᛏᚦᚠ•ᚠᚩᚦ•ᚻᚩᛗᛖᛉᚹᛞᛋᛚᚠᛞ•ᛝᛒᛇᛡᛚᚪ•ᚹᛞᚾᚫᛉᛏᚣᛗᚷ•ᚦᚹᛉᛡᚦ•ᚹᛒᛋᚱᛉᛡᛉᚪ•ᚢᛒᚻᛠ•ᚹᛝᚢᚻᛇᛝᛡᛠᛂ•ᛋᛈᚦᛏ•ᛟᛝᚩᛗᛒᚢᛞᛋ•ᛒᛂ•ᛠᚱᛟ•ᛖᚾ•ᚾᚹᚷᚢᛚᚪᚩᚣ•ᚢᛏᚠᛂᛏ•ᚪᚷᛒᛇ"
Pages27to32ns = "ᛗᛈᚣᛚᛋᚩᚪᚫᚻᛚᛖᛇᛁᛗᛚᛚᛋᚳᛈᚾᚻᚷᚢᛡᚻᚢᛒᚠᛞᛂᚢᛒᛖᛁᚫᚠᛈᚫᛈᚦᚱᛗᛚᚳᛒᚷᚣᛗᛠᛒᚫᚾᚦᛗᚠᛡᛠᚳᛒᚷᚫᚠᛖᛂᚱᚩᛈᛒᚠᛒᚩᛇᚱᛠᚱᛠᚷᛖᛚᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖᛏᚱᚢᚣᛟᛂᛉᛠᚷᛝᚣᛏᛝᚾᚪᛏᛋᛝᚪᛂᚠᛚᛋᚢᚹᛠᛈᛁᛏᛁᚾᚱᚱᛝᛗᚣᛗᚠᛁᚫᛁᚪᚢᛟᛒᚹᛗᛁᚻᚣᚹᛞᛚᛟᛏᛞᛟᚳᛒᛡᛒᚪᛏᚹᛏᛈᚹᛠᚩᚱᚩᛖᚣᛚᛋᚢᛡᚱᚠᛂᛇᚱᛡᚦᛖᚢᛏᛝᚫᚾᚪᛠᚩᚪᚾᚪᚦᚷᚩᚫᛉᛒᛏᛖᛠᛗᚷᚱᛗᚣᛝᚠᛒᛞᛟᛞᚪᛠᚱᚳᛁᛈᛞᚠᛗᛝᚻᛋᚩᛞᛈᛉᚾᛟᚱᛡᚾᚳᚳᛏᚾᛈᚠᛈᚳᛂᚦᛒᛁᚹᛞᚹᛝᛠᛡᚹᛚᚹᛂᚾᚪᛟᛏᛞᛉᚣᛖᚱᛞᚱᛏᛇᛁᚳᛈᛝᚦᛟᚷᛂᚦᚣᛋᛠᚻᚠᛒᛚᛁᚫᛚᛞᛉᚪᛁᚹᚷᛒᚩᚹᚾᛠᛋᛖᛗᛒᛋᚳᚹᚦᛟᚠᚻᚫᛞᚢᛁᛒᛞᛇᛝᛈᚠᛁᛟᚢᚣᛏᚻᚱᛖᚾᚳᛈᛡᛈᛞᛂᛁᛏᛗᛋᚫᛉᚩᚣᚪᛂᛗᛡᛖᛇᛂᚠᛗᚱᛞᛟᚪᛒᛞᚻᚾᛈᚪᛇᚱᚻᚾᛝᛠᚠᚾᚠᚩᛗᛋᚾᛠᚪᛁᚢᛚᚪᚫᛂᛉᛡᚠᛁᛖᛈᛠᚻᚠᛇᚩᚹᛠᛂᛇᛁᛠᚫᛂᛒᛋᚠᛖᚷᛋᛁᛟᛗᛒᛁᛝᛏᚪᚢᛁᚦᚩᛝᛗᚠᚹᛟᛒᛟᛡᚠᚣᛝᚩᛠᚳᛚᛈᚱᛞᛂᚩᛝᛂᚪᛖᛗᛈᚾᚠᛠᚷᛞᛒᚩᛉᚷᚾᚣᚷᛠᛈᛂᛞᚾᛟᚩᚢᚾᚹᛗᛂᚢᚷᛠᛗᛇᚪᚻᚦᛡᛝᛈᛞᛒᚳᛉᚳᛠᛉᛟᚣᛒᚦᛁᛂᛚᛡᛝᛡᚹᛂᚫᛋᛗᚪᛡᛠᛇᛝᛏᚦᛞᚷᚢᛏᛚᛏᚣᚢᛝᚷᛟᚪᛏᛂᚦᚣᚫᚻᚪᛒᛝᚦᚢᚱᚪᚾᛞᛁᛝᚫᛚᚫᚷᚹᛁᛒᚣᚾᚫᚠᛚᛋᛒᛈᛟᚪᛟᛞᚷᛟᚣᛉᚷᛚᛋᛠᛁᚳᛟᛁᚦᛈᚹᛉᛖᚢᛟᛂᛝᛋᚢᛝᚳᛡᛠᛚᛇᛚᚷᚢᛁᛏᛒᛋᛞᛁᚠᚠᚷᚠᚦᛂᚳᚫᛟᛁᛗᛡᛁᛇᚦᚩᚢᛈᛒᚻᛋᛂᚣᛂᛖᛒᛇᛇᚱᚹᛂᛏᛡᚳᚪᚫᚩᛈᚱᛡᚾᛗᛁᛝᚻᚹᚦᛡᚦᚻᚦᛉᚫᚫᛋᚳᛡᚾᛇᛟᛉᚢᚱᛂᛖᛚᚾᛞᛗᛏᚱᛟᚦᛁᛝᛡᛒᚳᚩᚹᛟᛏᛗᛋᚱᚷᚱᛚᛞᛚᚩᚣᛞᚳᚪᛖᛞᚠᚳᛇᛖᛉᛚᚫᛖᚩᛁᛋᛡᛁᛟᛋᚪᛒᛗᛗᚣᚹᛂᛖᚫᛝᛚᛂᚱᛇᛈᛚᚩᚻᚪᛞᛡᛂᛞᚠᚹᛞᛂᚳᚾᚦᛉᛂᚻᚷᛚᚠᛖᚦᛇᚻᛝᛖᛒᛚᛞᛁᛗᚠᚹᛒᛗᛟᛁᛖᛁᛠᛈᚻᛝᛖᛞᛟᚩᚻᛂᚹᚩᚾᛂᛈᛗᛖᚳᛖᛇᚷᚻᛗᛞᚪᛈᛖᛗᛉᚫᛒᛇᚱᛖᚣᛟᚣᚱᛠᛈᚢᛠᚣᛖᚪᚻᚩᛉᛠᚢᚻᛡᛟᚷᚫᚩᛒᛉᚫᚱᛞᛋᚩᚱᚷᛠᛉᚻᛁᚷᚳᛞᛠᛡᚳᛂᛠᛉᛇᚻᛋᚹᛝᛡᚷᛖᛡᚣᛠᚩᚷᚱᚦᚠᛟᚩᚦᚦᛁᛏᚱᛇᛉᛇᚢᚷᛠᛟᛏᚩᚠᛚᛟᛝᛈᚱᛡᚪᚩᛏᚩᛠᚷᚫᛗᛈᛋᚱᛖᚦᚠᛞᚹᚾᛚᛝᚩᛇᛂᚳᛚᚢᚹᛏᚩᛖᛏᚠᚪᛚᛟᛇᛟᛠᚱᛇᚢᚪᚦᛈᛟᛡᛉᛡᛒᚱᛒᚠᚢᛚᚢᛟᛒᛇᛒᛉᚦᚹᛝᚣᛖᚳᚫᚣᛟᚹᛁᛝᚫᛏᚫᛇᛈᛡᛟᚠᛚᛝᚠᛡᛞᚪᛚᛈᛋᛁᚢᚣᚪᛚᛠᛝᚹᚪᛏᛈᚳᚣᛝᚫᚻᛗᛞᚷᛚᛠᛉᛒᛇᛡᛋᛖᚣᛁᛚᚣᛠᚣᚻᚣᛉᚾᛏᚫᛉᛋᚦᚪᚹᛗᚪᚱᚪᚩᚻᛗᛖᚫᛞᛠᛁᛗᛒᛟᚾᚳᚩᚱᛉᛋᚹᚫᚻᛖᛋᚠᚾᚢᚦᛟᚷᛖᚪᛟᛇᛇᚦᚳᛒᛝᛏᛉᛡᛞᛋᛡᚩᚠᛈᛖᛞᛋᛁᛚᛁᚻᚾᛝᚱᚻᛈᛇᚢᚫᛞᛚᚻᛉᚳᛈᛁᛗᛉᚳᛂᚫᚾᛞᛋᛏᛚᛡᚩᛋᛗᛚᛞᚾᛈᚫᛏᚷᛈᚫᚦᛂᛗᛒᚻᚩᚻᛁᚷᚻᚳᛚᚹᛋᚱᛇᛗᛏᛂᚳᛁᛠᚦᛞᛏᛚᚱᛖᛠᛒᚪᛒᚠᛒᛁᛒᛡᛇᛏᚣᛏᛖᚣᚳᚱᛋᚠᛁᚦᚪᛉᚪᚣᚫᛠᛂᛈᛗᚠᛋᚪᛒᚱᛉᚣᚻᚦᚩᛇᛞᚢᚠᛁᚻᚩᚫᚠᚣᚷᚱᚪᛂᛏᛉᛇᛖᛠᛞᛏᚠᚢᛝᚫᛂᛖᛈᚳᛒᚦᚢᛝᛡᛒᚹᚱᛖᚾᛈᛇᚣᛇᛉᚱᚹᛒᛡᛞᛖᚱᚩᚻᚣᛠᛈᚦᛗᛁᚷᛚᚹᛉᚫᚠᛞᚾᛂᛟᚻᛚᛡᛗᛖᚷᛟᛁᛡᚻᛟᚱᛇᚹᚣᚠᛈᛂᚷᚦᚪᛒᛝᛈᛒᚪᛖᚢᚹᚻᚩᛒᛋᛉᚹᛞᚦᛇᚱᛖᛂᚾᛞᛝᚹᚪᚻᛖᚹᛟᛡᛂᛡᛟᛝᛂᛉᛚᛂᛞᛉᛟᛈᚱᚪᛁᛏᚷᛉᛝᛇᛠᛗᚩᛚᚦᚫᚹᚫᚢᛈᛡᚳᚹᛝᚻᚹᛒᛗᛋᛟᛖᛁᛡᛟᚹᚦᚻᛒᛡᚱᛏᚦᚠᚠᚩᚦᚻᚩᛗᛖᛉᚹᛞᛋᛚᚠᛞᛝᛒᛇᛡᛚᚪᚹᛞᚾᚫᛉᛏᚣᛗᚷᚦᚹᛉᛡᚦᚹᛒᛋᚱᛉᛡᛉᚪᚢᛒᚻᛠᚹᛝᚢᚻᛇᛝᛡᛠᛂᛋᛈᚦᛏᛟᛝᚩᛗᛒᚢᛞᛋᛒᛂᛠᚱᛟᛖᚾᚾᚹᚷᚢᛚᚪᚩᚣᚢᛏᚠᛂᛏᚪᚷᛒᛇ"
p2 = "ᛗᛈᚣᛚᛋᚩᚪᚫᚻᛚᛖᛇᛁᛗᛚᛚᛋᚳᛈᚾᚻᚷᚢᛡᚻᚢᛒᚠᛞᛂᚢᛒᛖᛁᚫᚠᛈᚫᛈᚦᚱᛗᛚᚳᛒᚷᚣᛗᛠᛒᚫᚾᚦᛗᚠᛡᛠᚳᛒᚷᚫᚠᛖᛂᚱᚩᛈᛒᚠᛒᚩᛇᚱᛠᚱᛠᚷᛖᛚᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖᛏᚱᚢᚣᛟᛂᛉᛠᚷᛝᚣᛏᛝᚾᚪᛏᛋᛝᚪᛂᚠᛚᛋᚢᚹᛠᛈᛁᛏᛁᚾᚱᚱᛝᛗᚣᛗᚠᛁᚫᛁᚪᚢᛟᛒᚹᛗᛁᚻᚣᚹᛞᛚᛟᛏᛞᛟᚳᛒᛡᛒᚪᛏᚹᛏᛈᚹᛠᚩᚱᚩᛖᚣᛚᛋᚢᛡᚱᚠᛂᛇᚱᛡᚦᛖᚢᛏᛝᚫᚾᚪᛠᚩᚪᚾᚪᚦᚷᚩᚫᛉᛒᛏᛖᛠᛗᚷᚱᛗᚣᛝᚠᛒᛞᛟᛞᚪᛠᚱᚳᛁᛈᛞᚠᛗᛝᚻᛋᚩᛞᛈᛉᚾᛟᚱᛡᚾᚳᚳᛏᚾᛈᚠᛈᚳᛂᚦᛒᛁᚹᛞᚹᛝᛠᛡᚹᛚᚹᛂᚾᚪᛟᛏᛞᛉᚣᛖᚱᛞᚱᛏᛇᛁᚳᛈᛝᚦᛟᚷᛂᚦᚣᛋᛠᚻᚠᛒᛚᛁᚫᛚᛞᛉᚪᛁᚹᚷᛒᚩᚹᚾᛠᛋᛖᛗᛒᛋᚳᚹᚦᛟᚠᚻᚫᛞᚢᛁᛒᛞᛇᛝᛈᚠᛁᛟᚢᚣᛏᚻᚱᛖᚾᚳᛈᛡᛈᛞᛂᛁᛏᛗᛋᚫᛉᚩᚣᚪᛂᛗᛡᛖᛇᛂᚠᛗᚱᛞᛟᚪᛒᛞᚻᚾᛈᚪᛇᚱᚻᚾᛝᛠᚠᚾᚠᚩᛗᛋᚾᛠᚪᛁᚢᛚᚪᚫᛂᛉᛡᚠᛁᛖᛈᛠᚻᚠᛇᚩᚹᛠᛂᛇᛁᛠᚫᛂᛒᛋᚠᛖᚷᛋᛁᛟᛗᛒᛁᛝᛏᚪᚢᛁᚦᚩᛝᛗᚠᚹᛟᛒᛟᛡᚠᚣᛝᚩᛠᚳᛚᛈᚱᛞᛂᚩᛝᛂᚪᛖᛗᛈᚾᚠᛠᚷᛞᛒᚩᛉᚷᚾᚣᚷᛠᛈᛂᛞᚾᛟᚩᚢᚾᚹᛗᛂᚢᚷᛠᛗᛇᚪᚻᚦᛡᛝᛈᛞᛒᚳᛉᚳᛠᛉᛟᚣᛒᚦᛁᛂᛚᛡᛝᛡᚹᛂᚫᛋᛗᚪᛡᛠᛇᛝᛏᚦᛞᚷᚢᛏᛚᛏᚣᚢᛝᚷᛟᚪᛏᛂᚦᚣᚫᚻᚪᛒᛝᚦᚢᚱᚪᚾᛞᛁᛝᚫᛚᚫᚷᚹᛁᛒᚣᚾᚫᚠᛚᛋᛒᛈᛟᚪᛟᛞᚷᛟᚣᛉᚷᛚᛋᛠᛁᚳᛟᛁᚦᛈᚹᛉᛖᚢᛟᛂᛝᛋᚢᛝᚳᛡᛠᛚᛇᛚᚷᚢᛁᛏᛒᛋᛞᛁᚠᚠᚷᚠᚦᛂᚳᚫᛟᛁᛗᛡᛁᛇᚦᚩᚢᛈᛒᚻᛋᛂᚣᛂᛖᛒᛇᛇᚱᚹᛂᛏᛡᚳᚪᚫᚩᛈᚱᛡᚾᛗᛁᛝᚻᚹᚦᛡᚦᚻᚦᛉᚫᚫᛋᚳᛡᚾᛇᛟᛉᚢᚱᛂᛖᛚᚾᛞᛗᛏᚱᛟᚦᛁᛝᛡᛒᚳᚩᚹᛟᛏᛗᛋᚱᚷᚱᛚᛞᛚᚩᚣᛞᚳᚪᛖᛞᚠᚳᛇᛖᛉᛚᚫᛖᚩᛁᛋᛡᛁᛟᛋᚪᛒᛗᛗᚣᚹᛂᛖᚫᛝᛚᛂᚱᛇᛈᛚᚩᚻᚪᛞᛡᛂᛞᚠᚹᛞᛂᚳᚾᚦᛉᛂᚻᚷᛚᚠᛖᚦᛇᚻᛝᛖᛒᛚᛞᛁᛗᚠᚹᛒᛗᛟᛁᛖᛁᛠᛈᚻᛝᛖᛞᛟᚩᚻᛂᚹᚩᚾᛂᛈᛗᛖᚳᛖᛇᚷᚻᛗᛞᚪᛈᛖᛗᛉᚫᛒᛇᚱᛖᚣᛟᚣᚱᛠᛈᚢᛠᚣᛖᚪᚻᚩᛉᛠᚢᚻᛡᛟᚷᚫᚩᛒᛉᚫᚱᛞᛋᚩᚱᚷᛠᛉᚻᛁᚷᚳᛞᛠᛡᚳᛂᛠᛉᛇᚻᛋᚹᛝᛡᚷᛖᛡᚣᛠᚩᚷᚱᚦᚠᛟᚩᚦᚦᛁᛏᚱᛇᛉᛇᚢᚷᛠᛟᛏᚩᚠᛚᛟᛝᛈᚱᛡᚪᚩᛏᚩᛠᚷᚫᛗᛈᛋᚱᛖᚦᚠᛞᚹᚾᛚᛝᚩᛇᛂᚳᛚᚢᚹᛏᚩᛖᛏᚠᚪᛚᛟᛇᛟᛠᚱᛇᚢᚪᚦᛈᛟᛡᛉᛡᛒᚱᛒᚠᚢᛚᚢᛟᛒᛇᛒᛉᚦᚹᛝᚣᛖᚳᚫᚣᛟᚹᛁᛝᚫᛏᚫᛇᛈᛡᛟᚠᛚᛝᚠᛡᛞᚪᛚᛈᛋᛁᚢᚣᚪᛚᛠᛝᚹᚪᛏᛈᚳᚣᛝᚫᚻᛗᛞᚷᛚᛠᛉᛒᛇᛡᛋᛖᚣᛁᛚᚣᛠᚣᚻᚣᛉᚾᛏᚫᛉᛋᚦᚪᚹᛗᚪᚱᚪᚩᚻᛗᛖᚫᛞᛠᛁᛗᛒᛟᚾᚳᚩᚱᛉᛋᚹᚫᚻᛖᛋᚠᚾᚢᚦᛟᚷᛖᚪᛟᛇᛇᚦᚳᛒᛝᛏᛉᛡᛞᛋᛡᚩᚠᛈᛖᛞᛋᛁᛚᛁᚻᚾᛝᚱᚻᛈᛇᚢᚫᛞᛚᚻᛉᚳᛈᛁᛗᛉᚳᛂᚫᚾᛞᛋᛏᛚᛡᚩᛋᛗᛚᛞᚾᛈᚫᛏᚷᛈᚫᚦᛂᛗᛒᚻᚩᚻᛁᚷᚻᚳᛚᚹᛋᚱᛇᛗᛏᛂᚳᛁᛠᚦᛞᛏᛚᚱᛖᛠᛒᚪᛒᚠᛒᛁᛒᛡᛇᛏᚣᛏᛖᚣᚳᚱᛋᚠᛁᚦᚪᛉᚪᚣᚫᛠᛂᛈᛗᚠᛋᚪᛒᚱᛉᚣᚻᚦᚩᛇᛞᚢᚠᛁᚻᚩᚫᚠᚣᚷᚱᚪᛂᛏᛉᛇᛖᛠᛞᛏᚠᚢᛝᚫᛂᛖᛈᚳᛒᚦᚢᛝᛡᛒᚹᚱᛖᚾᛈᛇᚣᛇᛉᚱᚹᛒᛡᛞᛖᚱᚩᚻᚣᛠᛈᚦᛗᛁᚷᛚᚹᛉᚫᚠᛞᚾᛂᛟᚻᛚᛡᛗᛖᚷᛟᛁᛡᚻᛟᚱᛇᚹᚣᚠᛈᛂᚷᚦᚪᛒᛝᛈᛒᚪᛖᚢᚹᚻᚩᛒᛋᛉᚹᛞᚦᛇᚱᛖᛂᚾᛞᛝᚹᚪᚻᛖᚹᛟᛡᛂᛡᛟᛝᛂᛉᛚᛂᛞᛉᛟᛈᚱᚪᛁᛏᚷᛉᛝᛇᛠᛗᚩᛚᚦᚫᚹᚫᚢᛈᛡᚳᚹᛝᚻᚹᛒᛗᛋᛟᛖᛁᛡᛟᚹᚦᚻᛒᛡᚱᛏᚦᚠᚠᚩᚦᚻᚩᛗᛖᛉᚹᛞᛋᛚᚠᛞᛝᛒᛇᛡᛚᚪᚹᛞᚾᚫᛉᛏᚣᛗᚷᚦᚹᛉᛡᚦᚹᛒᛋᚱᛉᛡᛉᚪᚢᛒᚻᛠᚹᛝᚢᚻᛇᛝᛡᛠᛂᛋᛈᚦᛏᛟᛝᚩᛗᛒᚢᛞᛋᛒᛂᛠᚱᛟᛖᚾᚾᚹᚷᚢᛚᚪᚩᚣᚢᛏᚠᛂᛏᚪᚷᛒᛇ"
Page0ns = "ᚪᛗᛝᛞᛡᚦᛉᛁᛗᛡᛞᛈᛝᚢᚹᚪᛗᛏᚪᛝᛝᚦᛡᚹᛋᚻᛁᚳᚫᛈᚫᚷᚩᛗᛁᚪᛖᚩᛏᚹᚩᚠᚣᚢᛏᛂᚦᛂᛠᛖᚳᚾᛠᚳᛠᛖᚱᚩᚢᛉᛞᚹᚻᛒᛝᚠᚪᚳᛂᚢᚩᛂᛡᛠᛁᛚᚷᚻᛒᚢᛂᛉᚪᚳᚹᛡᛗᚩᛈᚣᛞᛡᛚᛈᛇᛁᚦᚱᚣᚷᛗᛉᛟᚷᛋᛗᛈᛂᛟᛞᛟᛏᛡᛟᛏᛝᛁᛗᛝᚣᚪᚫᛝᚱᚣᛂᚾᛚᚢᛉᛒᚻᛈᛂᚩᛠᚷᚫᚹᛉᛋᛞᚳᚢᛏᛟᚻᛇᚾᛈᛏᛠᚣᛒᚢᚷᚷᚪᛇᚾᚷᚩᛖᛚᛗᛒᚦᚣᛡᛟᛇᚣᛗᚳᛟᚦᛖᛚᚱᛇᛈᚱᛞᚣᛉᛞᛝᚣᛈᛋᛖᛉᚹᚳᚷᚠᛞᚱᛖᛞᛖᚹᚩᛇᛟᚻᚩᛟᛒᛋᚻᛠᚪᚳᛁᛗᛉᛂᛗᛖᛗᛚᚷᚩᛏᚦᛉᛖᛠᚱᚷᚣ"

Page54to55 = "ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ:ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪᛝ•ᛝᚦᛡᚹᛋᚻ•ᛁᚳ•ᚫᛈᚫᚷᚩ•ᛗᛁᚪ•ᛖᚩ•ᛏᚹᚩ•ᚠᚣᚢᛏᛂ•ᚦᛂᛠᛖᚳᚾᛠ•ᚳᛠᛖ•ᚱᚩᚢᛉ•ᛞᚹᚻᛒᛝᚠᚪᚳᛂᚢ•ᚩᛂᛡᛠᛁᛚᚷᚻ•ᛒᚢᛂ•ᛉᚪᚳᚹᛡ•ᛗᚩᛈᚣᛞᛡᛚᛈ•ᛇᛁᚦᚱ•ᚣᚷᛗ•ᛉᛟᚷᛋ•ᛗᛈᛂᛟᛞ•ᛟᛏᛡᛟ•ᛏᛝᛁ•ᛗᛝᚣᚪᚫ•ᛝ•ᚱᚣᛂ•ᚾᛚᚢᛉᛒ•ᚻᛈᛂᚩᛠ•ᚷᚫᚹ•ᛉᛋᛞᚳ•ᚢᛏ•ᛟᚻᛇᚾᛈᛏ•ᛠᚣᛒᚢᚷ•ᚷᚪᛇ•ᚾᚷᚩᛖᛚᛗᛒᚦ•ᚣᛡᛟᛇᚣ•ᛗᚳᛟᚦ•ᛖᛚᚱᛇᛈᚱᛞᚣ•ᛉᛞ•ᛝᚣᛈ•ᛋᛖᛉᚹ•ᚳᚷᚠᛞᚱᛖ•ᛞᛖᚹᚩᛇᛟ•ᚻᚩᛟ•ᛒᛋ•ᚻᛠᚪᚳᛁᛗᛉᛂᛗᛖ•ᛗᛚ•ᚷᚩᛏᚦᛉᛖᛠᚱᚷᚣᛝ•ᚫᛗᛁᚹ•ᛋᛒ•ᛉᛗ•ᛋᛇᚷᛞᚦᚫ•ᚠᛡᚪᛒᚳᚢ•ᚹᚱ•ᛒᛠᚠᛉᛁᛗᚢᚳᛈᚻᛝᛚᛇ•ᛗᛋᛞᛡᛈᚠ•ᛒᚻᛇᚳ•ᛇᛖ•ᛠᛖᛁᚷᛉᚷᛋ•ᛖᛋᛇᚦᚦᛖᛋ•ᚦᛟ•ᚳᛠᛁᛗᚳᛉ•ᛞᛂᚢ•ᛒᛖᛁ:"

EngEx="theseideasaretakenfromvariousonlineforumschansircandotherpublicconversationsinclusionheredoesnotinanywaymeanthatcicadiansbelievethisorthatanyofthestatementsaretrueofthesepostsareonlyincludedbecausetheymightbeofinteresttoanyoneresearchingcicadaorcicadianismingeneralyoucan'tthinkofitaswhobecausewhatwouldbemoreaccurateacarefuldecodingandreadingoftheirliberprimusandtheassociatedreferencedworkstellsitall:theanswerhasmanynamesbutitissomethingakintoagodelstatementofouruniverse:somethingwhichcan'tbefullycomprehendedfromourhierarchicalevelofexistencecallitwhateveryouwillasimulationofsimulationsathoughtinthemindoftheallthecreationofsomegoditdoesn'tmatterwhichabstrationyoupreferweonlyknowthattheintelligencebehindcicadaisnotfromthislevelofexistenceafterallthatisthegoalofwhattheplebescallcicadatofndthefewwhoaresuitabletotranscendtheirconsciousnessintothenexthierarchicallevelihadareligiousexperiencewhileiwasworkingtosolvethepuzlesthateveryoneonxannoyinglyinsistsonreferringtoascicadaihadbeenworkingwithagroupofhackersinparigtodecrypttheliberprimswehadbeenworkingonitdayandnightforafewmonthsatthispointitwasaveryintenseperiodofmylifebutendedupbeingwellworthittherearestillabout1pagesthatremainunsolvedbutwehavemanagedtogetmostofitanditisverystrangemindblowing"
EngEx2="WhatisthisgoalyouaskTheyhavealreadysaiditPubliclyItsalltaughtwithalltheirclueLookatthebookstheychoosetheideasthattheymentioninthebookLiberPrimusListentomusicTheyaretryingtopushhumanitytothenextevolutionarystepAndthisistrueinmanyareassomemoreprominentthanothersSuresomeofitmeanstechnologygrowth"
Rex="uWGsSfcrSugpWWfwxtclWymWStcnFGmXXmmwFpdGXroWXmiffeuGSuFyprFipFcFFnwbxmdrXifpcSSFcrTpfjmoScwXbFwbWlsryjFrmcTSFtcpwmgScGpuScrewXpibybxflirrmcgbyrcfuTpXjwtfWjgbFTffWpTpfaxjmepGsosmwSjlwxuTFwmTdyjcsXxoGrmbwrmidyjcxhuypljGymfjpSuXwSjdwxualasmXSxFmXmipyFmufmyySFxrjseewndjusxytetmSrydsneFdXpbunWGjXFjgbpTxpnwwilmFlpbuoWXrXWfrrSjmrmidyjhlfujuXlTWSjoSrrmumscWSliFFclwiltpeupWXpTtbtmeuloleSjpuWlcgWgsXtmbmrTfpwrjrxcGjWQjeymdyjcFXufpfaccWrujrambpgpbunWGfnxeygiWGumtcgWWjFbpwdfyxFufSjpxlTWalTcyuXcelFSixTsFhFTyflcerpfaxrbeFcbf"

VeX="""MOMUD EKAPV TQEFM OEVHP AJMII CDCTI FGYAG JSPXY ALUYM NSMYH
VUXJE LEPXJ FXGCM JHKDZ RYICU HYPUS PGIGM OIYHF WHTCQ KMLRD
ITLXZ LJFVQ GHOLW CUHLO MDSOE KTALU VYLNZ RFGBX PHVGA LWQIS
FGRPH JOOFW GUBYI LAPLA LCAFA AMKLG CETDW VOELJ IKGJB XPHVG
ALWQC SNWBU BYHCU HKOCE XJEYK BQKVY KIIEH GRLGH XEOLW AWFOJ
ILOVV RHPKD WIHKN ATUHN VRYAQ DIVHX FHRZV QWMWV LGSHN NLVZS
JLAKI FHXUF XJLXM TBLQV RXXHR FZXGV LRAJI EXPRV OSMNP KEPDT
LPRWM JAZPK LQUZA ALGZX GVLKL GJTUI ITDSU REZXJ ERXZS HMPST
MTEOE PAPJH SMFNB YVQUZ AALGA YDNMP AQOWT UHDBV TSMUE UIMVH
QGVRW AEFSP EMPVE PKXZY WLKJA GWALT VYYOB YIXOK IHPDS EVLEV
RVSGB JOGYW FHKBL GLXYA MVKIS KIEHY IMAPX UOISK PVAGN MZHPW
TTZPV XFCCD TUHJH WLAPF YULTB UXJLN SIJVV YOVDJ SOLXG TGRVO
SFRII CTMKO JFCQF KTINQ BWVHG TENLH HOGCS PSFPV GJOKM SIFPR
ZPAAS ATPTZ FTPPD PORRF TAXZP KALQA WMIUD BWNCT LEFKO ZQDLX
BUXJL ASIMR PNMBF ZCYLV WAPVF QRHZV ZGZEF KBYIO OFXYE VOWGB
BXVCB XBAWG LQKCM ICRRX MACUO IKHQU AJEGL OIJHH XPVZW JEWBA
FWAML ZZRXJ EKAHV FASMU LVVUT TGK"""

EngFreq=[('A',8.167),('B',1.492),('C',2.782),('D',4.253),('E',12.702),('F',2.228),('G',2.015),('H',6.094),('I',6.966),('J',0.153),('K',0.772),('L',4.025),('M',2.406),('N',6.749),('O',7.507),('P',1.929),('Q',0.095),('R',5.987),('S',6.327),('T',9.056),('U',2.758),('V',0.978),('W',2.360),('X',0.150),('Y',1.974),('Z',0.074)]

Page40to53 = Page40 + Page41 + Page42 + Page43 + Page44 + Page45 + Page46 + Page47 + Page48 + Page49 + Page50 + Page51 + Page52 + Page53
Page53Red = "ᛏᛈᚹᛇᛋ•ᚹᛒᛇᚦ•ᚾᚻᚷᛂ•ᚱᛡᛞᛡᚦᚪᛁᛇᚫᛉᛚ•ᛇᛠ•ᛡᚪᛂ•ᚻᚱ•ᚦᛈᛞᛂᛝᚩ•ᚷᚠᛇᛗᚳ•ᚻᛞᚩᛏᚳ•ᚢᚱ•ᛈᚾ"

pagelist = [Page0, Page1, Page2, Page3, Page4, Page5, Page6, Page7, Page8, Page9, Page10, Page11, Page12, Page13, Page14, Page15, Page16, Page17, Page18, Page19, Page20, Page21, Page22, Page23, Page24, Page25, Page26, Page27, Page28, Page29, Page30, Page31, Page32, Page33, Page34, Page35, Page36, Page37, Page38, Page39, Page40, Page41, Page42, Page43, Page44, Page45, Page46, Page47, Page48, Page49, Page50, Page51, Page52, Page53, Page54, Page55, Page56, Page57, Pages27to32, Page54to55,  Page40to53, Page53Red]


testseq = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811]
primeseq = [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271]
p50decseq = [3, 3, 2, 54, 27, 3, 38, 51, 73, 42, 3, 71, 4, 51, 3, 3, 15, 1, 2, 1, 3, 2, 0, 2, 22, 2, 45, 1, 3, 13, 0, 1, 45, 5, 105, 0, 29, 3, 1, 3, 27, 0, 0, 1, 2, 42, 1, 1, 2, 25, 1, 3, 36, 0, 79, 0, 60, 3, 29, 2, 1, 1, 3, 2, 1, 2, 0, 1, 0, 3, 61, 2, 0, 1, 21, 62, 3, 0, 3, 1, 0, 0, 2, 28, 0, 1, 3, 0, 3, 19, 0, 60, 14, 52, 0, 1, 2, 3, 71, 0, 2, 0, 52, 3, 1, 0, 13, 0, 2, 61, 2, 1, 32, 2, 2, 28, 105, 41, 3, 13, 69, 0, 46, 2, 3, 1, 2, 70, 2, 2, 57, 14, 1, 0, 75, 73, 72, 59, 60, 1, 1, 0, 74, 72, 3, 62, 0, 2, 1, 3, 0, 43, 2, 2, 2, 14, 2, 1, 42, 0, 1, 12, 60, 2, 2, 45, 1, 2, 1, 1, 0, 30, 3, 24, 62, 1, 39, 0, 2, 6, 17, 26, 2, 75, 1, 61, 2, 0, 0, 0, 2, 0, 29, 73, 2, 0, 1, 2, 3, 3, 33, 3, 0, 41, 2, 2, 0, 3, 0, 0, 3, 60, 44, 2, 3, 48, 10, 57, 1]

cText="""An Instruction

Question all things. 
Discover truth inside yourself. 
Follow your truth. 
Impose nothing on others"""

cicadaText="""Authored and provided by, Liber Primus is the sacred book of Cicadianism. It contains lessons, instructions, and wisdom. It also contains many hidden things when used with the Gematria Primus. The beginning and end have been deciphered, unfortunately many pages remain encrypted. 
Each group of pages is separated by section with the original image(s) to the right, and the titles/translations to the left. 
There are many symbols within the Liber Primus consolidated here:
Imgur Album
Liber Primus
Chapter. Intus
A Warning
Believe nothing from this book. Except what you know to be true. Test the knowledge. Find your truth. Experience your death. Do not edit or change this book. Or the message contained within. Either the words or their numbers. For all is sacred.
Some Wisdom
The primes are sacred. The totient function is sacred. All things should be encrypted.
Know This
Welcome
Welcome, pilgrim to the great journey toward the end of all things. It is not an easy trip, but for those who find their way here it is a necessary one. Along the way you will find an end to all struggle and suffering, your innocence, your illusions, your certainty, and your reality. Ultimately, you will discover an end to self.
It is through this pilgrimage that we shape ourselves and our realities. Journey deep within and you will arrive outside. Like the instar, it is only through going within that we may emerge.
Wisdom
You are a being unto yourself.
You are a law unto yourself.
Each intelligence is holy.
For all that lives is holy.
An Instruction
Command your own self.
A Koan
A man decided to go and study with a master. He went to the door of the master "Who are you who wishes to study here?" asked the master. The student told the master his name. "That is not what you are that is only what you are called. "Who are you who wishes to study here?" he asked again. The man thought for a moment and replied, "I am a professor." "That is what you do, not what you are" replied the master. "Who are you who wishes to study here?" Confused, the man thought some more. Finally, he answered, "I am a human being." "That is only your species, not who you are. "Who are you who wishes to study here?" asked the master again. After a moment of thought, the professor replied, "I am a consciousness inhabiting an arbitrary body." "That is merely what you are not who you are. Who are you who wishes to study here?" The man was getting irritated. "I am," he started, but he could not think of anything else to say, so he trailed off. After a long pause the master replied "Then you are welcome to come study."
An Instruction
Do four unreasonable things each day.
The Loss of Divinity
The circumference practices three behaviors which cause the loss of divinity: 
Consumption - We consume too much because we beleive the follwing two errors within the deception:
We do not have enough or there is not enough
We have what we have now by luck, and we will not be strong enough later to obtain what we need.
Most things are not worth consuming.
Preservation - We preserve things because we believe we are weak. If we lose them we will no t be strong enough to gain them again. This is the deception. Most things are not worth preserving.
Adherence - We follow dogma so that we can belong and be right. Or we follow reason so we can belong and be right. There is nothing to be right about. To belong is death.
It is the behaviors of consumption, preservation, and adherence that have us lose our primal ity and thus our divinity.
Some Wisdom
Amass great wealth. Never become attached to what you own. Be prepared to destroy all that you own.
An Instruction
Program your mind. 
Program reality.
A Koan
During a lession, the master explained the I: "the I is the voice of the circumference," he said. When asked by a student to explain what that meant, the master said "it is a voice inside your head." 
"I don't have a voice in my head," thought the student, and he raised his hand to tell the master. the master stopped the student, and said "the voice that just said you have no voice in your head, is the I." 
And the students were enllightened.
An Instruction
Question all things. 
Discover truth inside yourself. 
Follow your truth. 
Impose nothing on others.
Know This
An End
Within the deep web there exists a page that hashes to: 
It is the duty of euery pilgrim to seek out this page.
Parable
Like the instar tunneling to the surface.
We must shed our own circumferences. Find the
divinity within and emerge.
"""


line1 = "ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ•ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪ"
line2 = "ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ•ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪᛝ•ᛝᚦᛡᚹᛋᚻ•ᛁᚳ•ᚫᛈᚫᚷᚩ•ᛗᛁᚪ•ᛖᚩ•ᛏᚹᚩ•ᚠᚣᚢᛏᛂ•ᚦᛂᛠᛖᚳᚾᛠ•ᚳᛠᛖ•ᚱᚩᚢᛉ•ᛞᚹᚻᛒᛝᚠᚪᚳᛂᚢ•ᚩᛂᛡᛠᛁᛚᚷᚻ•ᛒᚢ"
uline1 = str.encode(line1, "utf-8")
uline2 = str.encode(line2, "utf-8")


stream = primeseq
stream = [97, 500, 508, 235, 286, 44, 269, 199, 74, 85, 204, 369, 189, 68, 423, 404, 101, 283, 536, 88, 191, 200, 323, 332, 169, 451, 79, 151, 213, 219, 137, 202, 62, 278, 293, 155, 330, 437, 172, 438, 136, 225, 186, 199, 306, 113, 114, 566, 144, 521, 222, 114, 118, 306, 283, 30, 596, 365, 138, 108, 341, 291, 88, 284, 129, 159]
stream = [102, 333, 313, 224, 247, 170, 350, 604, 90, 153, 74, 244, 403, 196, 239, 415, 513, 265, 479, 170, 376, 144, 126, 187, 293, 236, 280, 299, 73, 318, 77, 449, 97, 114, 126, 244, 228, 339, 144, 126, 169, 438, 102, 121, 83, 108, 110, 196, 184, 723, 472, 444, 189, 68, 58, 141, 287, 180, 255, 356, 134, 209, 100, 566, 468, 83, 79, 622, 148, 358, 78, 340, 181, 253, 134, 194, 288, 188, 272, 66, 151, 321, 228, 338, 300, 101, 143, 267, 216, 338, 125, 299, 481, 251, 54, 363, 170, 309, 241, 247, 157, 280, 168, 328, 274, 126, 143, 364, 152, 79, 304, 245, 255, 106, 137, 91, 538, 144, 143, 231, 245, 743, 344, 71, 134, 348, 193, 677, 16, 166, 361, 424, 132, 343, 102, 238, 244, 267, 401, 356, 428, 233, 450, 144, 30, 254, 117, 108, 134, 221, 144, 543, 294, 175, 73, 144, 283, 141, 134, 360, 123, 568, 264, 84, 488, 295, 5, 497, 404, 192, 532, 179, 85, 58, 519, 292, 568, 645, 164, 699, 377, 270, 571, 240, 171, 481, 220, 174, 211, 111, 101, 90, 36, 448, 97, 406, 151, 127, 371, 167, 461, 107, 171, 420, 47, 327, 69, 100, 124, 81, 319, 682, 48, 267, 208, 125, 317, 739, 245, 104, 324, 106, 486, 296, 289, 167, 581, 195, 423, 437, 516, 167, 252, 107, 300, 106, 440, 262, 115, 126, 74, 198, 454, 449, 286, 184, 103, 154, 334, 214, 412, 137, 194, 166, 475, 94, 413, 233, 241, 414, 124, 651, 170, 211, 70, 247, 492, 348, 237, 161, 123, 30, 182, 430, 506, 7, 199, 422, 283, 90, 234, 146, 366, 299, 120, 303, 142, 121, 68, 151, 353, 214, 175, 288, 520, 59, 84, 169, 208, 264, 153, 156, 165, 201, 86, 593, 320, 175, 454, 586, 545, 139, 82, 170, 139, 64, 407, 183, 187, 206, 284, 375, 174, 34, 113, 190, 50, 337, 399, 299, 225, 198, 239, 306, 98, 166, 84, 223, 527, 49, 179, 26, 146, 696, 465, 167, 213, 133, 276, 1055, 335, 266, 211, 300, 315, 92, 250, 305, 89, 182, 130, 113, 217, 256, 427, 237, 405, 86, 145, 180, 175, 143, 110, 39, 214, 137, 221, 205, 170, 122, 111, 427, 197, 405, 236, 632, 422, 413, 67, 345, 363, 74, 120, 374, 626, 504, 168, 284, 127, 315, 258, 147, 266, 163, 205, 322, 461, 209, 338, 242, 36, 180, 251, 61, 180, 321, 169, 117, 300, 623, 28, 280, 148, 286, 255, 291, 352, 256, 326, 223, 103, 129, 198, 159, 520, 339, 139, 527, 38, 374, 203, 197, 233, 204, 163, 17, 137, 325, 603, 156, 521, 195, 159, 149, 196, 185, 114, 228, 217, 161, 186, 130, 258, 635, 172, 156, 471, 96, 297, 556, 119, 239, 158, 181, 225, 227, 480, 3, 120, 387, 293, 229, 257, 286, 209, 193, 133, 137, 74, 382, 141, 153, 481, 369, 119, 61, 218, 193, 517, 104, 158, 44, 132, 448, 102, 256, 155, 300, 313, 199, 195, 104, 408, 265, 200, 312, 81, 319, 195, 255, 269, 134, 247, 111, 562, 213, 532, 83, 179, 395, 308, 346, 211, 580, 158, 161, 73, 436, 495, 201, 210, 109, 205, 39, 228, 352, 259, 96, 71, 319, 132, 150, 302, 271, 48, 666, 205, 330, 297, 25, 60, 566, 156, 159, 323, 210, 331, 309, 678, 298, 265, 170, 183, 88, 102, 351, 278, 241, 180, 136, 217, 114, 788, 281, 117, 298, 202, 287, 378, 56, 94, 704, 117, 229, 111, 227, 250, 308, 314, 192, 138, 286, 431, 329, 66, 122, 245, 305, 141, 594, 333, 69, 395, 228, 145, 105, 130, 442, 126, 106, 709, 150, 241, 34, 260, 144, 191, 14, 72]



skipseries = [59, 79, 47, 107, 11, 89, 101, 67, 97, 19, 17, 67, 5, 5, 73, 31, 43, 73, 103, 29, 43, 73, 53, 109, 3, 7, 47, 103, 19, 107, 97, 107, 37, 59, 7, 79, 67, 109, 11, 2, 5, 2, 61, 19, 79, 59, 29, 83, 97, 79, 7, 41, 97, 73, 37, 101, 83, 61, 19, 97, 37, 43, 107, 23, 107, 103, 103, 73, 43, 2, 103, 71, 53, 61, 2, 79, 11, 31, 107, 43, 73, 3, 103, 103, 73, 109, 61, 41, 2, 79, 59, 71, 59, 101, 73, 13, 79, 41, 41, 83, 11, 7, 53, 53, 23, 107, 67, 59, 37, 19, 2, 29, 7, 47, 3, 83, 43, 83, 31, 109, 109, 73, 19, 83, 11, 83, 41, 7, 103, 7, 19, 53, 11, 59, 13, 61, 19, 83, 103, 67, 97, 83, 43, 61, 61, 53, 11, 11, 2, 67, 43, 61, 83, 107, 71, 29, 7, 53, 2, 71, 107, 61, 79, 79, 103, 53, 109, 43, 71, 83, 29, 79, 29, 29, 59, 47, 17, 59, 83, 79, 29, 53, 13, 67, 11, 19, 103, 11, 71, 7, 97, 109, 79, 59, 53, 97, 71, 61, 23, 103, 29, 31, 31, 79, 101, 11, 11, 7, 107, 37, 13, 11, 3, 29, 13, 79, 101, 17, 61, 73, 67, 43]

def rune_get(c):
        for i in range(len(runelist)):
                if c==runelist[i].Icon:
                        return i
        return -1
def runesToEng(inp):
        s=""
        for c in inp:
                found = 0
                for r in runelist:
                        if r.Icon==c:
                                s+=r.English
                                found=1
                if SPACE.Icon==c:
                                s+=SPACE.English
                                found=1
                if found==0:
                        print("Not found:",c)
        return s

def engToRunes_simple(inp):
        runes=""
        s=inp.upper()
        i=0
        #for i in range(0,len(s)):
        while i<len(s):
                if s[i:i+2]=="QU":
                        runes+=CK.Icon
                        runes+=W.Icon
                        i+=1
                elif s[i:i+2]=="CK":
                        runes+=CK.Icon
                        i+=1
                elif s[i]=="V" or s[i]=="U":
                        runes+=U.Icon
                elif s[i]=="C" or s[i]=="K":
                        runes+=CK.Icon
                elif s[i]=="S" or s[i]=="Z":
                        runes+=S.Icon
                elif s[i]=="F":
                        runes+=F.Icon
                elif s[i]=="O":
                        runes+=O.Icon
                elif s[i]=="R":
                        runes+=R.Icon
                elif s[i]=="G":
                        runes+=G.Icon
                elif s[i]=="W":
                        runes+=W.Icon
                elif s[i]=="H":
                        runes+=H.Icon
                elif s[i]=="N":
                        runes+=N.Icon
                elif s[i]=="I":
                        runes+=I.Icon
                elif s[i]=="J":
                        runes+=J.Icon
                elif s[i]=="P":
                        runes+=P.Icon
                elif s[i]=="X":
                        runes+=X.Icon
                elif s[i]=="T":
                        runes+=T.Icon
                elif s[i]=="B":
                        runes+=B.Icon
                elif s[i]=="E":
                        runes+=E.Icon
                elif s[i]=="M":
                        runes+=M.Icon
                elif s[i]=="L":
                        runes+=L.Icon
                elif s[i]=="D":
                        runes+=D.Icon
                elif s[i]=="A":
                        runes+=A.Icon
                elif s[i]=="Y":
                        runes+=Y.Icon
                elif s[i]==" ":
                        runes+=SPACE.Icon
                elif s[i]=="\n" or s[i]==".":
                        runes+=SPACE.Icon
                #else:
                #        print("?????:",s[i])
                i+=1
                
        return runes

def engToRunes_st(inp,dots=False):
        runes=""
        s=inp.upper()
        i=0
        #for i in range(0,len(s)):
        while i<len(s):
                if s[i:i+3]=="ING":
                        runes+=NG.Icon
                        i+=2
                elif s[i:i+2]=="NG":
                        runes+=NG.Icon
                        i+=1
                elif s[i:i+2]=="TH":
                        runes+=TH.Icon
                        i+=1
                elif s[i:i+2]=="EO":
                        runes+=EO.Icon
                        i+=1
                elif s[i:i+2]=="OE":
                        runes+=OE.Icon
                        i+=1
                elif s[i:i+2]=="AE":
                        runes+=AE.Icon
                        i+=1
                elif s[i:i+2]=="IA" or s[i:i+2]=="IO" :
                        runes+=IA.Icon
                        i+=1
                elif s[i:i+2]=="EA":
                        runes+=EA.Icon
                        i+=1
                elif s[i:i+2]=="QU":
                        runes+=CK.Icon
                        runes+=W.Icon
                        i+=1
                elif s[i:i+2]=="CK":
                        runes+=CK.Icon
                        i+=1
                elif s[i]=="V" or s[i]=="U":
                        runes+=U.Icon
                elif s[i]=="C" or s[i]=="K":
                        runes+=CK.Icon
                elif s[i]=="S" or s[i]=="Z":
                        runes+=S.Icon
                elif s[i]=="F":
                        runes+=F.Icon
                elif s[i]=="O":
                        runes+=O.Icon
                elif s[i]=="R":
                        runes+=R.Icon
                elif s[i]=="G":
                        runes+=G.Icon
                elif s[i]=="W":
                        runes+=W.Icon
                elif s[i]=="H":
                        runes+=H.Icon
                elif s[i]=="N":
                        runes+=N.Icon
                elif s[i]=="I":
                        runes+=I.Icon
                elif s[i]=="J":
                        runes+=J.Icon
                elif s[i]=="P":
                        runes+=P.Icon
                elif s[i]=="X":
                        runes+=X.Icon
                elif s[i]=="T":
                        runes+=T.Icon
                elif s[i]=="B":
                        runes+=B.Icon
                elif s[i]=="E":
                        runes+=E.Icon
                elif s[i]=="M":
                        runes+=M.Icon
                elif s[i]=="L":
                        runes+=L.Icon
                elif s[i]=="D":
                        runes+=D.Icon
                elif s[i]=="A":
                        runes+=A.Icon
                elif s[i]=="Y":
                        runes+=Y.Icon
                elif s[i]==" ":
                        runes+=SPACE.Icon
                elif dots and s[i]==".":
                        runes+="."
                elif s[i]=="\n" or s[i]==".":
                        runes+=SPACE.Icon
                #else:
                #        print("?????:",s[i])
                i+=1
                
        return runes

def engToRunes(inp):
        return engToRunes_st(inp)
        #return engToRunes_simple(inp)

def encVinner(txt,alph,key):
        s=""
        diff=0
        for i in range(len(txt)):
                found=0
                for j in range(len(alph)):
                       if txt[i]==alph[j]:
                               found=1
                               apos=j
                               break
                if found:
                        s+=alph[(apos+key[diff])%len(alph)]
                        diff=(diff+1)%len(key)
                else:
                        s+=txt[i]
        return s

AssignedPage = ""
VigstreamPage = ""

def vigstream():
        tline1 = ""
        conter = 0
        fconter = 0
        reverseline = [0] * len(stream)
        for x in range(0,len(stream)):
                reverseline[len(stream) - x - 1] = stream[x]



        
        for x in range(0, len(VigstreamPage)):
                for item in runelist:
                        if VigstreamPage[x] == SPACE.Icon or VigstreamPage[x] == ":" :
                                tline1 = tline1 + "|" + SPACE.English
                                break
                            
                        elif VigstreamPage[x] == item.Icon:
                                tline1 = tline1 + "|" + runelist[(item.Shift - (stream[conter % (len(stream))])) % 29].English
                                conter = conter + 1

                                if item.English == "F":
                                        fconter = fconter + 1
                                        tline1 = tline1 +  "|" + '\033'#[0m'
                                break
                                

                                
        print (tline1)
        penis = input("WHAT?" + str(fconter))
        
        return 0

def skipstream():
        tline1 = ""
        tline2 = ""
        skiparray = []
        streamcount = 0
        spacelessSource = ""
        for z in range(0, len(ShiftSource)):
            if ShiftSource[z] != SPACE.Icon and ShiftSource[z] != ":":
                spacelessSource = spacelessSource + ShiftSource[z]
        
        
        
        
        for x in range(0, len(AssignedPage)):
                for item in runelist:
                        if AssignedPage[x] == SPACE.Icon:
                                tline1 = tline1 + "|" + SPACE.English
                                break
                        if AssignedPage[x] == item.Icon:
                            print(len(spacelessSource))
                            for y in runelist:
                                if spacelessSource[(stream[x] % len(spacelessSource))] == y.Icon:   #list out of range if spaceless > stream FYI
                                    tline1 = tline1 + "|" + y.English
                                    tline2 = tline2 + str(y.Gematria) + ", "
                                    if len(skiparray) > 0:
                                        skiparray.append(skiparray[-1] + y.Gematria)
                                    else :
                                        skiparray.append(y.Gematria)
                                    break
        print (tline1)
        print (tline2)
        print(skiparray[-1])
        carryon = input("Now you can test if those letters can be used to shift the original p54")
        
        tline1 = ""
        conter = 0
        fconter = 0

        for x in range(0, len(VigstreamPage)):
                for item in runelist:
                        if VigstreamPage[x] == SPACE.Icon or VigstreamPage[x] == ":" :
                                tline1 = tline1 + "|" + SPACE.English
                                break
                            
                        elif VigstreamPage[x] == item.Icon:
                                print ("DEBUG:" + str(conter) + "|" +str(item.Shift) + " - " + str((skiparray[conter % (len(skipseries))] - 1)% 29) + "::" + str(item.Shift - (skipseries[conter % (len(skipseries))])-1) )
                                tline1 = tline1 + "|" + runelist[(item.Shift + (skiparray[conter % (len(skiparray))] -1 % 29)) % 29].English
                                conter = conter + 1

                                if item.English == "F":
                                        fconter = fconter + 1
                                        tline1 = tline1 +  "|" + '\033'#[0m'
                                break
        print (tline1)
        return 0

def convgematria():
        print ("Gematria List")
        seriesstring = ""
        germcount = 0
        wordcounter = 0
        sumstream = 0
        for x in AssignedPage:
                for item in runelist:
                        if x == item.Icon:
                                germcount = germcount + item.Gematria
                                print (item.Gematria)
                                break
                        elif x == SPACE.Icon or x == ":":
                                seriesstring = seriesstring + str(germcount) + ", "
                                sumstream = sumstream + germcount
                                germcount = 0
                                wordcounter = wordcounter +1
                                break
                        
        print (seriesstring)
        print ("\n\n" + "words: " + str(wordcounter))
        


        print ("sum of words: " + str(sumstream))
        
        


def countglyphs():
        glyphcount = 0
        for x in AssignedPage:
                for item in runelist:
                        if x == item.Icon:
                                glyphcount = glyphcount + 1
                                break
        print (glyphcount)
                                
                                
def theorysel():
        theorymode = input("Some theories suggest you do the following to the runes beforehand:\n1: Reverse Runes\n2: Reverse Stream\n3: Skip first letter\n4: Totient of streams (-1 for primes)\n9: DONE\n\n")
        if theorymode == "1":
            print("Runes Reversed (TBI)")
            reverseline = ""
            global VigstreamPage
            for x in VigstreamPage:
                reverseline =x + reverseline
            VigstreamPage = reverseline
            
            theorysel()
        if theorymode == "2":
            print("Stream/Shift Reversed (TBI)")
            revline = ""
            global ShiftSource
            for x in ShiftSource:
                revline = x + revline
            ShiftSource = revline
            theorysel()
        if theorymode == "3":
            stream.insert(0, 0)
            print(stream)
            theorysel()            
        if theorymode == "4":
            for x in range(0, len(stream)):
                stream[x] = stream[x] - 1
            theorysel()                                       

def stat_chars(s,alph,pr):
        d=dict()
        N=0
        for i in range(len(s)):
                if s[i] in alph:
                        N+=1
                        di=s[i]
                        if di in d:
                                d[di]+=1
                        else:
                                d[di]=1
                        
        
        s_d = sorted(d.items(), key=operator.itemgetter(1))
        if pr!=0:
                print(s_d)
                print("Toatal chars:",len(s_d))

        ic=0
        for (a,b) in d.items():
                ic+=b/N*(b-1)/(N-1)
                
        ic*=len(alph)
        return ic

def stat_pairs(s,alph):
        d=dict()
        c=s[0]
        N=0
        for i in range(len(s)-1):
                if s[i+1] in alph:
                        if c in alph:
                                N+=1
                                di=c+s[i+1]
                                if di in d:
                                        d[di]+=1
                                else:
                                        d[di]=1
                        c=s[i+1]
        
        s_d = sorted(d.items(), key=operator.itemgetter(1))
        #print(s_d)

        ic=0
        for (a,b) in d.items():
                ic+=b/N*(b-1)/(N-1)
                

        ic*=len(alph)*len(alph)
        return ic
        
def stat_w(s,l,p):
        m=0
        for i in range(0,len(s)-l):
                #print(s[i+1:])
                #print(s[i:i+l])
                c=s[i+1:].count(s[i:i+l])
                if c>0:
                        if c>m:
                                m=c
                        if p==1:
                               print("Len:",l,", i=",i,", word=",s[i:i+l],", found=",c+1,", ffound=",s.find(s[i:i+l],i+1),", diff=",s.find(s[i:i+l],i+1)-i)
        return m+1

def lstat_ns(s):
        d=dict()
        t=0
        for c in s:
               if c in d:
                       d[c]+=1
                       t+=1
               else:
                        d[c]=1
                        t+=1
        s_d = sorted(d.items(), key=operator.itemgetter(1))
        t2=t-s_d[-1][1]
        print("Total:",t2," (with space:",t,")")
        for i in range(len(s_d)-2,-1,-1):
                #print(s_d[i][0],"-",s_d[i][1],"-",s_d[i][1]/t2)
                print(s_d[i][0],"-",s_d[i][1],"-","%.2f%%"%(s_d[i][1]/t2*100))
        #print(s_d)


def lstat_diff(s,pr=0):
        EngFreq_s=sorted(EngFreq,key=operator.itemgetter(1))
        d=dict()
        t=0
        diff=0
        for c in s:
               if c in d:
                       d[c]+=1
                       t+=1
               else:
                        d[c]=1
                        t+=1
        s_d = sorted(d.items(), key=operator.itemgetter(1))
        #print("Total:",t)
        for i in range(len(s_d)-1,-1,-1):
        #for i in range(len(s_d)-1,16,-1):
                i_rated=len(s_d)-1-i
                #print(s_d[i][0],"-",s_d[i][1],"-",s_d[i][1]/t2)
                if i_rated<len(EngFreq_s):
                        el=EngFreq_s[len(EngFreq_s)-1-i_rated][0]
                        ef=EngFreq_s[len(EngFreq_s)-1-i_rated][1]
                else:
                        el='!'
                        ef=0
                #xd=(s_d[i][1]/t*100-ef)*(s_d[i][1]/t*100-ef)
                xd=(s_d[i][1]-ef*t/100)*(s_d[i][1]-ef*t/100)/s_d[i][1]
                diff+=xd
                if pr==1:
                        print(s_d[i][0],"-",s_d[i][1],"-","%.2f%%"%(s_d[i][1]/t*100),"\t",el,"%.2f%%"%ef,"Diff: %.2f"%xd)
        #print(s_d)
        #diff/=len(s_d)
        #print("Diff: %.2f"%diff)
        return diff

def lstat(s):
        d=dict()
        t=0
        for c in s:
               if c in d:
                       d[c]+=1
                       t+=1
               else:
                        d[c]=1
                        t+=1
        s_d = sorted(d.items(), key=operator.itemgetter(1))
        print("Total:",t)
        for i in range(len(s_d)-1,-1,-1):
                #print(s_d[i][0],"-",s_d[i][1],"-",s_d[i][1]/t2)
                print(s_d[i][0],"-",s_d[i][1],"-","%.2f%%"%(s_d[i][1]/t*100))
        #print(d)
        #print(s_d)
                
def subs(s,diff,per):
        sout=""
        for i in range(diff,len(s),per):
                sout+=s[i]
        return sout

def gr_subs(gr,diff,per):
        grout=[]
        for g in gr:
                grout.append(subs(g,diff,per))
                             
        return grout


english_frequences = [
        0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015,
        0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749,
        0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056, 0.02758,
        0.00978, 0.02360, 0.00150, 0.01974, 0.00074]
def icorr(inp1,sp=False):
        if sp:
                inp=inp1.replace(SPACE.Icon,"")
        else:
                inp=inp1
        ic=0.0
        d=dict()
        N=len(inp)
        for c in inp:
                if c in d:
                        d[c]+=1
                else:
                        d[c]=1
        #print(d)
        for (a,b) in d.items():
                ic+=b/N*(b-1)/(N-1)
                #print(b)

        ic*=len(d)
        return ic

def vigenere_decrypt(target_freqs, inp):
    #nchars = len(uppercase)
    #ordA = ord('A')
           
        sorted_targets = sorted(target_freqs)
        print(inp)
        def frequency(inp):
                result = dict()
                #[[c, 0.0] for c in uppercase]
                for c in inp:
                        #c=inp[i]
                        if c in result:
                                result[c]+= 1
                        else:
                                result[c] = 1
                        
                return result

        def correlation(inp):
                result = 0.0
                freq = frequency(inp)
                freq_s = sorted(freq.items(), key=operator.itemgetter(1))
                #freq.sort(key=itemgetter(1))
                #print(freq)
                #print(freq_s)
                #print(sorted_targets)

                for i in range(len(freq_s)):
                        if i<len(sorted_targets):
                                result+=freq_s[len(freq_s)-1-i][1]*sorted_targets[len(sorted_targets)-1-i]
                                #print("A:",freq_s[len(freq_s)-1-i][1],", B: ",(sorted_targets[len(sorted_targets)-1-i]))
                        
                #for i, f in enumerate(freq):
                #    result += f[1] * sorted_targets[i]
                return result
        
        best_len = 0
        best_corr = -100.0
        
        for i in range(2,len(inp)//20):
               pieces = [[] for _ in range(i)]
               for j in range(len(inp)):
                       pieces[j%i].append(inp[j])

               corr = -0.5 * i + sum(correlation(p) for p in pieces)
               print("Corr: %.2f"%corr,", L=",i)
               
               if corr > best_corr:
                       best_len = i
                       best_corr = corr
            
        if best_len == 0:
                return ("Text is too short to analyze", "")
        
        print("Best Corr: %.2f"%best_corr,", L=",best_len)
        
        pieces = [[] for _ in range(best_len)]
        for i in range(len(inp)):
                pieces[i % best_len].append(inp[i])
        freqs = [frequency(p) for p in pieces]
        
        key = ""
        #print(freqs)
        

                                
        return("a","b")

def find_p_xi(txt,pStart,pEnd,pr):
        for i in range(pStart,pEnd+1):
                #print("period:",i)
                ll=0
                for j in range(0,i):
                        #ld=lstat_diff(subs(Pages27to32ns,j,i))
                        #ld=lstat_diff(subs(p2,j,i),0)
                        ld=lstat_diff(subs(txt,j,i),pr)
                        #ld=lstat_diff(subs(EngEx,j,i))
                        ll+=ld
                        #if (ld<2):
                        print("Perioud: ",i,", Step: ",j,",diff=%.2f"%ld)
                #print("=============")
                ll/=(i)
                print ("Period: ",i,",av dif=%.2f"%ll)

def only_runes(s):
        sout=""
        for c in s:
                for r in runelist:
                        if r.Icon==c:
                                sout+=c
                                break
        return sout

def check_runes(s,pr=False,sp=False):
        ps=s.split("\n\n")
        sar=[]
        notrunes=""
        for i in range(len(ps)):
                if pr:
                        print("Page:",i)
                sout=""
                #sout+="Page:"+str(i)+"\n"
                #print(ps[i])
                for c in ps[i]:
                        for j in range(len(runelist)):
                                if runelist[j].Icon==c:
                                        sout+=c
                                        break
                        else:
                                if sp and c=="•":
                                        sout+=c
                                if c!="•" and c!=" " and c!="\n":
                                        if pr:
                                                print(c,end='')
                sar.append(sout)
                #sout+="\n\n"
                if pr:
                        print("\n")
                        
        if pr:
                for s in sar:
                        print(s)
        return sar

def decr_part(s,l):
        sout=""
        for c in s:
                for (a,b) in l:
                        #print(a,b)
                        if c==a:
                               sout+=b
                               break
                else:
                        sout+=c

        return sout
# a*char + b
def f_line(s,a,b,sp=False):
        sout=""
        for i in range(len(s)):
                c=rune_get(s[i])
                if sp and s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                elif (c==-1):
                        print("Not rune:",i)
                else:
                        sout+=runelist[(c*a+b)%29].Icon
        return sout

def f_inv(s):
        sout=""
        for i in range(len(s)):
                c=rune_get(s[i])
                if (c==-1):
                        print("Not rune:",i)
                else:
                        sout+=runelist[(28-c)%29].Icon
        return sout

def f_arr(s,a,sp=False,coeff=-1):
        #print(s)
        sout=""
        d=0
        for i in range(len(s)):
                c=rune_get(s[i])
                if sp and s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                elif(c==-1):
                        print("Not rune:",i)
                else:
                        sout+=runelist[(c+coeff*a[d%len(a)])%29].Icon
                        d+=1
                        if sp and d>=len(a):
                                return sout
        return sout
def f_str(s,skey,mult,sp=False):
        #print(s)
        sout=""
        d=0
        for i in range(len(s)):
                c=rune_get(s[i])
                if sp and s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                elif(c==-1):
                        print("Not rune:",i)
                else:
                        shft=rune_get(skey[d%len(skey)])
                        if (shft==-1):
                                print("Not rune in key. i=",i,"d=",d,"r=",skey[d%len(skey)])
                        sout+=runelist[(c+mult*shft)%29].Icon
                        d+=1
                        #if sp and d>=len(a):
                        #        return sout
        return sout

def gcd(a, b):
# Return the GCD of a and b using Euclid's Algorithm
        while a != 0:
                a, b = b % a, a
        return b

def findModInverse(a, m):
# Returns the modular inverse of a % m, which is
# the number x such that a*x % m = 1
        if gcd(a, m) != 1:
                return 0 # no mod inverse if a & m aren't relatively prime
# Calculate using the Extended Euclidean Algorithm:
        u1, u2, u3 = 1, 0, a
        v1, v2, v3 = 0, 1, m
        while v3 != 0:
                q = u3 // v3 # // is the integer division operator
                v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3
        return u1 % m
def mod_pow_my(a,m,n):
        #x = a^m mod n
        if a==0:
                return 0
        x = 1
        for i in range(m):
                x=(x*a)%n
        return x

def mod_pow(a,m,n):
        #x = a^m mod n
        if a==0:
                return 0
        p=1
        q=a
        while m > 0:
                if m%2==1:
                        p=(p*q)%n
                q=(q*q)%n
                m=m//2
        return p

def mod_root(a,m,n):
        #find x such x^m=a mod n
        x=[]
        if a==0: return [0]
        for i in range(1,n):
                if mod_pow(i,m,n)==a:
                        x.append(i)
        return x

def mod_log_germ(a,b,n):
        #find x such b^x=a mod n
        x=[]
        #if a==0 and b==0: return [0]
        for r in runelist:
                if mod_pow(b,r.Gematria,n)==a:
                        x.append(r.Shift)
        return x

        
def f_pow(s,a,sp=False):
        #print(s)
        sout=""
        d=0
        for i in range(len(s)):
                c=rune_get(s[i])
                if sp and s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                elif(c==-1):
                        print("Not rune:",i)
                else:
                        sout+=runelist[mod_pow(c,a[d%len(a)],29)].Icon
                        d+=1
                        #if sp and d>=len(a):
                        if d>=len(a):
                                return sout
        return sout
        
def f_marr(s,a,sp=False):
        #print(s)
        sout=""
        d=0
        for i in range(len(s)):
                c=rune_get(s[i])
                if sp and s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                elif(c==-1):
                        print("Not rune:",i)
                else:
                        #print("inv:",a[d%len(a)])
                        inv=findModInverse(a[d%len(a)],29)
                        #print("inv2:",inv)
                        if inv==None:
                                inv=0
                        #inv=a[d%len(a)]
                        sout+=runelist[(c*inv)%29].Icon
                        d+=1
                        #if sp and d>=len(a):
                        if d>=len(a):
                                return sout
        return sout
def f_darr(s,a,sp=False):
        #print(s)
        sout=""
        d=0
        for i in range(len(s)):
                c=rune_get(s[i])
                if sp and s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                elif(c==-1):
                        print("Not rune:",i)
                else:
                        sout+=runelist[(c*a[d%len(a)])%29].Icon
                        d+=1
                        #if sp and d>=len(a):
                        if d>=len(a):
                                return sout
        return sout

def f_par(s,aa,bb,cc,sp=False): #ax^2+bx+c
        #print(s)
        sout=""
        d=0
        for i in range(len(s)):
                c=rune_get(s[i])
                if sp and s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                elif(c==-1):
                        print("Not rune:",i)
                else:
                        sout+=runelist[(c-(aa*d*d+bb*d+cc))%29].Icon
                        d+=1
        return sout

def f_diff(s,sp=False): #s[1]=s[1]-s[0]
        #print(s)
        sout=""
        d=0
        c=0
        c0=0
        c1=0
        #c2 c1 c0 c  abcdef abc
        for i in range(len(s)):
                c2=c1
                c1=c0
                c0=c
                c=rune_get(s[i])
                if sp and s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                        c=c0
                elif(c==-1):
                        print("Not rune:",i)
                elif (d==0):
                        sout+=runelist[c].Icon
                        d+=1
                else:           
                        sout+=runelist[(c-c0)%29].Icon
                        #inv=findModInverse(c0,29)
                        #if inv==None:
                        #        inv=0
                        #sout+=runelist[(c*inv)%29].Icon
                        d+=1
        return sout
def f_sum(s):
        sout=""
        d=0
        cur_s=0
        for i in range(len(s)):
                prev_s=cur_s
                cur_s=rune_get(s[i])
                if s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                        cur_s=prev_s
                elif(cur_s==-1):
                        print("Not rune f_sum:",i)
                else:
                        cur_s=(prev_s+cur_s)%29
                        sout+=runelist[cur_s].Icon
                        d+=1
        return sout
    
def f_diff_line(s,a,b,c): #s[i]=a*s[i-1]+b*s[i]+c*s[i+1]
        #print(s)
        sout=""
        ind=0
        #prev_s
        #next_s
        d=0
        cur_s=0
        for i in range(len(s)):
                prev_s=cur_s
                cur_s=rune_get(s[i])
                if s[i]==SPACE.Icon:
                        sout+=SPACE.Icon
                        cur_s=prev_s
                elif(cur_s==-1):
                        print("Not rune:",i)
                else:
                        next_s=0
                        for j in range(i+1,len(s)):
                            if s[j]!=SPACE.Icon:
                                next_s=rune_get(s[j])
                                break
                        sout+=runelist[(a*prev_s+b*cur_s+c*next_s)%29].Icon
                        d+=1
        return sout

def gr_par(gr,a,b,c,sp=False): #ax^2+bx+c
        grout=[]
        for g in gr:
                grout.append(f_par(g,a,b,c,sp))
                             
        return grout


def gr_arr(gr,a,sp=False):
        grout=[]
        for g in gr:
                grout.append(f_arr(g,a,sp))
                             
        return grout

def gr_line(gr,a,b,sp=False):
        grout=[]
        for g in gr:
                grout.append(f_line(g,a,b,sp))
                             
        return grout

def gr_marr(gr,a,sp=False):
        grout=[]
        for g in gr:
                grout.append(f_marr(g,a,sp))
                             
        return grout
def gr_pow(gr,a,sp=False):
        grout=[]
        for g in gr:
                grout.append(f_pow(g,a,sp))
                             
        return grout
def gr_darr(gr,a,sp=False):
        grout=[]
        for g in gr:
                grout.append(f_darr(g,a,sp))
                             
        return grout

def gr_diff(gr,sp=False):
        grout=[]
        for g in gr:
                grout.append(f_diff(g,sp))
                        
        return grout
def factor(n):
    i = 2
    limit = sqrt(n)    
    while i <= limit:
      if n % i == 0:
        yield i
        n = n / i
        limit = sqrt(n)   
      else:
        i += 1
    if n > 1:
        yield n

def pfac(num):
    #d=defaultdict(int)
    out=0
    d=dict()
    for f in factor(num):
            if f in d:
                    d[f]+=1
            else:
                    d[f]=1
            #out+=1
            #print(f)
     #   d[f]+=1

    #terms=[]
    #for e in sorted(d.keys()):
        #if d[e]>1:
       #     terms.append('{:,}^{}'.format(e,d[e]))
      #  else:
     #       terms.append('{:,}'.format(e))

    #print ' * '.join(terms),'=','{:,}'.format(num)
    return len(d)
    
def gen_primes(ml):
    n = 2
    primes = []
    l=0
    while True:
        for p in primes:
            if n % p == 0:
                break
        else:
            primes.append(n)
            l+=1
            #yield n
            if l>ml:
                    return primes

        n += 1
def gen_fib(ml):
    n = 2
    fib = [0,1]
    l=0
    c1=0
    f=1
    #c0 c1 f 0 1 1 2 3
    while True:
        c0=c1
        c1=f
        f=(c0+c1)%29
        fib.append(f)
        if l>ml:
                return fib
        l+=1
        n += 1

def test_icorr_gr(gr,lvl=0,sp=False):
        outmax=0
        for i in range(len(gr)):
                ic=icorr(gr[i],sp)
                if ic>lvl:
                        print("i=",i,"IC=",ic)
                        if ic>outmax:
                                outmax=ic
        return outmax

def decr_shift(s,sp=False):
        if sp:
                s0=s.replace(SPACE.Icon,"")
        else:
                s0=s
        mp=collections.Counter(s0).most_common(1)[0]
        #print(mp)
        cf=rune_get(mp[0])
        #print("MP:",cf)
        s1=""
        s2=""
        for c in s:
                if sp and c==SPACE.Icon:
                        s1+=SPACE.Icon
                        s2+=SPACE.Icon
                else:
                        c0=rune_get(c)
                        s1+=runelist[(c0-(cf-E.Shift))%29].Icon
                        s2+=runelist[(29-(c0-(cf-E.Shift)))%29].Icon
        print("+:",runesToEng(s1))
        print("-:",runesToEng(s2))

def test_oeiss_div(gr,Xi2_lvl,alph,sp=False):
        f = open("stripped")
        i=0
        for line in f:
                if line[0]!='#':
                        nm=line[0:7]
                        astr=line[9:-2].split(',')
                        ar=[]
                        for a in astr:
                                ar.append(int(a))
                                
                        #print(nm,"| ",len(ar),ar)
                        i+=1
                        if len(ar)>50 and (min(ar)>0):
                        #if nm=="A000040":
                                #print(ar)
                                #print(gr)
                                #gr_freq(gr,alph,0,1)
                                pag=gr_marr(gr,ar)
                                #gr_freq(pag,alph,0,1)
                                gr_s=gr_line(pag,-1,28)
                                res=gr_freq(pag,alph,Xi2_lvl,0)
                                #print(runesToEng(p3[0]))
                                if res!=[]:
                                        print("<-OEISS:",nm)
                                        for r in res:
                                                print(runesToEng(gr_s[r]))
                                        print("")
                                                
                        if i>10000:
                                return


def test_oeiss(gr,lvl=0,sp=False):
        f = open("stripped")
        i=0
        for line in f:
                if line[0]!='#':
                        nm=line[0:7]
                        astr=line[9:-2].split(',')
                        ar=[]
                        for a in astr:
                                ar.append(int(a))
                                
                        #print(nm,"| ",len(ar),ar)
                        i+=1
                        for j in range(len(gr)):
                               if len(ar)>50:
                                        s=f_arr(gr[j],ar,sp)
                                        ic=icorr(s,sp)
                                        if ic>lvl:
                                                print(nm,"num=",j,"Lstr=",len(gr[j]),"Larr=",len(ar),"IC=",ic)
                                                decr_shift(s,sp)

                        #if (i>100):
                                #return

def find_rep(gr,lmin,lmax):
        for i in range(len(gr)):
                for l in range(lmax,lmin-1,-1):
                        for j in range(len(gr[i])-l):
                                s=gr[i][j:j+l]
                                ind=[j]
                                
                                pos=gr[i][j+1:].find(s,1)
                                while  pos!=-1:
                                        ind.append(pos)
                                        pos=gr[i][j+1:].find(s,pos+1)
                                        
                                if len(ind)>1:
                                        print("T:",i,"L=",l,"W:",s,"Ind=",ind)

def load_dictionary(maxnum=0):
        if english_words!=[]:
                return

        dt=0
        if (dt==0):
                f = open("english_words.txt")
        elif (dt==1):
                f = open("wbf2.txt")
        #maxnum=10
        elif (dt==2):
                f = open("latintxt2.txt")
        i=0
        english_words.append("")
        runes_words.append("")
        Prob_R[""]=0
        Prob_E[""]=0
        Pall=0
        for line in f:
                if (dt==0):
                        lar=line.split(" ")
                        w=lar[0].upper().replace("\n","")
                if (dt==1):
                        w=line.upper().replace("\n","")
                        lar=[]
                        lar.append(str(1))
                        lar.append(str(1))
                elif (dt==2):
                        lar2=line.split(",")
                        w=lar2[0].upper().replace("\"","")
                        lar=[]
                        lar.append(str(1))
                        lar.append(str(1))
                #print(w)
                #lar=[]
                #lar.append(str(1))
                #lar.append(str(1))
                english_words.append(w)
                runes_words.append(engToRunes(w))
                runes_set.add(engToRunes(w))
                ##prob_words.append(int(lar[1]))
                ss=engToRunes(w)
                Prob_R[ss]=int(lar[1])
                Prob_E[w]=int(lar[1])
                Pall+=int(lar[1])
                ##runes_words.append(w)
                i+=1
                if maxnum!=0 and i>=maxnum:
                        break
        f.close()
        print("Loaded: ",i, "Total P:",Pall)

        for r in runelist:
                if not r.Icon in runes_words:
                        runes_words.append(r.Icon)
                        Prob_R[r.Icon]=0
                        english_words.append(r.English)
                        Prob_E[r.English]=0

        for e in Prob_E:
                Prob_E[e]/=Pall

                
        for d in Prob_R:
                ##prob_words[i]/=Pall
                Prob_R[d]/=Pall
                ##print(d,Prob_R[d])
                ##Prob_R[i]=Prob_R[i]/Pall
               
def is_rune_end(s):
        l=len(s)
        i=0
        #return 0
        for w in runes_words:
                if len(w)>=l and w[-l:]==s:
                        #print("L_Found:",english_words[i],w)
                        #return True
                        return i
                else:
                        i+=1
        return None

def is_rune_cycle(s):
        l=len(s)
        i=0
        for w in runes_words:
                wl=len(w)
                for j in range(0,min(l,wl)):
                        if s[j]!=w[j]:
                                break
                else:
                        if l<=wl:
                                #print("D0",s,w)
                                #print("Full:",english_words[i])
                                return [i]
                        else:
                                #print("D1",s,w)
                                #print("Full:",english_words[i])
                                rem=is_rune_rec(s[wl:])
                                if rem!=None:
                                        return [i]+rem
                i+=1
        #print("Not found:",s)
        return None
        

def is_rune_rec(s):
        #print("rune_rec",s)
        l=len(s)
        i=0
        for w in runes_words:
                wl=len(w)
                for j in range(0,min(l,wl)):
                        if s[j]!=w[j]:
                                break
                else:
                        if l<=wl:
                                #print("D0",s,w)
                                #print("Full:",english_words[i])
                                return [i]
                        else:
                                #print("D1",s,w)
                                #print("Full:",english_words[i])
                                rem=is_rune_rec(s[wl:])
                                if rem!=None:
                                        return [i]+rem
                i+=1
        #print("Not found:",s)
        return None
        
def is_rune_word(s):
        l=len(s)
        for i in range(0,l):
                ls=s[:i+1]
                #print(ls)
                l_is=is_rune_end(ls)
                if l_is!=None:
                        rs=s[i+1:]
                        #print("L:",ls,"R:",rs)
                        if i+1==l:
                                return [l_is]
                        
                        res=is_rune_rec(rs)
                        if res!=None:
                                return [l_is]+res
        return None

#       0123456789
#       bbbmmmmmme
#       ^        ^  
#       b        e
#       ws wm we

def is_rune_s(s,deep=0):
        #print("Start search:",s)
        l=len(s)
        i=0
        #return 0
        for w in runes_words:
                if len(w)>=l and w[-l:]==s:
                        #print("S_Found:",english_words[i],w)
                        #return True
                        return i
                else:
                        i+=1
                if deep!=0 and i>deep:
                        return None
        return None

def is_rune_e(s,deep=0):
        #print("End search:",s)
        l=len(s)
        i=0
        #return 0
        for w in runes_words:
                if len(w)>=l and w[:l]==s:
                        #print("E_Found:",english_words[i],w)
                        #return True
                        return i
                else:
                        i+=1
                if deep!=0 and i>deep:
                        return None
        return None

def viterbi_segment(text, P):
    """Find the best segmentation of the string of characters, given the
    UnigramTextModel P."""
    # best[i] = best probability for text[0:i]
    # words[i] = best word ending at position i
    n = len(text)
    words = [''] + list(text)
    best = [1.0] + [0.0] * n
    ## Fill in the vectors best, words via dynamic programming
    for i in range(n+1):
        for j in range(0, i):
            w = text[j:i]
            if w in P:
                    Pw=P[w]
            else:
                    Pw=0
            if Pw * best[i - len(w)] >= best[i]:
                best[i] = Pw * best[i - len(w)]
                words[i] = w
    ## Now recover the sequence of best words
    sequence = []; i = len(words)-1
    while i > 0:
        #sequence[0:0] = [words[i]]
        sequence[0:0] = [runes_words.index(words[i])]
        i = i - len(words[i])
    ## Return sequence of best words and overall probability
    return sequence, best[-1]


def is_rune_m(s,deep=0):
        #print("Middle search:",s)
        #return ([44],1)
        (d,c) = viterbi_segment(s,Prob_R)
        #print (d,c)
        sdec=""
        for i in d:
                sdec+=english_words[i]+"("+runes_words[i]+")"+" "
        #print("Middle Found P:",c,"T:",sdec)
        if c>=1e-11:
                return (d,c)
        else:
                return None
def is_rune_words(s):
        (d,c) = viterbi_segment(s,Prob_R)
        sdec=""
        for i in d:
                sdec+=english_words[i]+"("+runes_words[i]+")"+" "
        #print("IW:",s,c,sdec)
        if c>=1e-16:
                return (sdec,c)
        else:
                return ("",0)
       
def is_rune_word_nr(s,deep=0):
        l=len(s)
        ws=dict()
        wm=dict()
        we=dict()
        ws[""]=0
        wm[""]=([0],0)
        we[""]=0
        #print("Search: ",s)
        for i_start in range(0,l+1):
                w_start=s[:i_start]
                for i_end in range(i_start-1,l):
                        w_middle=s[i_start:i_end+1]
                        w_end=s[i_end+1:]
                        #print(w_start,"|",w_middle,"|",w_end)
                        if w_start in ws:
                                f_s=ws[w_start]
                        else:
                                f_s=is_rune_s(w_start,deep)
                        if f_s==None:
                                continue
                        ws[w_start]=f_s

                        if w_end in we:
                                f_e=we[w_end]
                        else:
                                f_e=is_rune_e(w_end,deep)
                        if f_e==None:
                                continue
                        we[w_end]=f_e

                        if w_middle in wm:
                                f_m=wm[w_middle]
                        else:
                                f_m=is_rune_m(w_middle,deep)
                        if f_m==None:
                                continue
                        wm[w_middle]=f_m
                        
                        dr=[]
                        dr.append(f_s)
                        dr+=f_m[0]
                        dr.append(f_e)
                        #return dr
                        #print(dr)
                        #print(w_start,"|",w_middle,"|",w_end,"(",f_s,f_m[0],f_e,")","P=",f_m[1])
                        return (dr,f_m[1])
                        
        return (None,0)


def findword2(s,num,maxdeep=0):
        i=0
        ret=0
        for w in runes_words:
                if len(w)>=num:
                        if s.find(w)!=-1:
                                print("In: ",runesToEng(s),"found:",english_words[i])
                                ret+=1

                i+=1
                if maxdeep!=0 and i>=maxdeep:
                        return ret
        return ret

def findword(s):
        spl=is_rune_word(s)
        if spl!=None:
                sdec=""
                for i in spl:
                        sdec+=english_words[i]+" "
                print("Found:",sdec)
        return

def findword_nr(s,deep=0):
        
        (spl,p)=is_rune_word_nr(s,deep)
        if spl!=None:
                sdec=""
                for i in spl:
                        sdec+=english_words[i]+" "
                print("Found: P=",p,"TXT:",sdec)
        return p

def runesToArr(s):
        ar=[]
        for c in s:
                a=rune_get(c)
                if a!=-1:
                        ar.append(a)
        return ar

def runesGermToArr(s,a_c=1,b_c=0,a_cc=1,b_cc=0):
        ar=[]
        for c in s:
                a=rune_get(c)
                if a!=-1:
                        ar.append(runelist[(a*a_cc+b_cc)%29].Gematria*a_c+b_c)
        return ar

def dec_versions(s):
        load_dictionary(10000)
        #print(is_rune_end(engToRunes("FOR")))
        #print("ABC"[:0])
        #s0=engToRunes("FOR")
        #s0="TOFROM"
        #print(s0)
        #findword_nr(engToRunes("LLBLOCKTRI"))
        #print(is_rune_m(engToRunes("BLOCKCALL")))
        #print(viterbi_segment("BLOCKCALL",Prob_E))
        #print(is_rune_m(engToRunes("FROMHERE")))
        #return    
        
        #for r1 in runelist:
        #        for r2 in runelist:  
        #                if not is_rune_end(r1.Icon+r2.Icon):
        #                        print (r1.Icon+r2.Icon,r1.English+r2.English)
        #return
        i=0
        for w in runes_words:
                #encw=engToRunes(w)
                if len(w)==len(s):
                        #print(w,english_words[i])
                        dec=f_str(s,w,-1,True)
                        #dec=f_str("ᛚᛂ"+s,"ᚦᛖ"+w,-1,True)
                        ar=runesToArr(dec)
                        #if ar[0]<ar[1]<ar[2]<ar[3]<ar[4]:
                        #print(english_words[i],runesToEng(dec),ar)
                        #findword_nr(dec,4,10000) >0:
                        if findword_nr(dec,0) >0:
                                print(english_words[i],runesToEng(dec),ar)
                i+=1
                if (i%1000==0):
                        print ("====== PRG : ",i//1000,"(000) ==========")
                
def vig_attack(gr,min_len,target_ic):
        for i in range(len(gr)):
                for l_per in range(1,len(gr[i])//min_len+1):
                        ic_av=0
                        for k in range(l_per):
                                s=subs(gr[i],k,l_per)
                                #print(s)
                                ic=icorr(s,False)
                                ic_av+=ic
                                #if (ic>=target_ic):
                                        #print("Text:",i,"Per=",l_per,"shift=",k,"IC=",ic," ",s)
                        ic_av=ic_av/l_per
                        if (ic_av>=target_ic):
                                print("AV, Text:",i,"Per=",l_per,"IC_av=",ic_av)

def gr_test(gr,alph):
        N=0
        for g in gr:
                ip=stat_pairs(g,alph)
                print("Text:",N,"ip2=",ip)
                N+=1
                #print(s)        
def f_freq_pair(s,alph,l=0):
        d=dict()
        N=0
        for c0 in alph:
                for c in alph:
                        d[c0+c]=0
        
        c=s[0]
        for i in range(1,len(s)):
                c0=c
                if (s[i] in alph) and (c0 in alph):
                        c=s[i]
                        pair=c0+c
                        d[pair]+=1
                        N+=1

        s_d = sorted(d.items(), key=operator.itemgetter(1))                        
        Xi2=0
        for di in d:
                x=(d[di]-N/len(alph)*N/len(alph))*(d[di]-N/len(alph)*N/len(alph))/(N/len(alph)*N/len(alph))
                #x=(d[di]-N/len(alph)*N/len(alph))
                Xi2+=x
        Xi2/=(N*N)
        for i in range(l):
                print(s_d[-i-1][0],"(",runelist[rune_get(s_d[-i-1][0][0])].English+runelist[rune_get(s_d[-i-1][0][1])].English,")\t-",s_d[-i-1][1])

        print("Xi2=",Xi2)
        return Xi2

def f_freq(s,alph,pr=0):
        d=dict()
        d0=dict()
        dn=dict()
        #print(alph)
        for c in alph:
                d[c]=0
                d0[c]=0
                dn[c]=0
        N=0
        #print(d)
        c0=""
        i=0
        for c in s:
                if c in d:
                        d[c]+=1
                        N+=1
                        if (i==0 or s[i-1]==SPACE.Icon):
                                d0[c]+=1
                        if (i==len(s)-1 or s[i+1]==SPACE.Icon):
                                dn[c]+=1
                i+=1
                
        Xi2=0
        #print(d)
        d_odd=0
        d_even=0
        for c in alph:
                if N==0: break
                x=(d[c]-N/len(alph))*(d[c]-N/len(alph))/(N/len(alph))
                Xi2+=x
                ex=N/len(alph)
                sigmax=sqrt(N/len(alph)*(1-1/len(alph)))
                deltax=(d[c]-ex)/sigmax
                if (pr!=0):
                        print(rune_get(c)," ",c," ",runelist[rune_get(c)].English,"->",d[c],"(%.2f%%)"%(d[c]/N*100),"E:%.2f"%(ex),"Sigma:%.2f"%(sigmax),"Delta:%.2f"%(deltax))
                        #if(d[c]!=0):
                        #        print(rune_get(c)," ",c," ",runelist[rune_get(c)].English,"->",d[c],"(%.2f%%)"%(d[c]/N*100),"First:%.2f%%"%(d0[c]/d[c]*100),"Last:%.2f%%"%(dn[c]/d[c]*100))
                        #else:
                        #        print(rune_get(c)," ",c," ",runelist[rune_get(c)].English,"->",d[c],"(%.2f%%)"%(d[c]/N*100))

                if (rune_get(c)%2==0):
                        d_even+=d[c]
                else:
                        d_odd+=d[c]
                
        if (pr!=0):
                #print ("Even-%.2f%%; Odd-%.2f%%"%(d_even,d_odd))
                print ("Xi2=",Xi2,"\tLen=",N)
                
        return Xi2

def f_freq2(s,s2,alph,pr=0):
        d=dict()
        d2=dict()
        
        for c in alph:
                d[c]=0
                d2[c]=0
        N=0
        #print(d)
        i=0
        for c in s:
                if c in d:
                        d[c]+=1
                        N+=1
                i+=1
        N2=0
        if s2!="":
                for c in s2:
                        if c in d2:
                                d2[c]+=1
                                N2+=1
                        i+=1
        else:
                d2={'ᚾ': 36726, 'ᛋ': 37802, 'ᚷ': 6888, 'ᚢ': 21276, 'ᚠ': 13563, 'ᛁ': 34600, 'ᛉ': 723, 'ᚦ': 18166, 'ᛠ': 3718, 'ᛡ': 2079, 'ᚪ': 44081, 'ᚱ': 37212, 'ᛚ': 22048, 'ᚹ': 14787, 'ᛖ': 70724, 'ᚫ': 4, 'ᚳ': 18669, 'ᛝ': 5659, 'ᛇ': 190, 'ᛞ': 28046, 'ᛏ': 35884, 'ᚩ': 44429, 'ᛗ': 15296, 'ᚻ': 20808, 'ᛟ': 203, 'ᚣ': 12185, 'ᛂ': 714, 'ᛈ': 9960, 'ᛒ': 8422}
                N2=564862
        Xi2=0
        
        for c in alph:
                if N==0 or N2==0: break
                if d2[c]==0: d2[c]+=1
                x=(d[c]/N-d2[c]/N2)*(d[c]/N-d2[c]/N2)/(d2[c]/N2)
                Xi2+=x
                ex=d2[c]/N2*N
                sigmax=sqrt(d2[c]/N2*N*(1-d2[c]/N2))
                if sigmax==0: sigmax=0.0001
                deltax=(d[c]-ex)/sigmax
                if (pr!=0):
                        print(rune_get(c)," ",c," ",runelist[rune_get(c)].English,"->",d[c],"(%.2f%%)"%(d[c]/N*100),"E:%.2f"%(ex),"Sigma:%.2f"%(sigmax),"Delta:%.2f"%(deltax))

        if (pr!=0):
                #print ("Even-%.2f%%; Odd-%.2f%%"%(d_even,d_odd))
                print ("Xi2=",Xi2,"\tLen=",N)
        return Xi2        

def gen_rand(n,alph):
        s=""
        for i in range(n):
                c=random.randrange(0,len(alph))
                s+=alph[c]
        return s

def gen_rand_like(s,alph):
        sout=""
        for c in s:
                if c==SPACE.Icon:
                        sout+=c
                else:
                        c=random.randrange(0,len(alph))
                        #if c==0:
                        #        if random.randrange(0,100)>19:
                        #                c=1
                        sout+=alph[c]
        return sout

def gr_freq_pair(gr,alph,target,l=0):
        i=0
        output=[]
        for g in gr:
                xi=f_freq_pair(g,alph,l)
                if xi>target:
                        output.append(i)
                        print("Text:",i,"Xi2_pair=",xi)
                        #output=True
                       
                i+=1
        return output

def gr_freq(gr,alph,target,pr=0):
        i=0
        output=[]
        for g in gr:
                xi=f_freq(g,alph,0)
                if xi>target:
                        if (pr!=0):
                                f_freq(g,alph,pr)
                        output.append(i)
                        print("Text:",i,"Xi2=",xi)
                        #output=True
                       
                i+=1
        return output
def gr_freq_per(gr,alph,target,min_len,pr=0):
        for i in range(len(gr)):
                for l_per in range(1,len(gr[i])//min_len+1):
                        ic_av=0
                        Xi_av=0
                        for k in range(l_per):
                                s=subs(gr[i],k,l_per)
                                xi=f_freq(gr[i],alph,0)
                                Xi_av+=xi
                                if (xi>=target):
                                        print("Text:",i,"Per=",l_per,"shift=",k,"Target=",xi)
                                        if (pr!=0):
                                                f_freq(gr[i],alph,pr)
                        Xi_av/=l_per
                        
                        print("AV, Text:",i,"Per=",l_per,"Xi_av=",Xi_av)
                                
def gr_stat_pr(gr):
        N=0
        for g in gr:
                words=g.split(SPACE.Icon)
                s=""
                st=""
                print("Text:",N)
                for i in range(len(words)):
                        l=len(words[i])
                        nw="_"*l
                        #s+="("+str(l)+")"+words[i]+" "
                        s+=str(l)+" "
                        if l==10 and N==11:
                                #gw=[A.Shift,N.Shift,D.Shift]
                                #dw=f_arr(words[i],list(gw))
                                #nw=runesToEng(dw)
                                #print(words[i])
                                dec_versions(words[i])
                
                        st+=nw
                N+=1
                #print(s)        
def dict_len(n):
        load_dictionary()

        for i in range(len(runes_words)):
                if len(runes_words[i])==n:
                        print(english_words[i])
                        
def gr_set0(gr,rpl):
        tN=0
        gr_out=[]
        for g in gr:
                c=""
                gout=""
                for i in range(len(g)):
                        if c!=SPACE.Icon and c!=" ":
                                c0=c
                        c=g[i]
                        if c==c0:
                                gout+=rpl
                        else:
                                gout+=c
                gr_out.append(gout)
                print("Text:",tN,gout)
                tN+=1
        return gr_out

def gr_get0(gr,tchr=0):
        tN=0
        gr_out=[]
        g_out=""
        Cz=0
        t=0
        last=False
        iFull=0
        iWord=0
        d=dict()
        d2=dict()
        for i in range(29):
            d2[i]=0

        for g in gr:
                c=F.Icon
                gout=""
                iGroup=0                
                for i in range(len(g)):
                        if g[i]!=SPACE.Icon and g[i]!=" ":
                                if last:
                                        #g_out+=ralph[(rune_get(g[i])-rune_get(c))%29]
                                        last=False
                                c0=c
                                t+=1
                                c=g[i]
                                #if c==c0 and (i==len(g)-1 or g[i+1]==SPACE.Icon):
                                #if c==c0 and (i==0 or g[i-1]==SPACE.Icon):
                                wl=g.find(SPACE.Icon,i)
                                if wl==-1:
                                        wl=len(g)-i+iWord
                                        #print("\nQQQQQ",wl)
                                else:
                                        wl+=iWord-i
                                iGroup+=1
                                iFull+=1
                                iWord+=1
                                if (tchr==0 and c==c0) or (c==tchr):
                                        Cz+=1
                                        last=True
                                        if wl>0:
                                                et=runesToEng(g[i-2:i+wl])
                                                print("Text:",tN,"(l=",len(g),")","...",g[i-12:i+12],et,"Pos=",i,"Pos_gr= %d(%d)"%(iGroup,iGroup%29),"Pos_full",iFull,"iWord",iWord,"WL",wl)
                                                d2[(iGroup%29)]+=1
                                            
                                        if wl in d:
                                                if iWord in d[wl]:
                                                        d[wl][iWord]+=1
                                                else:
                                                        d[wl][iWord]=1
                                        else:
                                                d[wl]=dict()
                                                d[wl][iWord]=1
                        else:
                                #c=g[i]
                                iWord=0
                tN+=1
        print("get0 C=",Cz,"from",t,"r=%.2f"%(Cz/t*100))
        for l in d:
                #print("L=",l,d[l])
                ltot=0
                for ll in d[l]:
                     ltot+=d[l][ll]
                sout=""
                sout2=""
                for ll in d[l]:
                        sout+="%d: %d(%.2f%%)\t"%(ll,d[l][ll],d[l][ll]/ltot*100)
                        ex=ltot/l
                        sigmax=sqrt(ltot/l*(1-1/l))
                        sout2+="%d: %.2f\t"%(ll,(d[l][ll]-ex)/sigmax)
                print("L=",l,"\t",sout)
                print("Lst=%d (Ex=%.2f;Sigma=%.2f)"%(l,ex,sigmax),"\t",sout2)
                #print("Text:",tN,gout)
        #print("get0:",g_out)
        print(d2)
        print("")
        return g_out

                        
def gr_words_with(gr,x):
        tN=0
        for g in gr:
                ws=g.split(SPACE.Icon)
                j=0
                for w in ws:
                        if x in w:
                                print("Text:",tN,"Wn=",j,"L=",len(w),w)
                        j+=1
                tN+=1
              
def gr_words_len(gr,l):
        tN=0
        for g in gr:
                ws=g.split(SPACE.Icon)
                j=0
                for w in ws:
                        if len(w)==l:
                                print("Text:",tN,"Wn=",j,"L=",len(w),w)
                                w_t=engToRunes("CIRCUMFERENCE")
                                w_d=f_str(w,w_t,-1)
                                sout=""
                                for c in w_d:
                                        if (rune_get(c)<=9): sout+=" "
                                        sout+=str(rune_get(c))+" "
                                print(sout)
                        j+=1
                                        
                tN+=1

def runes_shifts(s):
        a=[]
        for c in s:
                a.append(rune_get(c))
        return a
def dict_find():
        load_dictionary()
        i=0
        d=dict()
        #ᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖ
        #ᚾᛟᛟᛋᚷᛗᛈᛖᛏᛚᚾᛂ•ᛂ
        for r in runes_words:
                #if len(r)==12 and r[5]==EA.Icon and r[11]==EA.Icon:
                #if len(r)==12 and r[5]==r[11]:
                #if len(r)>=6 :
                if len(r)==12 and (r[5]==r[11]) and (r[5] not in r[:5]+r[6:11]):
                #if len(r)==11 and (r[5]==S.Icon) and (r[5] not in r[:5]+r[6:11]):
                #if len(r)==12 and (r[4]==r[10]) and (r[4] not in r[:4]+r[5:10]+r[11]):
                #if len(r)==12 and (r[1]==r[11]) and (r[1] not in r[:1]+r[2:11]):
                #if len(r)==12 and (r[1]==EA.Icon):
                #if len(r)==8 and (r[3]==EA.Icon):
                #if len(r)==12 and (r[1]==EA.Icon or r[1]==IA.Icon) and (r[11]==EA.Icon or r[11]==IA.Icon):
                #if len(r)==12 and (r[0]==EA.Icon or r[0]==IA.Icon) and (r[10]==EA.Icon or r[10]==IA.Icon):
                #if len(r)==12 and (r[1]==r[7]) and (r[1] not in r[:1]+r[2:7]+r[8:]):
                #if len(r)==12 and (r[0]==r[6]) and (r[0] not in r[1:6]+r[7:]):
                #if len(r)>=5 and r[1]==A.Icon and r[2]==P.Icon:
                        #print(r)
                        #print(r[:5]+r[6:11])
                        c=r[5]
                        if c in d:
                                d[c].append(english_words[i])
                        else:
                                d[c]=[english_words[i]]
                        #print (english_words[i])

                        
                i+=1
        #print(d)
        for d0 in d:
                        print(d0,"-",runelist[rune_get(d0)].English)
                        print(d[d0],"\n")
        print("END D")

def dict_dec():
        load_dictionary(10000)
        i=0
        d=dict()
        for r in runes_words:
                #if len(r)==12 and r[5]==EA.Icon and r[11]==EA.Icon:
                if len(r)==12 and (r[5]==r[11]) and (r[5] not in r[:5]+r[6:11]):
                #if len(r)>=5 and r[1]==A.Icon and r[2]==P.Icon:
                        #print(r)
                        #print(r[:5]+r[6:11])
                        if r[5] in d:
                                d[r[5]].append(english_words[i])
                        else:
                                d[r[5]]=[english_words[i]]
                        print (english_words[i])
                        print (r)
                        #shift= r[5].Shift
                        #28-g
                        ar=[]
                        ar2=[]
                        for rc in r:
                                ar.append((rune_get(rc)-rune_get(r[5]))%29)
                                ar2.append((-rune_get(rc)+rune_get(r[5]))%29)
                        #print(ar)
                        #print(ar2)
                        s1=f_marr("ᛈᛝᚳᚷᛒᚠᚦᛗᛞᚻᛝᚠ",ar)
                        s2=f_marr("ᛈᛝᚳᚷᛒᚠᚦᛗᛞᚻᛝᚠ",ar2) 
                        b1=runes_shifts(s1)
                        b2=runes_shifts(s2)
                        print(b1)
                        print(b2)
                        #ᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖ
                        #ᛈᛝᚳᚷᛒᚠᚦᛗᛞᚻᛝᚠ
                        
                i+=1
        #print(d)
        print("END D")
def f_kasiski(s,l):
        
        for i in range(len(s)-l):
                loc=i
                d=""
                while True:
                      loc=s.find(s[i:i+l],loc+1)
                      if loc==-1: break
                      #d+=str(loc)+" "
                      d+=str(i)+","+str(loc+i)+" :"+str(loc)
                if d!="":
                        print(s[i:i+l],"\t",d)

def gr_kasiski(gr,l):
        N=0
        for g in gr:
                print("Text:",N)
                f_kasiski(g,l)
                N+=1

def f_stat_c(s,c,l=0):
        wl=0
        d=dict()
        N=0
        cfound=0
        for i in range(len(s)):
                if s[i]==SPACE.Icon:
                        wl=0    
                else:
                        if s[i]==c:
                                #print(i)
                                next_sp=s[i-wl:].find(SPACE.Icon)
                                if next_sp==-1: next_sp=len(s[i-wl:])
                                #print(s[i-wl-5:i-wl+15],"Pos=",wl,"L=",next_sp)
                                if l==0 or l==next_sp:
                                        print(s[i-wl-5:i-wl+15],"Pos=",wl,"L=",next_sp)
                                        cfound+=1
                                        if wl in d:
                                                d[wl]+=1
                                        else:
                                                d[wl]=1
                                
                                        if l==0 and (i==len(s) or s[i+1]==SPACE.Icon):
                                                if -1 in d:
                                                        d[-1]+=1
                                                else:
                                                        d[-1]=1
                        N+=1
                        wl+=1
        sd=""
        for di in d:
                d[di]=d[di]/cfound*100
                sd+=str(di)+": %.2f%%"%d[di]+"; "
        print("C=",c,",",runelist[rune_get(c)].English,"(",cfound,", %.2f%%, from %d)"%(cfound/N*100,N),"Dict=",sd)
                     
def gr_stat_c(gr,c,l=0):
        N=0
        for g in gr:
                print("Text:",N)
                f_stat_c(g,c,l)
                N+=1
def dec_word(ew,cw,coeff,shift,lp,lp2=0):
        #enc="ᛝᛝᚳᚷᛒᚠᚦᛗᛞᚻᛝᚠᛡ"
        print("EW:",ew)
        clr=engToRunes(cw)
        cw_s=f_line(clr,coeff,shift)
        print("Clr:",clr)
        print("EW_a:",runesToArr(ew))
        
        a=[]
        for c in cw_s:
                a.append(rune_get(c))
        print("CW_a:",a)
        #print("EW(df)",f_diff(ew))
        ew_s=f_diff(ew[::-1])[::-1][:12]
        print("EW_a_diff",runesToArr(ew_s))
        sm=f_marr(ew_s,a)
        #sm=f_marr(sm,lp2)
        print("lp2",lp2[:12])
        #sm=ew_s
        print("E/C/P",runesToArr(sm))
        b=[]
        for c in sm:
                b.append(rune_get(c))
        #print(b)
        b_pr=[]
        for bi in b:
                prime_b=bi
                cpr=0
                while prime_b not in lp:
                        prime_b=prime_b+29
                        if cpr>1000:
                                print("NF",cpr,bi)
                                break
                        cpr+=1
                b_pr.append(prime_b)
        print(b_pr)
        sout=""
        sr=""
        for bi in b_pr:
        #for bi in b:
                for r in runelist:
                        if bi==29 or bi==0:
                                sout+="_"
                                sr+=F.Icon
                                break
                        elif r.Gematria==bi:
                        #elif r.Shift==bi:
                                sout+=r.English
                                sr+=r.Icon
                                break
                else:
                        print("NF:",bi)
        #print(sout)
        #print(sr)
        #9 to 11,22,....
        #for j in [11,12,14,22,25,27,28]: #0 to 11,12,14,22,25,27,28
        #for (j+9)%29 in [11,12,14,22,25,27,28]: #0 to 11,12,14,22,25,27,28
        for j in range(0):
                sout_s=f_line(sr,1,j)
                #sout_s2=sout_s[:4]+SPACE.Icon+sout_s[5:10]+SPACE.Icon+sout_s[11:]
                print(runesToEng(sout_s[::]).replace(" ","_"))
                sout_s=f_line(sr,-1,j)
                #sout_s2=sout_s[:4]+SPACE.Icon+sout_s[5:10]+SPACE.Icon+sout_s[11:]
                print(runesToEng(sout_s[::]).replace(" ","_"))
        print("")
        return sout
def f_freq_sub(s,alph,a):
    d=dict()
    for i in range(29):
        d[i]=""
    j=0
    for i in range(len(s)):
        #d[(random.randrange(0,len(alph)))%29]+=s[i]
        if s[i] in alph:
            d[(a[j%len(a)])%29]+=s[i]
            #d[j%29]+=s[i]
            j+=1
        if j>=len(a):
            #print(d)
            break
    xi_min=xi_max=f_freq(d[0],alph,0)
    xi_av=0
    
    for i in range(29):
        x=f_freq(d[i],alph,0)
        if x>xi_max: xi_max=x
        if x<xi_min: xi_min=x
        xi_av+=x
        if x>=150:
            print("i=",i)
            f_freq(d[i],alph,1)
    xi_av/=29
    return (xi_av,xi_min,xi_max)

def gr_freq_sub(gr,alph,a):
    for i in range(len(gr)):
        (xi_av,xi_min,xi_max)=f_freq_sub(gr[i],alph,a)
        print("Text:",i,"Aver: %.2f, Max: %.2f, Min: %.2f"%(xi_av,xi_max,xi_min))   
    
def f_freq_submax(s,alph,l):
    # s-str;l-len;
    xi_min=-1
    xi_max=-1
    i_min=-1
    i_max=-1
    for i in range(len(s)-l+1):
        xi=f_freq(s[i:i+l],alph,0)
        if i==0:
            xi_min=xi
            xi_max=xi
            i_min=i
            i_max=i
        elif xi>xi_max:
            xi_max=xi
            i_max=i
        elif xi<xi_min:
            xi_min=xi
            i_min=i
    return (xi_min,i_min,xi_max,i_max)

def gr_freq_submax(gr,alph,l):
    for i in range(len(gr)):
        if len(gr[i])>=l:
            (xi_min,i_min,xi_max,i_max)=f_freq_submax(gr[i],alph,l)
            print("Text:",i,"Max: %.2f (%d)"%(xi_max,i_max),"Min: %.2f (%d)"%(xi_min,i_min))

def oeis(file,n=0):
    a=[]
    f = open(file)
    i=0
    for line in f:
        lar=line.split(" ")
        if (len(lar)!=2):
            break
        aa=int(lar[1])
        a.append(aa)
        i+=1
        if (i==n):
            break
    #print(a)
    return a
def wpr(s):
    sout=""
    sout+=runesToEng(s)+" "
    s1=""
    s2=""
    for c in s:
        s1+=str(runelist[rune_get(c)].Shift)+","
        s2+=str(runelist[rune_get(c)].Gematria)+","
    sout+=s1+" "+s2
    return sout
    
def test2word(s):
    if (len(s)!=3):
        return
    #plain; diff; diff-
    #s/THE s-THE s+THE s*THE; f(s,germ(THE))
    a=[TH.Shift,E.Shift]
    ag=[TH.Gematria,E.Gematria]
    sd=f_diff(s)[:2]
    sd2=(f_diff(s[::-1])[::-1])[:2]
    s=s[:2]
    
    #print("P/S:",wpr(f_marr(s,a)),"P/G:",wpr(f_marr(s,ag)),"P*S:",wpr(f_darr(s,a)),"P*G:",wpr(f_darr(s,ag)))
    #print("P-S:",wpr(f_arr(s,a)),"P-G:",wpr(f_arr(s,ag)),"P+S:",wpr(f_arr(s,a,0,1)),"P+G:",wpr(f_arr(s,ag,0,1)))

    print("D/S:",wpr(f_marr(sd,a)),"D/G:",wpr(f_marr(sd,ag)),"D*S:",wpr(f_darr(sd,a)),"D*G:",wpr(f_darr(sd,ag)))
    #print("D-S:",wpr(f_arr(sd,a)),"D-G:",wpr(f_arr(sd,ag)),"D+S:",wpr(f_arr(sd,a,0,1)),"D+G:",wpr(f_arr(sd,ag,0,1)))

    print("F/S:",wpr(f_marr(sd2,a)),"F/G:",wpr(f_marr(sd2,ag)),"F*S:",wpr(f_darr(sd2,a)),"F*G:",wpr(f_darr(sd2,ag)))
    #print("F-S:",wpr(f_arr(sd2,a)),"F-G:",wpr(f_arr(sd2,ag)),"F+S:",wpr(f_arr(sd2,a,0,1)),"F+G:",wpr(f_arr(sd2,ag,0,1)))
    print("")

def f_the(s,alph,a,b):
    ws=s.split(SPACE.Icon)
    thes=[(a*TH.Shift+b)%29,(a*E.Shift+b)%29]
    s1=""
    s2=""
    sd=""
    #print(s)
    for i in range(len(ws)):
        if len(ws[i])==2:
            ks=f_marr(ws[i],thes,1)
            s1+=ks[0]
            s2+=ks[1]
            sd+=f_diff(ks)[1]
    x1=f_freq(s1,alph,1)
    x2=f_freq(s2,alph,1)
    x3=f_freq(sd,alph,1)
    print("(%d,%d)"%(a,b),"Xi2=(%.2f, %.2f, %.2f)"%(x1,x2,x3))

def gr_1w(gr,alph,a):

    w1=[]
    d=dict()
    #A - 2c - 60%; Cicada-67%
    print("A:",A.Shift,A.Gematria,28-A.Shift,runelist[28-A.Shift].Gematria)
    s=""
    for i in range(len(gr)):
        gr_pos=0
        for j in range(len(gr[i])):
            if (gr[i][j] in alph):
                if (j==0 or gr[i][j-1]==SPACE.Icon) and (j==len(gr[i])-1 or gr[i][j+1]==SPACE.Icon):
                    r=runelist[rune_get(gr[i][j])]
                    v1=(r.Shift+a[gr_pos])%29
                    v2=(r.Shift-a[gr_pos])%29
                    v3=(r.Shift*a[gr_pos])%29
                    v4=(r.Shift*findModInverse(a[gr_pos],29))%29
                    #v5=(findModInverse(r.Shift,29)*a[gr_pos])%29
                    v5=0
                    print("Part:%2d, gr_pos=%5d (%%%2d %4d), S=%2d; G=%4d; A=%5d %2d"%(i,gr_pos,gr_pos%29,len(gr[i]),r.Shift,r.Gematria,a[gr_pos],a[gr_pos]%29),"(+%2d -%2d *%2d /%2d)"%(v1,v2,v3,v4))
                    c=rune_get(gr[i][j])
                    #cc=(c*findModInverse(a[gr_pos+1]*a[gr_pos+1],29))%29
                    cc=(c)%29
                    s+=runelist[cc].Icon
                    sr=str(i)+"-"+str(r.Shift)+" "
                    #sr=str(i)+"-"+str(gr_pos)+" "
                    ind=gr_pos
                    #ind=r.Shift
                    if ind in d:
                        d[ind]+=sr
                    else:
                        d[ind]=sr
                     
                gr_pos+=1
    f_freq(s,alph,1)
    s_d = sorted(d.items(), key=operator.itemgetter(0))
    for (ss) in s_d:
        print(ss[0],ss[1])
    return(s)
        
def load_oeis(maximum_len=0):

    if len(oeis_seq)!=0:
        return
    
    f = open("stripped")
    i=0
    for line in f:
        #if (i%10000==0):
        #    print(i)
        if line[0]!='#':
            nm=line[0:7]
            astr=line[9:-2].split(',')
            ar=[]
            if (len(astr)>2):
                for a in astr:
                    ar.append(int(a))
                oeis_seq[nm]=ar
            i+=1
        #if (i//1000==247):
        #    print(nm)
        if maximum_len!=0 and i>maximum_len:
            return
    
            
def word_oeis(s,len_dic,len_oeis,len_text,o_start=0):
    load_dictionary(len_dic)
    load_oeis(len_oeis)
    smode=dict()
    smode['n']=[]
    smode['d']=[]
    smode['r']=[]
    prev_s=0
    for i in range(len(s)):
        if s[i]==SPACE.Icon:
            fw=0
            smode['n'].append(-1)
            smode['d'].append(-1)
        elif s[i] in ral:
            smode['n'].append(rune_get(s[i]))
            smode['d'].append(runelist[(rune_get(s[i])-prev_s)%29].Shift)
            #if i<len(s)-1:
                #find next for words
                #smode['r'].append(runelist[(rune_get(s[i])-rune_get(s[i+1]))%29].Shift)
            prev_s=rune_get(s[i])
        else:
            print("NOT RUNE",i)
            return
    next_s=0
    for i in range(len(s)):
        cs=s[len(s)-1-i]
        if cs==SPACE.Icon:
            fw=0
            smode['r'].append(-1)
        elif cs in ral:
            smode['r'].append(runelist[(rune_get(cs)-next_s)%29].Shift)
            next_s=rune_get(cs)
    smode['r']=smode['r'][::-1]
    
    #print(smode)
    opos=0
    prc=0
    #for o_ind in range(len(oeis_seq)):
    opos=o_start
    oeis_list=list(oeis_seq.items())
    #for o in oeis_seq:
    for o_ind in range(o_start,len(oeis_list)):
        o=oeis_list[o_ind][0]
        #o=oeis_seq[o_ind]    
        #clr_i=enc_i(a*k_i+b)^-1+c
        #a=1; b=28; c=0
        a=1
        b=0
        c=0
        if len(oeis_seq)>100 and (opos%(len(oeis_seq)//100)==0):
            print("%2d%%"%(prc),"Ind=",opos,"OEIS=",o)
            prc+=1
            
        #print(o)
        for a in [-1,1,28]:
            for b in range(0,29):
                for c in range(0,29):
                    for e in smode:
                        ll=len(smode[e])
                        if ll>len(oeis_seq[o]):
                            break
                        
                        clr_word=""
                        clr_words=[]
                        wordcount=0
                        lettercount=0
                        for i in range(ll+1):
                            if i==ll or smode[e][i]==-1:
                                clr_words.append(clr_word)
                                wordcount+=1
                                clr_word=""
                                if lettercount>=len_text:
                                    break
                            else:
                                inv=findModInverse(a*oeis_seq[o][lettercount]+b,29)
                                #inv=(b*oeis_seq[o][lettercount])%29
                                cw=(smode[e][i]*inv+c)%29
                                clr_word+=runelist[cw].Icon
                                lettercount+=1
                                #if o=="A000040":
                                #print ("CW:",clr_word)
                        #if o=="A000040":
                        #    print ("CW:",clr_words)
                        for w in clr_words:
                            if not w in runes_set or w==w[0]*len(w):
                                break
                        else:
                            st=""
                            for s in clr_words:
                                st+=runesToEng(s)+" "
                            print("FOUND:",st,"OEIS=",o,"Emode=",e,"Param (a=%d,b=%d,c=%d)"%(a,b,c))                            
                            print(oeis_seq[o][0:6])
                                
                        
        opos+=1
        
    #print(english_words[100])
    #print(oeis_seq)
    #for w in runes_word:
        #calc all types of runes
        #s-w s+w s/(w+a)
       # print(w)
        
    #for all words 
    # for al
    
def word_oeis_pow(s,len_dic,len_oeis,len_text,o_start=0):
    load_dictionary(len_dic)
    load_oeis(len_oeis)
    smode=dict()
    smode['n']=[]
    smode['d']=[]
    smode['r']=[]
    prev_s=0
    for i in range(len(s)):
        if s[i]==SPACE.Icon:
            fw=0
            smode['n'].append(-1)
            smode['d'].append(-1)
        elif s[i] in ral:
            smode['n'].append(rune_get(s[i]))
            smode['d'].append(runelist[(rune_get(s[i])-prev_s)%29].Shift)
            #if i<len(s)-1:
                #find next for words
                #smode['r'].append(runelist[(rune_get(s[i])-rune_get(s[i+1]))%29].Shift)
            prev_s=rune_get(s[i])
        else:
            print("NOT RUNE",i)
            return
    next_s=0
    for i in range(len(s)):
        cs=s[len(s)-1-i]
        if cs==SPACE.Icon:
            fw=0
            smode['r'].append(-1)
        elif cs in ral:
            smode['r'].append(runelist[(rune_get(cs)-next_s)%29].Shift)
            next_s=rune_get(cs)
    smode['r']=smode['r'][::-1]
    
    #print(smode)
    opos=0
    prc=0
    #for o_ind in range(len(oeis_seq)):
    opos=o_start
    oeis_list=list(oeis_seq.items())
    #for o in oeis_seq:
    for o_ind in range(o_start,len(oeis_list)):
        o=oeis_list[o_ind][0]
        #enc_i=(a*clr_i+b)^k_i
        #o=oeis_seq[o_ind]    
        #clr_i=(enc_i^(modinv(k_i,28))-b)*modinv(a,29)
        #a=1; b=28; c=0
        a=1
        b=0
        c=0
        if len(oeis_seq)>100 and (opos%(len(oeis_seq)//100)==0):
            print("%2d%%"%(prc),"Ind=",opos,"OEIS=",o)
            prc+=1
            
        #print(o)
        for a in range(1,2):
            for b in range(0,29):
                    for e in smode:
                        ll=len(smode[e])
                        if ll>len(oeis_seq[o]):
                            break
                        
                        clr_word=""
                        #clr_words_ar=[]
                        clr_word_ar=[]
                        clr_word_ar.append("")                        
                        wordcount=0
                        lettercount=0
                        for i in range(ll+1):
                            if i==ll or smode[e][i]==-1:
                                if lettercount>=len_text:
                                    break
                                #clr_words.append(clr_word)
                                for j in range(len(clr_word_ar)):
                                        clr_word_ar[j]+=SPACE.Icon     
                                #wordcount+=1
                                #clr_word=""
                            else:
                                #cw1=mod_pow(smode[e][i],findModInverse(oeis_seq[o][lettercount],28),29)
                                cw1_ar=mod_root(smode[e][i],oeis_seq[o][lettercount],29)
                                if cw1_ar==[]:
                                        break
                                else:
                                        new_words=[]
                                        for cw1 in cw1_ar:
                                                cw=runelist[((cw1-b)*findModInverse(a,29))%29].Icon
                                                for clr_ver in clr_word_ar:
                                                        new_words.append(clr_ver+cw)
                                        clr_word_ar=new_words          
                                #cw=((cw1-b)*findModInverse(a,29))%29
                                #clr_word+=runelist[cw].Icon
                                #if o=="A000040":
                                #        print("e=%d o=%d oinv=%d cw1=%d"%(smode[e][i],oeis_seq[o][lettercount],findModInverse(oeis_seq[o][lettercount],28),cw1))
                                lettercount+=1
                                
                                #print ("CW:",clr_word)
                        #if o=="A000040":
                            #print ("CW:",clr_word_ar)
                        if lettercount>=len_text:
                                for cw in clr_word_ar:
                                        clr_words=cw.split(SPACE.Icon)
                                        for w in clr_words:
                                            if not w in runes_set: #or w==w[0]*len(w):
                                                break
                                        else:
                                            st=""
                                            for s in clr_words:
                                                st+=runesToEng(s)+" "
                                            print("FOUND:",st,"OEIS=",o,"Emode=",e,"Param (a=%d,b=%d)"%(a,b))                            
                                            print(oeis_seq[o][0:6])
        opos+=1

def word_word(s,len_dic,len_text):
    load_dictionary(len_dic)
    smode=dict()
    smode['n']=[]
    smode['d']=[]
    smode['r']=[]
    prev_s=0
    first_word_len=0
    wlen=0
    for i in range(len(s)):
        if s[i]==SPACE.Icon:
            fw=0
            smode['n'].append(-1)
            smode['d'].append(-1)
            if first_word_len==0:
                    first_word_len=wlen
                    
        elif s[i] in ral:
            smode['n'].append(rune_get(s[i]))
            smode['d'].append(runelist[(rune_get(s[i])-prev_s)%29].Shift)
            prev_s=rune_get(s[i])
            wlen+=1
        else:
            print("NOT RUNE",i)
            return
    next_s=0
    
    for i in range(len(s)):
        cs=s[len(s)-1-i]
        if cs==SPACE.Icon:
            fw=0
            smode['r'].append(-1)
        elif cs in ral:
            smode['r'].append(runelist[(rune_get(cs)-next_s)%29].Shift)
            next_s=rune_get(cs)
    smode['r']=smode['r'][::-1]

    
    #print(smode)
    prc=0
    wpos=0
    for i_w in range(len(runes_words)):
        w=runes_words[i_w]

        if len(runes_words)>100 and (i_w%(len(runes_words)//100)==0):
            print("%2d%%"%(prc),"Ind=",i_w,"w=",english_words[i_w])
            prc+=1
        
        if len(w)!=first_word_len:
                continue
        a=1
        b=0
        c=0
        for a in [-1,1,28]:
            for b in range(0,29):
                for c in range(0,29):
                    for e in smode:
                        clr_word=""
                        for i in range(first_word_len):
                            if smode[e][i]==-1:
                                print("ERR:",i_w,i)
                                break
                            else:
                                inv=findModInverse(a*rune_get(w[i])+b,29)
                                cw=(smode[e][i]*inv+c)%29
                                clr_word+=runelist[cw].Icon
                        (di, pr) = is_rune_words(clr_word)
                        if pr>0:
                            print("FOUND -log_2(p)=%2.2f"%(-log(pr,2)),"KEY=",di,"DEC=",english_words[i_w],"Emode=",e,"Param (a=%d,b=%d,c=%d)"%(a,b,c))                            

def word_germ_shift(s,len_dic,len_text):
    load_dictionary(len_dic)
    smode=dict()
    smode['n']=[]
    smode['d']=[]
    smode['r']=[]
    prev_s=0
    first_word_len=0
    wlen=0
    for i in range(len(s)):
        if s[i]==SPACE.Icon:
            fw=0
            smode['n'].append(-1)
            smode['d'].append(-1)
            if first_word_len==0:
                    first_word_len=wlen
                    
        elif s[i] in ral:
            smode['n'].append(rune_get(s[i]))
            smode['d'].append(runelist[(rune_get(s[i])-prev_s)%29].Shift)
            prev_s=rune_get(s[i])
            wlen+=1
        else:
            print("NOT RUNE",i)
            return
    next_s=0
    
    for i in range(len(s)):
        cs=s[len(s)-1-i]
        if cs==SPACE.Icon:
            fw=0
            smode['r'].append(-1)
        elif cs in ral:
            smode['r'].append(runelist[(rune_get(cs)-next_s)%29].Shift)
            next_s=rune_get(cs)
    smode['r']=smode['r'][::-1]

    
    #print(smode)
    #e*=germ((a*c_{i-1}+b)%29)(c*c_i+d)
    #c_i=e*gert()^-1*c^-1 - d*c^-1
    for c0 in range(1,29):
        for a in [1,28]:
            print("C0-a",c0,a)
            for b in range(0,29):
                for c in [1,28]:
                  for d in range(0,29):
                    for e in smode:
                     #for e in ['n']:
                        ll=len(smode[e])
                        
                        clr_word=""
                        clr_words=[]
                        wordcount=0
                        lettercount=0
                        c_prev=-1
                        for i in range(ll+1):
                            if i==ll or smode[e][i]==-1:
                                clr_words.append(clr_word)
                                wordcount+=1
                                clr_word=""
                                if lettercount>=len_text:
                                    break
                            else:
                                if c_prev==-1:
                                        germ=c0
                                else:
                                        germ=runelist[(a*c_prev+b)%29].Gematria
                                #inv=findModInverse(a*oeis_seq[o][lettercount]+b,29)
                                ci=findModInverse(c,29)
                                cw=(smode[e][i]*findModInverse(germ,29)*ci-d*ci)%29
                                #cw=(smode[e][i]*inv+c)%29
                                #print("D c_pr=%d, g=%d, enc=%d, cw=%d"%(c_prev,germ,smode[e][i],cw))
                                clr_word+=runelist[cw].Icon
                                lettercount+=1
                                c_prev=cw
                        #print(runesToEng(clr_words[0]))
                              
                        for w in clr_words:
                            #if not w in runes_set or w==w[0]*len(w):
                            if not w in runes_set:
                                break
                        else:
                            st=""
                            for s in clr_words:
                                st+=runesToEng(s)+" "
                            print("FOUND:",st,"c0=",c0,"Emode=",e,"Param (a=%d,b=%d,c=%d,d=%d)"%(a,b,c,d))
                            #print(oeis_seq[o][0:6])

def word_germ (s,len_dic,len_text,prev_char="ᚠ"):
    load_dictionary(len_dic)
    smode=dict()
    smode['n']=[]
    smode['d']=[]
    smode['r']=[]
    prev_s=rune_get(prev_char[0])
    first_word_len=0
    wlen=0
    for i in range(len(s)):
        if s[i]==SPACE.Icon:
            fw=0
            smode['n'].append(-1)
            smode['d'].append(-1)
            if first_word_len==0:
                    first_word_len=wlen
                    
        elif s[i] in ral:
            smode['n'].append(rune_get(s[i]))
            smode['d'].append(runelist[(rune_get(s[i])-prev_s)%29].Shift)
            prev_s=rune_get(s[i])
            wlen+=1
        else:
            print("NOT RUNE",i)
            return
    next_s=0
    
    for i in range(len(s)):
        cs=s[len(s)-1-i]
        if cs==SPACE.Icon:
            fw=0
            smode['r'].append(-1)
        elif cs in ral:
            smode['r'].append(runelist[(rune_get(cs)-next_s)%29].Shift)
            next_s=rune_get(cs)
    smode['r']=smode['r'][::-1]

    prc=0
    wpos=0
    for i_w in range(len(runes_words)):
        w=runes_words[i_w]

        if len(runes_words)>100 and (i_w%(len(runes_words)//100)==0):
            print("%2d%%"%(prc),"Ind=",i_w,"w=",english_words[i_w])
            prc+=1
        
        if len(w)!=first_word_len:
                continue
        a=1
        b=0
        c=0
        for a in [1,28]:
            for bb in [9, 11, 12, 14, 22, 25, 27, 28]:
            #for bb in [12]:
                b=(-a*bb+9)%29
                for c in [1,28]:
                  for dd in [0, 11, 12, 14, 22, 25, 27, 28]:
                  #for dd in [12]:
                    d=(-c*dd)%29
                    for e in smode:
                        #print("CYCLE",a,b,c,d,e,w,smode[e])
                        clr_word_ar=[]
                        clr_word=""
                        clr_word_ar.append("")
                        for i in range(first_word_len):
                            if smode[e][i]==-1:
                                print("ERR:",i_w,i)
                                break
                            else:
                                #e*=germ((a*k_{i}+b)%29)(c*c_i+d)
                                #c_i=e*germ()^-1*c^-1 - d*c^-1
                                #g=e*(c*c_i+d)^-1
                                #k_i=(g_inv(g)-b)*a^-1
                                inv=findModInverse(c*rune_get(w[i])+d,29)
                                gm=(smode[e][i]*inv)%29
                                #print("\tC",a,b,c,d,e,i,gm)
                                g_var=germ_inv(gm)
                                if g_var==[]:
                                        #print("BR",a,b,c,d,e,i)
                                        break
                                else:
                                        new_words=[]
                                        for g in g_var:
                                                ki=runelist[((g-b)*findModInverse(a,29))%29].Icon
                                                for cw in clr_word_ar:
                                                        new_words.append(cw+ki)
                                        clr_word_ar=new_words
                                        #if english_words[i_w]=="CIRCUMFERENCE":
                                         #       print(clr_word_ar)
                        else:
                                #QQQ
                                for wc in clr_word_ar:
                                        (di, pr) = is_rune_words(wc)
                                        #if english_words[i_w]=="CIRCUMFERENCE":
                                        #        print(pr,di)                                        
                                        if pr>0:
                                            print("FOUND -log_2(p)=%2.2f"%(-log(pr,2)),"KEY=",di,"DEC=",english_words[i_w],"Emode=",e,"Param (a=%d,b=%d,c=%d,d=%d)"%(a,b,c,d))  

def word_germ2 (s,len_dic,len_text,prev_char="ᚠ"):
    load_dictionary(len_dic)
    smode=dict()
    smode['n']=[]
    smode['d']=[]
    smode['r']=[]
    prev_s=rune_get(prev_char[0])
    first_word_len=0
    wlen=0
    for i in range(len(s)):
        if s[i]==SPACE.Icon:
            fw=0
            smode['n'].append(-1)
            smode['d'].append(-1)
            if first_word_len==0:
                    first_word_len=wlen
                    
        elif s[i] in ral:
            smode['n'].append(rune_get(s[i]))
            smode['d'].append(runelist[(rune_get(s[i])-prev_s)%29].Shift)
            prev_s=rune_get(s[i])
            wlen+=1
        else:
            print("NOT RUNE",i)
            return
    next_s=0
    
    for i in range(len(s)):
        cs=s[len(s)-1-i]
        if cs==SPACE.Icon:
            fw=0
            smode['r'].append(-1)
        elif cs in ral:
            smode['r'].append(runelist[(rune_get(cs)-next_s)%29].Shift)
            next_s=rune_get(cs)
    smode['r']=smode['r'][::-1]

    prc=0
    wpos=0
    for i_w in range(len(runes_words)):
        w=runes_words[i_w]

        if len(runes_words)>100 and (i_w%(len(runes_words)//100)==0):
            print("%2d%%"%(prc),"Ind=",i_w,"w=",english_words[i_w])
            prc+=1
        
        if len(w)!=first_word_len:
                continue
        a=1
        b=0
        c=0
        for a in [1,28]:
            for b in range(29):
            #for bb in [12]:
                #b=(-a*bb+9)%29
              for f in [1,28]:
                for g in range(29):
                  #for dd in [0, 11, 12, 14, 22, 25, 27, 28]:
                  for d in range(29):
                  #for dd in [12]:
                  #  d=(-c*dd)%29
                    for e in smode:
                        #print("CYCLE",a,b,c,d,e,w,smode[e])
                        clr_word_ar=[]
                        clr_word=""
                        clr_word_ar.append("")
                        for i in range(first_word_len):
                            if smode[e][i]==-1:
                                print("ERR:",i_w,i)
                                break
                            else:
                                #e*=a*(germ(f*k_{i}+g)+b))(c_i+d)
                                #germ(f*k_{i}+g)+b=e*((c_i+d))^-1*a^-1
                                #k_i=(g_inv(g)-b)*a^-1
                                inv=findModInverse(rune_get(w[i])+d,29)
                                gm=(smode[e][i]*inv*findModInverse(a,29)-b)%29
                                #
                                #print("\tC",a,b,c,d,e,i,gm)
                                g_var=germ_inv(gm)
                                if g_var==[]:
                                        #print("BR",a,b,c,d,e,i)
                                        break
                                else:
                                        new_words=[]
                                        for gi in g_var:
                                                ki=runelist[((gi-g)*findModInverse(f,29))%29].Icon
                                                for cw in clr_word_ar:
                                                        new_words.append(cw+ki)
                                        clr_word_ar=new_words
                                        #if english_words[i_w]=="CIRCUMFERENCE":
                                         #       print(clr_word_ar)
                        else:
                                #QQQ
                                for wc in clr_word_ar:
                                        (di, pr) = is_rune_words(wc)
                                        #if english_words[i_w]=="CIRCUMFERENCE":
                                        #        print(pr,di)                                        
                                        if pr>0:
                                            print("FOUND -log_2(p)=%2.2f"%(-log(pr,2)),"KEY=",di,"DEC=",english_words[i_w],"Emode=",e,"Param (a=%d,b=%d,c=%d,d=%d)"%(a,b,c,d))  
    
def word_germ_pow (s,len_dic,len_text,prev_char="ᚠ"):
    load_dictionary(len_dic)
    smode=dict()
    smode['n']=[]
    smode['d']=[]
    smode['r']=[]
    prev_s=rune_get(prev_char[0])
    first_word_len=0
    wlen=0
    for i in range(len(s)):
        if s[i]==SPACE.Icon:
            fw=0
            smode['n'].append(-1)
            smode['d'].append(-1)
            if first_word_len==0:
                    first_word_len=wlen
                    
        elif s[i] in ral:
            smode['n'].append(rune_get(s[i]))
            smode['d'].append(runelist[(rune_get(s[i])-prev_s)%29].Shift)
            prev_s=rune_get(s[i])
            wlen+=1
        else:
            print("NOT RUNE",i)
            return
    next_s=0
    
    for i in range(len(s)):
        cs=s[len(s)-1-i]
        if cs==SPACE.Icon:
            fw=0
            smode['r'].append(-1)
        elif cs in ral:
            smode['r'].append(runelist[(rune_get(cs)-next_s)%29].Shift)
            next_s=rune_get(cs)
    smode['r']=smode['r'][::-1]

    prc=0
    wpos=0
    for i_w in range(len(runes_words)):
        w=runes_words[i_w]

        if len(runes_words)>100 and (i_w%(len(runes_words)//100)==0):
            print("%2d%%"%(prc),"Ind=",i_w,"w=",english_words[i_w])
            prc+=1
        
        if len(w)!=first_word_len:
                continue
        a=1
        b=0
        c=0
        for a in [1,28]:
            for b in range(29):
            #for bb in [12]:
                #b=(-a*bb+9)%29
              for c in [1,28]:
                for d in range(29):
                    for e in smode:
                        #print("CYCLE",a,b,c,d,e,w,smode[e])
                        clr_word_ar=[]
                        clr_word=""
                        clr_word_ar.append("")
                        for i in range(first_word_len):
                            if smode[e][i]==-1:
                                print("ERR:",i_w,i)
                                break
                            else:
                                #e*=(a*c_i+b)^(Germ(c*key_i+d)
                                #germ(c*key_i+d)=dlog(e*,(a*c_i+b))
                                #k_i=(g_log_inv(g)-b)*a^-1
                                #inv=findModInverse(rune_get(w[i])+d,29)
                                #gm=(smode[e][i]*inv*findModInverse(a,29)-b)%29
                                #
                                #print("\tC",a,b,c,d,e,i,gm)
                                #g_var=germ_inv(gm)
                                g_var=mod_log_germ(smode[e][i],(a*rune_get(w[i])+b)%29,29)
                                #print("ML:",e,smode[e][i],(a*rune_get(w[i])+b)%29,g_var)
                                if g_var==[]:
                                        #print("BR",a,b,c,d,e,i)
                                        break
                                else:
                                        new_words=[]
                                        for gi in g_var:
                                                ki=runelist[((gi-d)*findModInverse(c,29))%29].Icon
                                                for cw in clr_word_ar:
                                                        new_words.append(cw+ki)
                                        clr_word_ar=new_words
                                        #if english_words[i_w]=="CIRCUMFERENCE":
                                         #       print(clr_word_ar)
                        else:
                                #QQQ
                                for wc in clr_word_ar:
                                        (di, pr) = is_rune_words(wc)
                                        #if english_words[i_w]=="CIRCUMFERENCE":
                                        #        print(pr,di)                                        
                                        if pr>0:
                                            print("FOUND -log_2(p)=%2.2f"%(-log(pr,2)),"KEY=",di,"DEC=",english_words[i_w],"Emode=",e,"Param (a=%d,b=%d,c=%d,d=%d)"%(a,b,c,d))  
                            
def text_count_words(s,spc):
        w1f=0
        w1a=0
        w1l=0
        w2f=0
        w2a=0
        w2l=0
        words=0
        for sent in s.split("."):
                s2=sent
                while len(s2)>1 and s2[0]==spc:
                        s2=s2[1:]
                #if s2[0]==spc:
                #        print("spc:",s2,"s2[0]:",s2[0],";")
                #print("(%s)"%(s2))
                ws=s2.split(spc)
                for i in range(len(ws)):
                        l=len(ws[i])
                        #print(l)
                        words+=1
                        if i==len(ws)-1 and l==1:
                                w1l+=1
                                #print("W1l:",ws[i])
                        if i==len(ws)-1 and l==2:
                                w2l+=1
                                #print("W2L:",ws[i])
                        if i==0 and l==1:
                                w1f+=1
                                #print("W1f:",ws[i])
                        if i==0 and l==2:
                                w2f+=1
                                #print("W2f:",ws[i])
                        if l==1:
                                w1a+=1
                        if l==2:
                                w2a+=1
                                
        print("1 len words:%d:%.2f%% (First:%.2f%%, Last:%.2f%%)"%(words,w1a/words*100,w1f/w1a*100,w1l/w1a*100))
        print("2 len words:%d:%.2f%% (First:%.2f%%, Last:%.2f%%)"%(words,w2a/words*100,w2f/w2a*100,w2l/w2a*100))
def germ_inv(c):
        a={0: [9], 1: [16], 2: [0, 10, 23], 3: [1, 17], 4: [], 5: [2], 6: [], 7: [3], 8: [11], 9: [18], 10: [24], 11: [4], 12: [12], 13: [5, 19], 14: [13, 25], 15: [20], 16: [26], 17: [6], 18: [14], 19: [7], 20: [27], 21: [21], 22: [28], 23: [8], 24: [15], 25: [22], 26: [], 27: [], 28: []}
        return a[c%29]
        
def gen_germ_shift(s,c0,a,b,c,d):
        #e*=germ((a*c_{i-1}+b)%29)(c*c_i+d)
        #print("E s=",s,"c0=%d, a=%d, b=%d, c=%d, d=%d"%(c0,a,b,c,d))
        sout=""
        c_pr=-1
        for sc in s:
                if sc==SPACE.Icon:
                        sout+=SPACE.Icon
                else:
                        if c_pr==-1:
                                g=c0
                        else:
                                g=runelist[(a*c_pr+b)%29].Gematria    
                        sw=g*(c*rune_get(sc)+d)%29
                        sout+=runelist[sw].Icon
                        #print("E c_pr=%d, g=%d, sc=%d, enc=%d"%(c_pr,g,rune_get(sc),sw))
                        c_pr=rune_get(sc)
        return sout

def test_shift (s,len_dic,len_text,prev_char="ᚠ"):
    load_dictionary(len_dic)
    smode=dict()
    smode['n']=[]
    smode['d']=[]
    smode['r']=[]
    prev_s=rune_get(prev_char[0])
    first_word_len=0
    wlen=0
    for i in range(len(s)):
        if s[i]==SPACE.Icon:
            fw=0
            smode['n'].append(-1)
            smode['d'].append(-1)
            if first_word_len==0:
                    first_word_len=wlen
                    
        elif s[i] in ral:
            smode['n'].append(rune_get(s[i]))
            smode['d'].append(runelist[(rune_get(s[i])-prev_s)%29].Shift)
            prev_s=rune_get(s[i])
            wlen+=1
        else:
            print("NOT RUNE",i)
            return
    next_s=0
    
    for i in range(len(s)):
        cs=s[len(s)-1-i]
        if cs==SPACE.Icon:
            fw=0
            smode['r'].append(-1)
        elif cs in ral:
            smode['r'].append(runelist[(rune_get(cs)-next_s)%29].Shift)
            next_s=rune_get(cs)
    smode['r']=smode['r'][::-1]

    for a in range(29):
      for b in [1,28]:
        for e in smode:
                        ll=len(smode[e])
                        clr_word=""
                        #clr_words_ar=[]
                        wordcount=0
                        lettercount=0
                        for i in range(ll+1):
                            if i==ll or smode[e][i]==-1:
                                if lettercount>=len_text:
                                    break
                                #clr_words.append(clr_word)

                                clr_word+=SPACE.Icon     
                                #wordcount+=1
                                #clr_word=""
                            else:
                                #cw1=mod_pow(smode[e][i],findModInverse(oeis_seq[o][lettercount],28),29)
                                #cw1_ar=mod_root(smode[e][i],oeis_seq[o][lettercount],29)
                                # e= b*c+a
                                # c=(e-a)*b^-1
                                cw1=(smode[e][i]-a)*findModInverse(b,29)
                                clr_word+=runelist[cw1%29].Icon
                                lettercount+=1
                                
                        if lettercount>=len_text:
                                clr_words=clr_word.split(SPACE.Icon)
                                for w in clr_words:
                                        if not w in runes_set: #or w==w[0]*len(w):
                                                break
                                        else:
                                            st=""
                                            for s in clr_words:
                                                st+=runesToEng(s)+" "
                                            print("FOUND:",st,"Emode=",e,"Param (a=%d,b=%d)"%(a,b))                            
                
        
lowPrimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
lowPrimes_n29 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]

polpr = [2,3,5,7,11,101,131,151,181,191,313,353,373,383,727,757,787,797,919,929,10301,10501,10601,11311,11411,12421,12721,12821,13331,13831,13931,14341,14741,15451,15551,16061,16361,16561,16661,17471,17971,18181]

lp_m = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 1, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
lp_m2 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 1, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]

msq1 =[434, 1311, 312, 278, 966,204, 812, 934, 280, 1071, 626, 620, 809, 620, 626, 1071, 280, 934, 812, 204, 966, 278, 312, 1311, 434,434, 1311, 312, 278, 966,204, 812, 934, 280, 1071, 626, 620, 809, 620, 626, 1071, 280, 934, 812, 204, 966, 278, 312, 1311, 434,434, 1311, 312, 278, 966,204, 812, 934, 280, 1071, 626, 620, 809, 620, 626, 1071, 280, 934, 812, 204, 966, 278, 312, 1311, 434]

#sys.setrecursionlimit(10000)
#print(gen_primes(1000))

curtext = []

#lstat_diff("ab ca bd ")
#print("Eng:",stat_diff(EngEx))
#print("Eng2:",lstat_diff(EngEx2))

runesTemplate=engToRunes(cicadaText.replace("\n"," "))

lp=gen_primes(4000)
#print(lp)
fib=gen_fib(4000)
#print(fib)
lp1=[]
l0=0
i=0
for l in lp:
        #if i>0 and i%56==0:
        #    lp1.append(0)
        if i%29==55:
            c=2
        else:
            lp1.append(l)
        l0=l
        i+=1
#print(lp1)

#eng_pg=engToRunes(open("pg98.txt").read().upper()).replace(SPACE.Icon,"")
#eng_pg=engToRunes(open("pg98.txt").read().upper().replace("\n"," "))

#text_count_words(engToRunes_st(open("pg98.txt").read().upper().replace("\n"," "),True),SPACE.Icon)
#text_count_words(open("pg98.txt").read().upper().replace("\n"," ").replace("\"","")," ")
#text_count_words(engToRunes_st("A book is not. The start of last x.",True))
        
rt=runesTemplate.replace(SPACE.Icon,"")
rt_diff=f_diff(rt)
#eng_pg_diff=f_diff(eng_pg)

pArr=check_runes(Pall)

Pgr=check_runes(Ptypes) #no spaces
Pgr2=check_runes(Ptypes[::],sp=True)

Pst="".join(check_runes(Ptypes,sp=True)[0:14])
Pst0="".join(check_runes(Ptypes)[0:14])

pa=Pgr2
#print("Totally parts:",len(Pgr2))
Larr=""
i=0
ralph=""
d=dict()
for r in runelist:
        ralph+=r.Icon
        dd=(r.Gematria-1)%29
        #if dd==0: print(r.English)
        if dd in d:
                d[dd]+=1
        else:
                d[dd]=1
#print(d)

#f_freq2(Pst,eng_pg,ralph,1)

#f_freq(Pgr2[14],ralph,1)
#pa=gr_arr(Pgr2,lp_m,True)
#print(runesToEng(pa[14]))
#pa=gr_par(pa,0,0,-1,1)


#print(len(Pst0))
#p00=f_diff(Pst0)
#f_freq(p00,ralph,1)
#f_freq(rt_diff,ralph,1)
#f_freq(eng_pg_diff,ralph,1)

#f_freq_pair(runesTemplate,ralph,10)


#gr_stat_pr(Pgr2)
#f_freq(runesTemplate,ralph,1)
#f_freq(f_diff(runesTemplate,1),ralph,1)
#f_freq(eng_pg,ralph,1)
#gr_get0([runesTemplate])
#gr_get0([cicadaText.replace("\n"," ").replace(" ",SPACE.Icon)])
        
#gr_stat_c(gr_diff(Pgr2[0:15],1),F.Icon)
#for i in range(len(Pgr)):
#        print("i=",i,"L=",len(Pgr[i]))
        
#vig_attack(["abcdabcdabcde"],3,0)
#f_stat_c(runesTemplate,TH.Icon)

pag=Pgr2

pa=pag[:14]
#print(pa[9])
#print(runesToEng(pa[9]))
pa=gr_diff(pa,1)
a2=[ 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 1, 2, 1, 2, 1, 3, 2, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 2, 3, 2, 1, 2, 1, 3, 2]
#pfac(100)
#a2=[]
#for i in range(5000):
#        a2.append(pfac(i+2))
        #print(i+2,"-",a2[i],pfac(i+2))
es1=[2,18]
es2=[24,9]
es1s=[28-2,28-18]
es2s=[28-24,28-9]
es1g=[5,67]
es2g=[97,29]

#pa=gr_diff(pa,1)
#pa=gr_arr(pa,es1s,1)

#pa=gr_par(pa,0,0,-1,1)
#f_freq(pa[9],ralph,1)
#print(runesToEng(pa[9]))
        
#pa=gr_arr(pa,a2,True)
#pa=gr_arr(pa,lp,True)


#pa=dd
#gr_freq(pa,ralph,0,1)
#for p in pa:
#        print(runesToEng(p))

i=0

s1=""
s2=""
s3=""
sl=""
st1=""
pag=[]
Pbg=[]
pl=""
for p in Pgr2[:14:]:
#for p in dd:
        pag.append(p[::-1])
        #print("Part:",i,"Len:",len(p))
        #print(p)
        if len(p)>0:
            Pbg.append(p)
        #if i==8:
          #  print(p[:280])
        for w in p.split(SPACE.Icon):
                if len(w)==1:
                        st1+=w[0]
                if len(w)>=1:
                        s1+=w[0]
                        sl+=w[len(w)-1]
                if (len(w)>=2):
                        s2+=w[1]
                if (len(w)>=3):
                        s3+=w[2]
                if (len(w)!=0):
                  #pl+=runelist[len(w)].Icon
                  pl+=str(len(w))+" "
        pl+="\n\n"        
                #if len(w)>=12:
                        #print("Part=",i+1,"Length=",len(w),"Word:",w)
                        #sfl+=w[2]
        i+=1
te=f_darr(runesTemplate[:3650],lp[:],1)

#print(pl)
#f_kasiski(pl,7)
#te=runesTemplate[:3650]
#Pbg.append(te)
#Pbg.append(runesTemplate[:3650])
#print(s1)
#s1=f_diff(s1)
#f_freq(s1,ralph,1)
#f_freq(s2,ralph,1)
#f_freq(s3,ralph,1)
#f_freq(sl,ralph,1)
#a=oeis("b000043.txt")
a=lp[:]
Pbg_d=gr_diff(Pbg,1)
pag=gr_diff(pag,1)
#gr_get0(Pbg_d,F.Icon)
#gr_get0(Pbg)
#gr_freq(gr_marr(Pbg_d,a,1),ralph,0,1)
#gr_freq(Pbg_d,ralph,0,1)
#Pbg_d=gr_marr(Pbg_d,lp1,1)
rtp=f_line(rt,1,0)
lprev=[]
for l in lp:
        lprev.append(findModInverse(l,28))
rtp=f_pow(rtp,lp,0)
rtp=f_pow(rtp,lprev,0)
#rtp=f_sum(rtp)
#f_freq(rtp,ralph,1)

p3=gr_pow(Pbg_d,lprev,1)

#gr_freq(p3,ralph,0,1)

for eps in range(29):
    for j in range(1,29):
        for i in range(29):
                d[i]=[]
        for r in runelist:
                d[((r.Gematria+eps)*j)%29].append(r.Shift)
        sout=""
        #for i in range(29):
        #if d[0]==[] and d[18]==[] and d[23]==[]:
                        #sout+=str(i)+" "
                #print("esp=",eps,"j=",j,"zeros:",d)

#print(germ_rev(28))

#test2word("ᛞᛇᛉ")
Pbg_d2=[]
for p in pag: Pbg_d2.append(p[::-1])


st1=""
st2=""
for p in Pbg_d[:14]:
        for w in p.split(SPACE.Icon):
                if len(w)==1:
                        st1+=w[0]
                if len(w)>=6:
                        st2+=w[2]

#f_freq(st1,ralph,1)
#f_freq(st2[77:77+83],ralph,1)
#get1w gam
#rr=eng_pg.replace(SPACE.Icon,"")
##rr=rt
#w1=gr_1w(Pbg_d,ralph,lp)
#f_freq2(Pbg_d[8],"",ralph,1)
#gr_1w(Pbg_d,ralph,lp)
#print(Pbg_d2[13])
pp="".join(Pbg)
#print(pp)
#f_kasiski(pp,7)

#f_freq(Pbg[9],ralph,1)
#e* =  (Germ(aa*key+bb)*cc+dd)*ff
#Xi2m=10000
#for aa in [1]:
#  for bb in range(29):
#    rr=f_line(rt,aa,bb)
#    for cc in [1]:
#      for dd in range(29):
#        print(bb,dd,Xi2m)
#        g_ar=runesGermToArr(rr,cc,dd)
#        g_en=f_arr(F.Icon*len(g_ar),g_ar,0,1)
 #       for ff in range(29):
#                  g_en2=f_line(g_en,ff,0)
#                  Xi2=f_freq2(w1,g_en2,ralph,0)
#                  if Xi2<Xi2m:
#                          Xi2m=Xi2
#                          par=(aa,bb,cc,dd,ff,Xi2m)
#                          print(par)
#                           f_freq2(w1,g_en2,ralph,1)
#print(par)

#f_freq(g_en,ralph,1)
#f_freq(w1,ralph,1)

#f_freq2(w1,g_en,ralph,1)

#print(Pbg[4])
#print("XXXX 6")
#gr_1w(Pbg_d,ralph,lp)
#print("XXXX 8")
#gr_1w(Pbg_d2[8:9],ralph,lp)
#print("XXXX 12")
#gr_1w(Pbg_d2[12:13],ralph,lp)

#un=engToRunes("SECOND ONE KARAMBA")
#un=engToRunes( "CIRCUMFERENCE ONE")
un=engToRunes( "TWO ONE")
kr=engToRunes("THEENDSTORYONLYBEGINS")
#print("TXT:",un)
#print("KEY:",kr)
kr=f_line(kr,1,0)
#print(un)
un=f_line(un,1,3,True)
#print(un)
#un=f_darr(un,runesGermToArr(kr,1,23),1)
#un=f_pow(un,runesGermToArr(kr),1)
#print("ENC:",un)


#print("U0:",un)
#un=engToRunes(" UNIVE  RSI TY   ")
#un=engToRunes("SECOND ONE KARAMBA")
#un=gen_germ_shift(un,1,1,26,1,0)
#print(un)
un=f_sum(un)

test_shift("ᛞᛂᚢ•ᛒᛖᛁ",10000,6,"ᚫ")

#word_germ2(un,26600,13)
#word_germ_pow(un,26600,13,"ᚠ")
#word_germ_shift(un,10000,9)
#un=f_darr(un,lp,1)
#print("UL:",un)
#un=f_sum(un)
#un=f_sum(un[::-1])[::-1]
#print(ud1)
#ud1=f_diff_line(un0,-1,1,0)
#ud2=f_diff(ud1,1)
#print(ud2)
#print(un)
#print(f_diff(un[::-1],1)[::-1])
#word_oeis(un,2000,110)

#word_oeis_pow(un,150000,10000,9,0)
#"ᛋᚻᛖᚩᚷᛗᛡᚠ"
#word_oeis_pow("ᛗᛈᚣ•ᛚᛋᚩᚪᚫᚻᛚᛖᛇᛁᛗᛚ•ᛚᛋᚳᛈ",300000,10000,15,0)
#word_oeis_pow("ᛞᛇ•ᛉᚳᚠᛁᚪᚹᚻᚷ•ᛇᛟ",150000,1000,10,0)
#word_oeis_pow("ᛝᚦᛇ•ᛁᚠᚳᛟᛇ•ᛞᚹᚣᛡᚣᚢ•ᚣᚾᚦᚱᛖ",150000,10000,14,0)
#word_oeis_pow("ᛡᚳᛋ•ᛈᛞᛋᛡ•ᚪᚹᛏᚳᚹᛟ•ᛗᚹᛁᛒᛞ•ᚷ",150000,10000,18,100)
#word_oeis_pow("ᚠᚾᛗ•ᚣᚷᛞᚫᚻ•ᚪᛈᛉᚣᚻ•ᛇᛠᚩᛖ",150000,10000,13,0)
#word_oeis_pow("ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ•ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪ",150000,10000,9,0)
#ᛚᛂ•ᛇᚻᛝᚳᚦᛏᚫᛂᛏᛉᚻ•ᛏᚢᛟ•ᛋᛈᚱᚷ
#ᛈᛞᚦ•ᛇᛞᛇ•ᚫᛚᚳ•ᛡᛇ•ᛠᚻ•ᚹᛗᚣᚦ
#ᚪᛏᛉᛒ•ᛗ•ᚷᛡᛋᛒ•ᛉᛇ•ᚷᚾᛠᚫᚷᛝᛞ•
#ᛉᛁᛉᛗ•ᚢᛉᛗᚳᚦᛈᚩᛒ•ᛡᚾᛏ•ᛠᛉ
#ᚠᚢᛚᛗ•ᚪᛠᚣᛟᚪ•
#ᛚᚢᛝᚾ•ᚳᚢ•ᛒᚾᛏᚠᛝ•ᛁᚢᛁᚢ•ᛟᚫᛂᚠᚫ•ᚢ
#ᚢᚪ•ᚹᛝᚷᛉᛞᚷ•ᛁᛒᛁ•ᛇᛏᛒᛁᚣ•ᛠᚷᛋᚫ
#word_oeis_pow("ᛋᚻᛖᚩᚷᛗᛡᚠ•ᛋᚣᛖᛝᚳ•ᚦᛂᚷᚫ•ᚠᛂᛟ•",150000,0,13,0)
#word_oeis_pow(un,150000,10000,9,0)
#word_oeis(un,500000,50,9)
#word_germ_pow("ᛋᚻᛖᚩᚷᛗᛡᚠ•ᛋᚣᛖᛝᚳ•ᚦᛂᚷᚫ•ᚠᛂᛟ•",15000,8,"ᚠ")

#word_word(un,15000,10)
#load_dictionary(1000)
#(d,c)=is_rune_words(engToRunes("SECONDONETEST"))
#if c>0: print(d)
#word_germ_shift("ᛋᚻᛖᚩᚷᛗᛡᚠ•ᛋᚣᛖᛝᚳ•ᚦᛂᚷᚫ•ᚠᛂᛟ•",0,8)
#word_germ2("ᛋᚻᛖᚩᚷᛗᛡᚠ•ᛋᚣᛖᛝᚳ•ᚦᛂᚷᚫ•ᚠᛂᛟ•",15000,8,"ᚠ")

#word_germ_pow("ᛡᚫᚦᚹᚻᛈᛇᚪᚷᛈᚻᛠ•ᚳᛚᛠᛈ",0,12,"ᛟ")
#word_germ_pow("ᛇᛈᛋᚢᛚᚪᛈᚢᚳᛖᚠᛞᛉ•ᚦᛠᛇᛝᚻ•ᚣᚱᛗ",50000,13,"ᚹ")
#word_germ_pow("ᛒᚷᛞᛉᛗᛒᛉᚳᛝᚦᚣᛞᚫᛠ•ᛋᛏᛗᛏᚻᚹ",50000,14,"ᚱ")
#word_germ_pow("ᛠᛁᛡᚦᛝᚾᛖᚾᚠᚩᛗᛖᚣᚪ•ᚳᛖᚳᚹᚪᚫᚹ",0,14,"ᚠ")
#word_germ_pow("ᛈᚳᛇᚢᛏᚳᛡᛇᛝᚾᚢᚻᚦ•ᚣᚠᛗᚾ",50000,13,"ᛝ")
#word_germ_pow("ᛖᛞᚪᚫᛏᚩᛠᛖᛠᛉᚳᛠᛏ•ᚩᛞᚳᛠᚾᚳᚦ",50000,13,"ᛈ")
#word_germ("ᛏᚱᛟᚷᛠᚾᚫᛒᚢᛖᛒᚢ•ᚦᚠᛟ•ᚷᛋᛟ",50000,12,"ᚳ")

#word_germ2("ᛒᚷᛞᛉᛗᛒᛉᚳᛝᚦᚣᛞᚫᛠ•ᛋᛏᛗᛏᚻᚹ",50000,14)
#word_germ_shift("ᛗᛈᚣ•ᛚᛋᚩᚪᚫᚻᛚᛖᛇᛁᛗᛚ•ᛚᛋᚳᛈ",0,15)
#word_germ_shift("ᛞᛇ•ᛉᚳᚠᛁᚪᚹᚻᚷ•ᛇᛟ",0,10)
#word_germ_shift("ᛝᚦᛇ•ᛁᚠᚳᛟᛇ•ᛞᚹᚣᛡᚣᚢ•ᚣᚾᚦᚱᛖ",0,14)
#word_germ_shift("ᛡᚳᛋ•ᛈᛞᛋᛡ•ᚪᚹᛏᚳᚹᛟ•ᛗᚹᛁᛒᛞ•ᚷ",0,18)
#word_germ_shift("ᚠᚾᛗ•ᚣᚷᛞᚫᚻ•ᚪᛈᛉᚣᚻ•ᛇᛠᚩᛖ",0,13)
#word_germ_shift("ᚪ•ᛗᛝᛞᛡᚦᛉᛁᛗ•ᛡᛞᛈᛝᚢᚹᚪᛗ•ᛏᚪ",0,9)
#print(ralph)
#gr_1w([eng_pg],ralph,lp)
#print(runesTemplate,)
#gr_freq(Pbg_d,ralph,0,1)

#gr_freq_sub(Pbg,ralph,a)
#print("")
#gr_freq_sub(Pbg_d,ralph,a)
#print("")
#gr_freq_sub(Pbg_d2,ralph,a)

#print("")
#gr_freq_sub(Pbg_d[12:13],ralph,a)


#print(sfl)
#sfl=f_diff(sfl)
#f_freq(sfl,ralph,1)
pag=gr_diff(pag,1)

pag2=[]
for p in pag:
    pag2.append(p[::-1])    

p="".join(Pbg_d)
pd="".join(pag2)

#for j in range(29):
    #f_the(pd,ralph,1,0)
#f_the(p,ralph,1,10)
#pa=gr_marr(gr_diff(Pgr2[:14:],1),lp[:],1)
#pa=gr_marr(pag2,lp[:],1)
#pa=pag2
pa=gr_diff(Pgr2[:14:],1)
#pa=Pgr2[:14:]
#pa=gr_par(pa,0,0,2,1)
#gr_freq(pa,ralph,0,0)
#print("lp")
#gr_freq_sub(pa,ralph,lp)
#print("lp 1")
#gr_freq_sub(pa,ralph,lp[2:])
#gr_freq_sub(Pgr2[14:15],ralph,lp)
#gr_freq_sub(pa,ralph,lp_m)
#print("fib")
#gr_freq_sub(pa,ralph,fib)
#dd=gr_arr(Pgr2[14:15],lp_m,1)
#print(runesToEng(dd[0]))
#f_freq(dd[0],ralph,1)

#print(pag2[8].replace(SPACE.Icon,"")[79:108])
#print(runesToArr(pag2[8].replace(SPACE.Icon,"")[79:108]))
#print(lp[79:108])
#print(runesToArr(pa[8].replace(SPACE.Icon,"")[79:108]))
#print(runesToEng(pa[8].replace(SPACE.Icon,"")[79:108]))
#print(runesToArr(pa[8][78:]))
#gr_get0(pag2,F.Icon)
    
#gr_get0(Pgr2[:14])

#gr_get0(gr_diff(Pgr2[0:15],1),F.Icon)
#for r in [IA,EA]:
        #print(r.English)
        #gr_get0([runesTemplate],r.Icon)
        #gr_get0([eng_pg],r.Icon)

#PgrX=gr_set0(Pgr2,"_")
#gr_words_with(PgrX,"_")
#dict_find()
        
#pag=gr_diff(pag,True)

#pds=gr_diff(pag2,True)
#print(pds[8])
#gr_stat_c(pds,F.Icon)
#gr_get0(pds[:15])
#gr_freq_pair(pag,ralph,0,10)
#pds=pag
#ar=[272,	138,	341,	131,	151,366,	199,	130,	320,	18,226,	245,	91,	245,226,18	,320	,130	,199	,366,151	,131	,341,	138	,272]
ar=[434	,1311	,312	,278	,966,204	,812	,934	,280	,1071,626	,620	,809	,620	,626,1071	,280	,934	,812	,204,966	,278,	312	,1311,	434]
aar=[]
for i in range(4000):
        aar.append(ar[i%len(ar)])
        
pds=gr_marr(pag,aar,1)

#gr_freq(pds,ralph,0,1)
#st=pds[8]
for j in range(0):
        # av=0
        #for sh in range(j):
        #    av+=f_freq(subs(st,sh,j),ralph,1)
        #av/=j
        #print("Per:",j,"av=",av)
        print("j:",j)
        pj=gr_marr(pds,lp1[j::],1)
        #pj=gr_subs(pds[6:7],3,15)
        #pj=gr_diff(pj,True)
        #gr_kasiski(pj,6)
        x=gr_freq(pj,ralph,100,1)
        #gr_freq_per(pds,ralph,0,30,0)
        
Pst=f_diff(Pst,True)
Pst_w=Pst.split(SPACE.Icon)
p0=""
p1=""
for p in Pst_w:
        if len(p)==2:
                #print(p)
                p0+=p[0]
                p1+=p[1]

#f_freq(Pst,ralph,1)
#f_freq(f_diff(Pst0),ralph,1)
#f_freq(p0,ralph,1)
#f_freq(p1,ralph,1)
#print(Pst)
#Pstd=f_diff(Pst,True)
#f_freq(Pstd,ralph,1)
#gr_get0(Pgr2[0:1])
#f_stat_c(pds[0],F.Icon,0)
#for i in range(20):
#        f_stat_c(gen_rand_like(Pstd,ralph),F.Icon)
#f_stat_c(gen_rand_like(runesTemplate,ralph),F.Icon,2)
#f_stat_c(runesTemplate,T.Icon,0)
#for r in runelist:
#        f_stat_c(runesTemplate,r.Icon,3)
        #f_stat_c(eng_pg,r.Icon)
#gr_stat_c(pag,TH.Icon)
#print(Pstd)
#g=gr_get0(Pgr2[:15])
#f_freq(g,ralph,1)

#f_kasiski("abcdabcdabcdefgbcd",3)
#gr_kasiski(pag,5)

#for i in range(0,50):
#        s=subs(pag[8],26,i+1)
        #s=p
#        print("Per:",i+1,"Xi2=",f_freq(s,ralph,0))
#        N+=1

#f_freq(subs(pag[8],0,28),ralph,1)
#pag=gr_diff(pag,True)

#gr_words_with(pag,F.Icon)

#gr_words_len(Pgr2,13)

#pag=gr_arr(Pgr,polpr)
#pag=gr_arr(pag,lp_m)
#pag=gr_arr(pag,lp_m)
#test_icorr_gr(pag,1)

#xor i with j and test
#pagxor=[]
#for i in range(len(pag)):
#        for j in range(i+1,len(pag)):
#                l=min(len(pag[i]),len(pag[j]))
#
#                s=f_str(pag[i][:l],pag[j][:l],-1)
#                pagxor.append(s)

# second half
#pag2=[]
#for p in pag:
#       pag2.append(p[3*len(p)//4:])

#gr_test(pag,ralph)

#N=0
Cz=0

#print("C=",Cz,"from",N,"r=%.2f"%(Cz/N*100))
#gr_freq(pag,ralph,0,1)
#pag=gr_marr(pag,lowPrimes)
#pag2=[]
#for p in pag:
#        lp=[]
#        for r in p:
#                lp.append(runelist[rune_get(r)].Gematria)
#        pag2.append(f_marr(p,lp,0)) 
        
                        
#test_oeiss_div(pag,50,ralph)

#gr_freq(pag,ralph,0,1)
#gr_freq_per(pag[8:9],ralph,100,40,1)
#pag=gr_line(pag,-1,28)
#gr_freq(pag,ralph,50,1)
#print(runesToEng(pag[4]))
i=0

#for p in pag:
#        print("Test:",i,runesToEng(p))
#        i+=1

#s=f_marr(pag[0][:100],lowPrimes_n29)
#gr_freq([s],ralph,0,1)
#test_icorr_gr(pag,1.1)
#vig_attack(pag,20,1.1)

#gr_freq(pag,ralph,50,1)

#gr_freq(pag,ralph,0,1)
#gr_test(pag,ralph)

#try guess chars
rt2=""
i=0
e=0
#rt=rt[:10]
for r in rt[5:]:
        c=rune_get(r)
        e0=e
        #e=(e0+(28-c)*lowPrimes[i%len(lowPrimes)])%29
        #e=(e0+(c)*lp[i%len(lp[::])])%29
        #e=(e0+(-c+27)*lp[(i)%(len(lp)-1)])%29
        e=(e0+(-c+27)*(runelist[(rune_get(rt[i-2])-13)%29].Gematria))%29
        rt2+=runelist[e].Icon
        i+=1
        #if i>=len(lp):
         #       break

rt2_diff=f_diff(rt2)
#f_freq(rt,ralph,1)
#f_freq(rt2,ralph,1)
#f_freq(rt2_diff,ralph,1)
#test_oeiss_div([rt2_diff],55,ralph)

rt3=f_marr(rt2_diff,lp[1:])

#gr_freq(pag,ralph,50,1)
#rt3=gr_line(rt3,-1,28)
#f_freq(rt3,ralph,1)


#enc
#for shf in range(78,84):
if 0:
        #enc="ᛝᛝᚳᚷᛒᚠᚦᛗᛞᚻᛝᚠᛡ"
        #ᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖ•ᛏᚱ
        enc="ᛇᚱᚾᛋᚩᚩᚳᚪᛖᚣᛖᛖᛏ"
        #print(f_diff(enc[::-1])[::-1])
        shf=79
        dec_word(enc[:],"SPECIALISATION",-1,27,lp,lp[shf:])
        dec_word(enc[:],"SPECIALISATION",-1,27,lp,lp[shf:])
                        
        dec_word(enc[:],"INITIALIZATION",1,2,lp,lp[shf:])
        dec_word(enc[:],"INITIALIZATION",-1,27,lp,lp[shf:])

        #dec_word(enc[1:],"TRIVIALIZATION",1,2,lp)
        #dec_word(enc[1:],"TRIVIALIZATION",-1,27,lp)
        #trivialisation

        #dec_word(enc[1:],"SPATIALISATION",1,2,lp)
        #dec_word(enc[1:],"SPATIALISATION",-1,27,lp)
        
#print(runesToEng(rt3))

#print(len(rt2))
#f_freq(rt2,ralph,1)
#f_freq(rt_diff,ralph,1)

#f_freq(rt,ralph,1)
#f_freq(eng_pg,ralph,1)
#f_freq(eng_pg_diff,ralph,1)


#f_stat(pag[16],ralph)
#s=gen_rand(len(pag[16]),ralph)
#s=f_diff(s)
#f_freq(s,ralph,1)
#f_freq(gen_rand(len(pag[16]),ralph),ralph,1)
#f_stat(gen_rand(len(pag[16])*2,ralph),ralph)
#f_freq(gen_rand(2500,ralph),ralph,1)
#f_stat(gen_rand(len(pag[16])//2,ralph),ralph)



#gr_test(pag2,ralph)
#test_icorr_gr(pag2,1.05,True)

i=0
#for p in Pgr:
#        #ip=stat_pairs(p,ralph)
#        ip=stat_chars(p,ralph,0)
#        print("Num=",i,"icor_c=",ip)
#        i+=1

#vig_attack(pag,20,1.3)
#print(Pgr)
#vig_attack(Pgr,10,1.3)
#test_icorr_gr([rTempV],1.3)

words=pa[1].split(SPACE.Icon)
#words=pa[0].split(SPACE.Icon)
#dec_versionswords[0])
#w08=f_str(words[0],engToRunes("EPIPHANY"),-1,True)
#sekarr=""
#for i in range(len(w08)):
#        sekarr+=str(29-rune_get(w08[i]))+" "
#print(w08)
#print(sekarr)
#words=TestEnc.split(SPACE.Icon)


#for pmul in lp_m2:
#for pmul in [2,3]:
#        marr=[pmul]*1000
        #print(marr)
        #marr=lp_m
#        pa=gr_marr(Pgr2[:-1],marr,True)
#        ic=test_icorr_gr(pa,1.2,True)
#        if ic>1.2:
#                print("<- pmul:",pmul)


#pa=gr_marr(pa,lp_m2,True)
#pa=gr_arr(pa,lp_m,True)
#for j in range(-10,10):
#        for k in range(-10,10):
#                pa=gr_par(Pgr2,j,k,0,True)
#                m=test_icorr_gr(pa,1.3,True)
#                if m>0:
#                        print("<- j=",j,"k=",k)

#print(f_diff("ᚠᚢᚦᚦ",True))
#pa=gr_diff(pa,True)
#pa=gr_par(pa,0,0,0,True)
#pa=gr_arr(pa,lp1,True)
#pa=gr_arr(pa,lp_m,True)
#pa=gr_par(pa,1,-2,0,True)
#test_icorr_gr(pa,1.05,True)
#print(pa[11])
#print(runesToEng(pa[11]))
#lstat_diff((pa[11]).replace(SPACE.Icon,""),1)
#decr_shift(pa[11],True)
#print(runesToEng(pa[15]))
i=0
#for pit in pa:
#        print("Text:",i)
#        ls=lstat_diff(pit.replace(SPACE.Icon,""),1)
#        print("<- Lstat:",ls)
#        i+=1


#find_rep(pa,5,15)
#print(runesToEng(pa[15]))
#decr_shift(pa[15],True)
#print(Pgr2[16])

#PgrA=gr_arr(Pgr,lp)
#test_icorr_gr(PgrA,1.2)
#find_rep(PgrA,15)

#test_oeiss(Pgr[:-1],1.3)
#test_oeiss(Pgr2[2:],1.3,True)
#s1=f_arr(Pgr[15],lp_m)
#s2=f_arr(Pgr2[15],lp_m,True)
#print(icorr(s1))
#decr_shift(s1)
#print(s2)
#icorr(s2,True)
#decr_shift(s2,True)

print("END")
